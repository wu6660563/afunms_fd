<settings>
  <data_type>xml</data_type>
  <decimals_separator></decimals_separator>
  <digits_after_decimal>0</digits_after_decimal>
   <redraw>true</redraw>
  <background>
    <alpha>100</alpha>
    <border_alpha>20</border_alpha>
  </background>
  
  <plot_area>
    <color></color>                                           <!-- [#FFFFFF](hex color code) Separate color codes with comas for gradient -->
    <alpha></alpha>                                           <!-- [0] (0 - 100) if you want it to be different than background color, use bigger than 0 value -->
    <border_color></border_color>                             <!-- [#000000] (hex color code) -->                                        
    <border_alpha></border_alpha>                                                                  
    <margins>                                                 
      <left>40</left>                                         
      <top>35</top>                                           
      <right>10</right>                                       
      <bottom>60</bottom>     
    </margins>
  </plot_area>
  <grid>
    <category>
    <color></color>                                         <!-- [#000000] (hex color code) -->
      <alpha>20</alpha> 
      <dashed>true</dashed>
       <dash_length></dash_length> 
    </category>
    <value>                                                   <!-- value axis grid -->      
      <color></color>                                         <!-- [#000000] (hex color code) -->
      <alpha>20</alpha>                                        <!-- [15] (0 - 100) -->
      <dashed>true</dashed>                                       <!-- [false] (true / false) -->
      <dash_length></dash_length>                             <!-- [5] (Number) -->
      <approx_count></approx_count>                           <!-- [10] (Number) approximate number of gridlines -->
      <fill_color></fill_color>                               <!-- [#FFFFFF] (hex color code) every second area between gridlines will be filled with this color (you will need to set fill_alpha > 0) -->
      <fill_alpha></fill_alpha>                               <!-- [0] (0 - 100) opacity of fill -->            
    </value>
  </grid>
  
   
  <values>                                                    <!-- VALUES -->
    <category>                                                <!-- category axis -->
      <enabled></enabled>                                     <!-- [true] (true / false) -->
      <frequency></frequency>                                 <!-- [1] (Number) how often values should be placed -->
      <start_from></start_from>                               <!-- [1] (Number) you can set series from which category values will be displayed -->
      <rotate>45</rotate>                                       <!-- [0] (0 - 90) angle of rotation. If you want to rotate by degree from 1 to 89, you must have font.swf file in fonts folder -->      
      <color></color>                                         <!-- [text_color] (hex color code) -->
      <text_size></text_size>                                 <!-- [text_size] (Number) -->
      <inside></inside>                                       <!-- [false] (true / false) if set to true, axis values will be displayed inside plot area. This setting will not work for values rotated by 1-89 degrees (0 and 90 only) -->          
    </category>
    <value>                                                   <!-- value axis -->
      <enabled>true</enabled>                                <!-- [true] (true / false) -->
      <reverse></reverse>                                     <!-- [false] (true / false) whether to reverse this axis values or not. If set to true, values will start from biggest number and will end with a smallest number -->    
      <min>0</min>                                            <!-- [] (Number) minimum value of this axis. If empty, this value will be calculated automatically. -->
      <max></max>                                             <!-- [] (Number) maximum value of this axis. If empty, this value will be calculated automatically -->
      <strict_min_max></strict_min_max>                       <!-- [false] (true / false) by default, if your values are bigger then defined max (or smaller then defined min), max and min is changed so that all the chart would fit to chart area. If you don't want this, set this option to true. -->
      <frequency></frequency>                                 <!-- [1] (Number) how often values should be placed, 1 - near every gridline, 2 - near every second gridline... -->
      <rotate></rotate>                                       <!-- [0] (0 - 90) angle of rotation. If you want to rotate by degree from 1 to 89, you must have font.swf file in fonts folder -->      
      <skip_first></skip_first>                               <!-- [true] (true / false) to skip or not first value -->
      <skip_last></skip_last>                                 <!-- [false] (true / false) to skip or not last value -->
      <color></color>                                         <!-- [text_color] (hex color code) --> 
      <text_size></text_size>                                 <!-- [text_size] (Number) -->
      <unit>%</unit>                                          <!-- [] (text) -->
      <unit_position></unit_position>                         <!-- [right] (right / left) -->
      <integers_only></integers_only>                         <!-- [false] (true / false) if set to true, values with decimals will be omitted -->
      <inside></inside>                                       <!-- [false] (true / false) if set to true, axis values will be displayed inside plot area. This setting will not work for values rotated by 1-89 degrees (0 and 90 only) -->
      <duration></duration>                                   <!-- [] (ss/mm/hh/DD) In case you want your axis to display formatted durations instead of numbers, you have to set the unit of the duration in your data file. For example, if your values in data file represents seconds, set "ss" here.-->                   
    </value>
  </values>
  <axes>                                                      <!-- axes -->
    <category>                                                <!-- category axis -->
      <color></color>                                         <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                        <!-- [100] (0 - 100) -->
      <width></width>                                         <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length></tick_length>                             <!-- [7] (Number) -->
    </category>
    <value>                                                   <!-- value axis -->
      <color></color>                                         <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                        <!-- [100] (0 - 100) -->
      <width></width>                                         <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length>7</tick_length>                            <!-- [7] (Number) -->
      <logarithmic></logarithmic>                             <!-- [false] (true / false) If set to true, this axis will use logarithmic scale instead of linear -->
    </value>
  </axes>  
  <depth>16</depth>
  <column>
  	<type></type> 
  	   
     <width>40</width>  
    <spacing>10</spacing>            
    <alpha>45</alpha>      
        <data_labels_position>above</data_labels_position>             <!-- [outside] (inside, outside, above). This setting is only for clustered chart. --> 
   
    <grow_time>2</grow_time>
    <data_labels>
      <![CDATA[{value}]]>                                 <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
    </data_labels>
     <balloon_text>{series}CPU的平均利用率: {value}%</balloon_text>                                                         <!-- if you set "above" for column chart, the data label will be displayed inside column, rotated  by 90 degrees -->
  </column>
  
   <legend>                                                    <!-- LEGEND -->
    <enabled></enabled>                                       <!-- [true] (true / false) -->
    <x>388</x>                                                <!-- [] (Number / Number% / !Number) if empty, will be equal to left margin -->
    <y>30</y>                                                 <!-- [] (Number / Number% / !Number) if empty, will be below plot area -->
    <width>120</width>                                        <!-- [] (Number / Number%) if empty, will be equal to plot area width -->
    <max_columns></max_columns>                               <!-- [] (Number) the maximum number of columns in the legend -->    
    <color></color>                                           <!-- [#FFFFFF] (hex color code) background color. Separate color codes with comas for gradient -->
    <alpha>0</alpha>                                          <!-- [0] (0 - 100) background alpha -->
    <border_color></border_color>                             <!-- [#000000] (hex color code) border color -->
    <border_alpha></border_alpha>                             <!-- [0] (0 - 100) border alpha -->
    <text_color></text_color>                                 <!-- [text_color] (hex color code) -->   
    <text_size></text_size>                                   <!-- [text_size] (Number) -->
    <spacing>5</spacing>                                      <!-- [10] (Number) vertical and horizontal gap between legend entries -->
    <margins></margins>                                       <!-- [0] (Number) legend margins (space between legend border and legend entries, recommended to use only if legend border is visible or background color is different from chart area background color) -->
    <reverse_order>true</reverse_order>                       <!-- [false] (true / false) whether to sort legend entries in a reverse order -->    
    <align></align>                                           <!-- [left] (left / center / right) alignment of legend entries -->
    <key>                                                     <!-- KEY (the color box near every legend entry) -->
      <size></size>                                           <!-- [16] (Number) key size-->
      <border_color></border_color>                           <!-- [] (hex color code) leave empty if you don't want to have border-->
    </key>
  </legend>  
  
  <export_as_image>                                           <!-- export_as_image feature works only on a web server -->
    <file></file>                                             <!-- [] (filename) if you set filename here, context menu (then user right clicks on flash movie) "Export as image" will appear. This will allow user to export chart as an image. Collected image data will be posted to this file name (use amcolumn/export.php or amcolumn/export.aspx) -->
    <target></target>                                         <!-- [] (_blank, _top ...) target of a window in which export file must be called -->
    <x></x>                                                   <!-- [0] (Number / Number% / !Number) x position of "Collecting data" text -->
    <y></y>                                                   <!-- [] (Number / Number% / !Number) y position of "Collecting data" text. If not set, will be aligned to the bottom of flash movie -->
    <color></color>                                           <!-- [#BBBB00] (hex color code) background color of "Collecting data" text -->
    <alpha></alpha>                                           <!-- [0] (0 - 100) background alpha -->
    <text_color></text_color>                                 <!-- [text_color] (hex color code) -->
    <text_size></text_size>                                   <!-- [text_size] (Number) -->
  </export_as_image>
  
  <error_messages>                                            <!-- "error_messages" settings will be applied for all error messages except the one which is showed if settings file wasn't found -->
    <enabled></enabled>                                       <!-- [true] (true / false) -->
    <x></x>                                                   <!-- [] (Number / Number% / !Number) x position of error message. If not set, will be aligned to the center -->
    <y></y>                                                   <!-- [] (Number / Number% / !Number) y position of error message. If not set, will be aligned to the center -->
    <color></color>                                           <!-- [#BBBB00] (hex color code) background color of error message. Separate color codes with comas for gradient -->
    <alpha></alpha>                                           <!-- [100] (0 - 100) background alpha -->
    <text_color></text_color>                                 <!-- [#FFFFFF] (hex color code) -->
    <text_size></text_size>                                   <!-- [text_size] (Number) -->
  </error_messages>    
  
  <strings>
    <no_data></no_data>                                       <!-- [No data for selected period] (text) if data is missing, this message will be displayed -->
    <export_as_image></export_as_image>                       <!-- [Export as image] (text) text for right click menu -->
    <collecting_data></collecting_data>                       <!-- [Collecting data] (text) this text is displayed while exporting chart to an image -->
    <!-- the strings below are only important if you format your axis values as durations -->
    <ss></ss>                                                <!-- [] unit of seconds -->
    <mm></mm>                                                <!-- [:] unit of minutes -->
    <hh></hh>                                                <!-- [:] unit of hours -->
    <DD></DD>                                                <!-- [d. ] unit of days -->    
  </strings>  
 
  <context_menu>                                              <!-- context menu allows you to controll right-click menu items. You can add custom menu items to create custom controls -->                                                              
                                                              <!-- "function_name" specifies JavaScript function which will be called when user clicks on this menu. You can pass variables, for example: function_name="alert('something')" -->
                                                              <!-- "title" sets menu item text. Do not use for title: Show all, Zoom in, Zoom out, Print, Settings... -->
                                                              <!-- you can have any number of custom menus. Uncomment the line below to enable this menu and add apropriate JS function to your html file. -->
     
     <!-- <menu function_name="printChart" title="Print chart"></menu> -->
     
     <default_items>
       <zoom></zoom>                                     <!-- [false] (true / false) to show or not flash players zoom menu -->
       <print></print>                                   <!-- [true] (true / false) to show or not flash players print menu -->
     </default_items>
  </context_menu> 
  
  <graphs>

		<graph gid="0">
		
			<alpha>60</alpha>
		</graph>
		
	</graphs>
	
  <labels>
    <label lid="0">
     <x>10</x>                                                <!-- [0] (Number / Number% / !Number) -->
      <y>0</y> 
      <text><![CDATA[<b>  最近一周CPU平均利用率</b>]]></text>
    
      <text_color>000000</text_color>
      <text_size>14</text_size>
      <align>center</align>
    </label>
  </labels>
</settings>