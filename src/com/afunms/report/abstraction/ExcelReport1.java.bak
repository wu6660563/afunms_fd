/**
 * <p>Description:create excel report,bridge pattern</p>
 * <p>Company: dhcc.com</p>
 * @author afunms
 * @project afunms
 * @date 2006-11-18
 */

package com.afunms.report.abstraction;

import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.swing.text.TabExpander;

import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.UnderlineStyle;
import jxl.format.VerticalAlignment;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableImage;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.jfree.chart.ChartUtilities;

import com.afunms.application.dao.DBDao;
import com.afunms.application.dao.DBTypeDao;
import com.afunms.application.dao.Db2spaceconfigDao;
import com.afunms.application.dao.InformixspaceconfigDao;
import com.afunms.application.dao.OraspaceconfigDao;
import com.afunms.application.dao.SqldbconfigDao;
import com.afunms.application.dao.SybspaceconfigDao;
import com.afunms.application.dao.WeblogicConfigDao;
import com.afunms.application.manage.IISManager;
import com.afunms.application.manage.WeblogicManager;
import com.afunms.application.model.DBTypeVo;
import com.afunms.application.model.DBVo;
import com.afunms.application.model.Db2spaceconfig;
import com.afunms.application.model.IISVo;
import com.afunms.application.model.Informixspaceconfig;
import com.afunms.application.model.Oraspaceconfig;
import com.afunms.application.model.Sqldbconfig;
import com.afunms.application.model.SybaseVO;
import com.afunms.application.model.Sybspaceconfig;
import com.afunms.application.model.TablesVO;
import com.afunms.application.model.WeblogicConfig;
import com.afunms.application.weblogicmonitor.WeblogicHeap;
import com.afunms.application.weblogicmonitor.WeblogicJdbc;
import com.afunms.application.weblogicmonitor.WeblogicNormal;
import com.afunms.application.weblogicmonitor.WeblogicQueue;
import com.afunms.application.weblogicmonitor.WeblogicServer;
import com.afunms.application.weblogicmonitor.WeblogicSnmp;
import com.afunms.common.util.CEIString;
import com.afunms.common.util.ShareData;
import com.afunms.common.util.SysLogger;
import com.afunms.config.dao.DistrictDao;
import com.afunms.config.model.DistrictConfig;
import com.afunms.config.model.Macconfig;
import com.afunms.event.model.EventList;
import com.afunms.event.model.NetSyslog;
import com.afunms.initialize.ResourceCenter;
import com.afunms.polling.base.Node;
import com.afunms.polling.impl.IpResourceReport;
import com.afunms.polling.node.IIS;
import com.afunms.polling.node.Tomcat;
import com.afunms.polling.node.Weblogic;
import com.afunms.polling.om.IpMac;
import com.afunms.polling.om.IpRouter;
import com.afunms.polling.om.Portconfig;
import com.afunms.polling.om.Softwarecollectdata;
import com.afunms.portscan.model.PortConfig;
import com.afunms.report.base.AbstractionReport1;
import com.afunms.report.base.ImplementorReport1;
import com.afunms.system.model.User;
import com.afunms.topology.dao.HostNodeDao;
import com.afunms.topology.dao.LinkDao;
import com.afunms.topology.dao.NodeMonitorDao;
import com.afunms.topology.model.HostNode;
import com.afunms.topology.model.Link;
import com.afunms.topology.model.NetDistrictIpDetail;
import com.afunms.topology.model.NodeMonitor;
import com.icss.ro.de.common.message.xml.soap.Name;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Cell;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Table;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.rtf.RtfWriter2;
import com.afunms.polling.om.*;
public class ExcelReport1 extends AbstractionReport1 {
	private Hashtable reportHash;
	private HttpServletRequest request;
	public void setRequest(HttpServletRequest request)
	{
		this.request = request;
	}
	// I_MonitorIpList monitorManager=new MonitoriplistManager();

	String[] chlName = { "开关机", "远程关机使能", "压缩机1", "压缩机2", "加热器1", "加热器2",
			"热气盘通", "注水阀", "加湿器", "除湿风机模式", "风机", "二号机组使能", "注水时间", "高温告警",
			"低温告警", "高湿告警", "低湿告警", "传感器板故障", "气流丢失", "地板溢水", "压缩机1高压告警",
			"压缩机2高压告警", "压缩机1低压告警", "压缩机2低压告警", "制冷模式", "加热模式", "加湿模式", "除湿模式",
			"制冷系统维护请求", "湿度系统维护请求", "空气系统维护请求", "加湿器低水位告警", "备用告警1", "备用告警2",
			"备用告警3", "电源丢失" };

	public ExcelReport1(ImplementorReport1 impReport) {
		super(impReport);
	}

	public ExcelReport1(ImplementorReport1 impReport, Hashtable hash) {
		super(impReport);
		reportHash = hash;
	}

	public void createReport() {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		if (impReport.getColWidth().length != impReport.getTableHead().length) {
			SysLogger.error("colWidth[].length != tableHead[].length");
			return;
		}

		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath()
					+ "temp/dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/dhcnms_report.xls";
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("网管报表", 0);

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, impReport.getHead(), labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, impReport.getNote());
			sheet.addCell(tmpLabel);

			int row = impReport.getTable().length;
			int col = impReport.getTableHead().length;
			for (int i = 0; i < col; i++) {
				Label label = new Label(i, 3, impReport.getTableHead()[i],
						labelFormat);
				sheet.addCell(label);
			}

			for (int i = 0; i < row; i++)
				for (int j = 0; j < col; j++) {
					Label label = new Label(j, i + 4,
							impReport.getTable()[i][j]);
					sheet.addCell(label);
				}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, row + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			SysLogger.error("Error in ExcelReport.createReport()", e);
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createWordReport_hardware(String filename)
	{
		try{
			String starttime = (String)reportHash.get("starttime");
			String totime = (String)reportHash.get("totime");
			Document document = new Document(PageSize.A4);
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			fileName = filename;
			document.open();
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",BaseFont.NOT_EMBEDDED);
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
			Paragraph title = new Paragraph("硬件报表");
			title.setAlignment(Element.ALIGN_CENTER);
			document.add(title);
			
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
			+ "数据统计时间段:" + starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			
			Table aTable = new Table(4);
			float[] widths = { 100f, 100f, 300f, 100f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			aTable.addCell("序号");
			aTable.addCell("设备类型");
			aTable.addCell("描述");
			aTable.addCell("状态");
			Vector deviceV = (Vector)reportHash.get("deviceV");
			for(int m=0;m<deviceV.size();m++)
			{
	            Devicecollectdata devicedata = (Devicecollectdata)deviceV.get(m);
				String name = devicedata.getName();
				String type = devicedata.getType();				
				String status = devicedata.getStatus();
				aTable.addCell(m+1+"");
				aTable.addCell(type);
				aTable.addCell(name);
				aTable.addCell(status);
	         }
			document.add(aTable);
			document.close();
			System.out.println("abcdefg");
		}catch(Exception e){e.printStackTrace();}
	}
	public void createExcelReport_hardware(String filename)
	{
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			String starttime = (String)reportHash.get("starttime");
			String totime = (String)reportHash.get("totime");
			wb = Workbook.createWorkbook(new File(filename));
			fileName = filename;
			WritableSheet sheet = wb.createSheet("硬件报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			Label tmpLabel = null;
			tmpLabel = new Label(1, 0,"硬件报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime +" 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "设备类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "状态", _labelFormat);
			sheet.addCell(tmpLabel);
			Vector deviceV = (Vector)reportHash.get("deviceV");
			for(int m=0;m<deviceV.size();m++)
			{
	            Devicecollectdata devicedata = (Devicecollectdata)deviceV.get(m);
				String name = devicedata.getName();
				String type = devicedata.getType();				
				String status = devicedata.getStatus();
				tmpLabel = new Label(0, 5+m, m+1+"",p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 5+m, type, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 5+m, name, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 5+m, status, p_labelFormat);
				sheet.addCell(tmpLabel);
	         }
			// 设置图片
			/*File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
*/
			wb.write();
			System.out.println("this is a test2.xls");
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createPdfReport_hardware(String filename)
	{
		try{
			String starttime = (String)reportHash.get("starttime");
			String totime = (String)reportHash.get("totime");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			fileName = filename;
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
			Paragraph title = new Paragraph("硬件报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:"+ starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Phrase("\n"));
			Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
			PdfPTable aTable = new PdfPTable(4);
			float[] widths = { 100f, 100f, 300f, 100f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			aTable.addCell(new Phrase("序号", contextFont));
			aTable.addCell(new Phrase("设备类型", contextFont));
			aTable.addCell(new Phrase("描述", contextFont));
			aTable.addCell(new Phrase("状态", contextFont));
			Vector deviceV = (Vector)reportHash.get("deviceV");
			for(int m=0;m<deviceV.size();m++)
			{
	            Devicecollectdata devicedata = (Devicecollectdata)deviceV.get(m);
				String name = devicedata.getName();
				String type = devicedata.getType();				
				String status = devicedata.getStatus();
				aTable.addCell(new Phrase(m+1+"",contextFont));
				aTable.addCell(new Phrase(type,contextFont));
				aTable.addCell(new Phrase(name,contextFont));
				aTable.addCell(new Phrase(status,contextFont));
	         }
			/*Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
					+ ".png");

			img.setAlignment(Image.LEFT);// 设置图片显示位置
			img.scalePercent(75);
			document.add(aTable);
			document.add(img);*/
			document.add(aTable);
			document.close();
		}catch(Exception e){e.printStackTrace();}
	}
	public void createExcelReport_pingWithClose(String filename,WritableWorkbook wb,int count)
	{
		if (impReport.getTable() == null) 
		{
			fileName = null;
			return;
		}
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			
			
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			//System.out.println("----------------------"+hostname + "性能报表" + count);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} /*finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}*/
	}
	public void createExcelReport_ping(String filename)
	{
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createExcelReport_capacity(String filename)
	{
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			File file = null;
			//sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			String cpu = "";
			if (CPU.get("cpu") != null)
				cpu = (String) CPU.get("cpu");
			String cpumax = "";
			if (CPU.get("cpumax") != null)
				cpumax = (String) CPU.get("cpumax");
			String avgcpu = "";
			if (CPU.get("avgcpu") != null)
				avgcpu = (String) CPU.get("avgcpu");
			tmpLabel = new Label(0, 4, "CPU利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, cpu + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, cpumax, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, avgcpu, p_labelFormat);
			sheet.addCell(tmpLabel);

			int allRow = 5;
			// 设置图片
			file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			allRow = allRow + 2;
			sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			allRow = allRow + 6;

			if (Memory != null && Memory.size() > 0) {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				for (int i = 0; i < Memory.size(); i++) {
					Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
					String name = (String) mhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < memoryItem.length; j++) {
						String value = "";
						if (mhash.get(memoryItem[j]) != null) {
							value = (String) mhash.get(memoryItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			} else {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				String[] names = null;
				HostNodeDao dao = new HostNodeDao();
				HostNode node = (HostNode) dao
						.findByCondition("ip_address", ip).get(0);
				// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
				if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
					names = new String[] { "PhysicalMemory", "VirtualMemory" };
				} else {
					names = new String[] { "PhysicalMemory", "SwapMemory" };
				}
				for (int i = 0; i < names.length; i++) {
					// Hashtable mhash = (Hashtable)(Memory.get(new
					// Integer(i)));
					String name = names[i];
					// String[] unixs = {"PhysicalMemory","VirtualMemory"};
					allRow = allRow + 1;
					label = new Label(1, allRow, names[i]);
					sheet.addCell(label);

					for (int j = 0; j < memoryItem.length; j++) {
						// 因为当前没有瞬间值和利用率
						String value = "";
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));

			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createExcelReport_disk(String filename)
	{
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			//sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			int allRow = 4;
			if (Disk != null && Disk.size() > 0) {
				// memoryRow = Disk.size();
				//allRow = allRow + 1 + 7;
				tmpLabel = new Label(0, allRow, "磁盘使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 磁盘的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "磁盘名", _labelFormat);
				// CellFormat cf = new CellFormat();
				// label.setCellFormat(cf)

				sheet.addCell(label);
				for (int i = 0; i < diskItemch.length; i++) {
					label = new Label(i + 2, allRow, diskItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写磁盘

				for (int i = 0; i < Disk.size(); i++) {
					Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
					String name = (String) diskhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < diskItem.length; j++) {
						String value = "";
						if (diskhash.get(diskItem[j]) != null) {
							value = (String) diskhash.get(diskItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
				}// end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "disk"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				sheet.addImage(new WritableImage(1, allRow + 2, 9, 9, file));

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/*
	 * guzhiming 创建服务器报表,文件连接未关闭, 报表订阅模块用
	 */
	public void createReport_hostWithoutClose(String filename,WritableWorkbook wb)
	{
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			//wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			String cpu = "";
			if (CPU.get("cpu") != null)
				cpu = (String) CPU.get("cpu");
			String cpumax = "";
			if (CPU.get("cpumax") != null)
				cpumax = (String) CPU.get("cpumax");
			String avgcpu = "";
			if (CPU.get("avgcpu") != null)
				avgcpu = (String) CPU.get("avgcpu");
			tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 15, cpu + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 15, cpumax, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 15, avgcpu, p_labelFormat);
			sheet.addCell(tmpLabel);

			int allRow = 15;
			// 设置图片
			file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			allRow = allRow + 2;
			sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			allRow = allRow + 6;

			if (Memory != null && Memory.size() > 0) {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				for (int i = 0; i < Memory.size(); i++) {
					Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
					String name = (String) mhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < memoryItem.length; j++) {
						String value = "";
						if (mhash.get(memoryItem[j]) != null) {
							value = (String) mhash.get(memoryItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			} else {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				String[] names = null;
				HostNodeDao dao = new HostNodeDao();
				HostNode node = (HostNode) dao
						.findByCondition("ip_address", ip).get(0);
				// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
				if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
					names = new String[] { "PhysicalMemory", "VirtualMemory" };
				} else {
					names = new String[] { "PhysicalMemory", "SwapMemory" };
				}
				for (int i = 0; i < names.length; i++) {
					// Hashtable mhash = (Hashtable)(Memory.get(new
					// Integer(i)));
					String name = names[i];
					// String[] unixs = {"PhysicalMemory","VirtualMemory"};
					allRow = allRow + 1;
					label = new Label(1, allRow, names[i]);
					sheet.addCell(label);

					for (int j = 0; j < memoryItem.length; j++) {
						// 因为当前没有瞬间值和利用率
						String value = "";
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));

			}
			if (Disk != null && Disk.size() > 0) {
				// memoryRow = Disk.size();
				allRow = allRow + 1 + 7;
				tmpLabel = new Label(0, allRow, "磁盘使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 磁盘的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "磁盘名", _labelFormat);
				// CellFormat cf = new CellFormat();
				// label.setCellFormat(cf)

				sheet.addCell(label);
				for (int i = 0; i < diskItemch.length; i++) {
					label = new Label(i + 2, allRow, diskItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写磁盘

				for (int i = 0; i < Disk.size(); i++) {
					Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
					String name = (String) diskhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < diskItem.length; j++) {
						String value = "";
						if (diskhash.get(diskItem[j]) != null) {
							value = (String) diskhash.get(diskItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
				}// end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "disk"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				sheet.addImage(new WritableImage(1, allRow + 2, 9, 9, file));

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			//wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} /*finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}*/
	}
	
	public void createReport_host(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			String cpu = "";
			if (CPU.get("cpu") != null)
				cpu = (String) CPU.get("cpu");
			String cpumax = "";
			if (CPU.get("cpumax") != null)
				cpumax = (String) CPU.get("cpumax");
			String avgcpu = "";
			if (CPU.get("avgcpu") != null)
				avgcpu = (String) CPU.get("avgcpu");
			tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 15, cpu + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 15, cpumax, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 15, avgcpu, p_labelFormat);
			sheet.addCell(tmpLabel);

			int allRow = 15;
			// 设置图片
			file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			allRow = allRow + 2;
			sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			allRow = allRow + 6;

			if (Memory != null && Memory.size() > 0) {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				for (int i = 0; i < Memory.size(); i++) {
					Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
					String name = (String) mhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < memoryItem.length; j++) {
						String value = "";
						if (mhash.get(memoryItem[j]) != null) {
							value = (String) mhash.get(memoryItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			} else {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 内存的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "内存名", _labelFormat);
				sheet.addCell(label);
				for (int i = 0; i < memoryItemch.length; i++) {
					label = new Label(i + 2, allRow, memoryItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写内存
				String[] names = null;
				HostNodeDao dao = new HostNodeDao();
				HostNode node = (HostNode) dao
						.findByCondition("ip_address", ip).get(0);
				// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
				if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
					names = new String[] { "PhysicalMemory", "VirtualMemory" };
				} else {
					names = new String[] { "PhysicalMemory", "SwapMemory" };
				}
				for (int i = 0; i < names.length; i++) {
					// Hashtable mhash = (Hashtable)(Memory.get(new
					// Integer(i)));
					String name = names[i];
					// String[] unixs = {"PhysicalMemory","VirtualMemory"};
					allRow = allRow + 1;
					label = new Label(1, allRow, names[i]);
					sheet.addCell(label);

					for (int j = 0; j < memoryItem.length; j++) {
						// 因为当前没有瞬间值和利用率
						String value = "";
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
					String value = "";
					if (memMaxHash.get(name) != null) {
						value = (String) memMaxHash.get(name);
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 2, allRow, value,
								p_labelFormat);
						sheet.addCell(label);
					}
					String avgvalue = "";
					if (memAvgHash.get(name) != null) {
						avgvalue = (String) memAvgHash.get(name);
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					} else {
						label = new Label(memoryItem.length + 3, allRow,
								avgvalue, p_labelFormat);
						sheet.addCell(label);
					}

				} // end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "memory"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				allRow = allRow + 2;
				sheet.addImage(new WritableImage(1, allRow, 7, 7, file));

			}
			if (Disk != null && Disk.size() > 0) {
				// memoryRow = Disk.size();
				allRow = allRow + 1 + 7;
				tmpLabel = new Label(0, allRow, "磁盘使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 磁盘的标题
				allRow = allRow;
				Label label = new Label(1, allRow, "磁盘名", _labelFormat);
				// CellFormat cf = new CellFormat();
				// label.setCellFormat(cf)

				sheet.addCell(label);
				for (int i = 0; i < diskItemch.length; i++) {
					label = new Label(i + 2, allRow, diskItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写磁盘

				for (int i = 0; i < Disk.size(); i++) {
					Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
					String name = (String) diskhash.get("name");
					allRow = allRow + 1;
					label = new Label(1, allRow, name);
					sheet.addCell(label);
					for (int j = 0; j < diskItem.length; j++) {
						String value = "";
						if (diskhash.get(diskItem[j]) != null) {
							value = (String) diskhash.get(diskItem[j]);
						}
						label = new Label(j + 2, allRow, value, p_labelFormat);
						sheet.addCell(label);
					}
				}// end 写内存
				// 设置图片
				file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "disk"
						+ ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				sheet.addImage(new WritableImage(1, allRow + 2, 9, 9, file));

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createReport_tomcat(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			if (CPU == null)
				CPU = new Hashtable();
			String Ping = (String) reportHash.get("Ping");
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");

			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
			String jvmnow = (String) reportHash.get("jvmnow");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "TomcatPing"
					+ ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// jvm-------------------
			tmpLabel = new Label(0, 14, "JVM内存利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "最小利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "平均利用率率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 15, jvmnow + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 15, (String) maxjvm.get("max_tomcat_jvm"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 15, (String) maxjvm.get("avg_tomcat_jvm"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			/*
			 * tmpLabel = new Label(0, 13, "JVM利用率", b_labelFormat);
			 * sheet.addCell(tmpLabel);
			 */

			// 设置图片
			File file1 = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "tomcat_jvm"
					+ ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;

			sheet.addImage(new WritableImage(1, 16, 7, 7, file1));
			// allRow = allRow+7;

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// public void createReport_ora(String filename)
	// {
	// if(impReport.getTable()==null)
	// {
	// fileName = null;
	// return;
	// }
	// WritableWorkbook wb = null;
	// try
	// {
	// //fileName = ResourceCenter.getInstance().getSysPath() +
	// "temp\\dhcnms_report.xls";
	// //fileName = CommonAppUtil.getAppName() + "/temp/hostnms_report.xls";
	// fileName = ResourceCenter.getInstance().getSysPath() + filename;
	// wb = Workbook.createWorkbook(new File(fileName));
	//			
	// String hostname = (String)reportHash.get("dbname");
	// String ip = (String)reportHash.get("ip");
	// String newip = doip(ip);
	// WritableSheet sheet = wb.createSheet(hostname+"性能报表",0);
	// String Ping = (String)reportHash.get("Ping");
	// String starttime = (String)reportHash.get("starttime");
	// String totime = (String)reportHash.get("totime");
	//			
	// Hashtable maxping = (Hashtable)reportHash.get("ping");
	//			
	// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//						
	// WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"),
	// 12, WritableFont.BOLD, false);
	// WritableCellFormat labelFormat = new WritableCellFormat (labelFont);
	//			
	// WritableCellFormat _labelFormat = new WritableCellFormat ();
	// _labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	//			
	// WritableCellFormat p_labelFormat = new WritableCellFormat ();
	// p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	//			
	// WritableCellFormat b_labelFormat = new WritableCellFormat ();
	// b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	//			
	// Label tmpLabel = null;
	// tmpLabel = new Label(1, 0, hostname+"性能报表",labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime+" 至 "+totime);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 4, "连通率",b_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// tmpLabel = new Label(1, 4, "最小连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 4, "平均连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// tmpLabel = new Label(1, 5, (String)maxping.get("pingmax"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 5,
	// (String)maxping.get("avgpingcon"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// // 设置图片
	// File file = new
	// File(ResourceCenter.getInstance().getSysPath()+"/resource/image/jfreechart/"+newip+"ConnectUtilization"+".png");
	// //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
	// //allRow = allRow+2;
	// sheet.addImage(new WritableImage(1,6,7,7,file));
	// //allRow = allRow+7;
	//		   
	// tmpLabel = new Label(0, 14, "序号",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 14, "文件名",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 14, "表空间",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 14, "空间大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 14, "空闲大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 14, "空闲比例",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 14, "文件状态",_labelFormat);
	// sheet.addCell(tmpLabel);
	// int row = 14;
	// //表空间信息
	// Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
	// for(int i=0;i<tableinfo_v.size();i++){
	// Hashtable ht = (Hashtable)tableinfo_v.get(i);
	// String _filename = ht.get("file_name").toString();
	// String tablespace = ht.get("tablespace").toString();
	// String size = ht.get("size mb").toString();
	// String free = ht.get("free mb").toString();
	// String percent = ht.get("percent free").toString();
	// String status = ht.get("status").toString();
	//				
	// row = row + (i);
	// tmpLabel = new Label(0, 15+i, i+1+"",p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 15+i, _filename,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 15+i, tablespace,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 15+i, size,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 15+i, free,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 15+i, percent,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 15+i, status,p_labelFormat);
	// sheet.addCell(tmpLabel);
	//				
	// }
	//			
	// if(impReport.getChart()!=null){
	// ByteArrayOutputStream baos = new ByteArrayOutputStream();
	// try
	// {
	// ChartUtilities.writeChartAsPNG(baos,
	// impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight());
	// }
	// catch (IOException ioe){}
	// WritableImage wi = new WritableImage(2,10000 + 5, 8, 12,
	// baos.toByteArray());
	// sheet.addImage(wi);
	// }
	// wb.write();
	// }
	// catch(Exception e)
	// {
	// //SysLogger.error("Error in ExcelReport.createReport()",e);
	// e.printStackTrace();
	// }
	// finally
	// {
	// try
	// {
	// if(wb!= null) wb.close();
	// }
	// catch(Exception e){}
	// }
	// }

	public void createReport_hostcpu(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("CPU统计报表", 0);
			List cpulist = (List) reportHash.get("cpulist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "主机服务器CPU性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "平均值(%)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "最大值(%)", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (cpulist != null && cpulist.size() > 0) {
				for (int i = 0; i < cpulist.size(); i++) {
					Hashtable cpuhash = (Hashtable) cpulist.get(i);
					String ip = (String) cpuhash.get("ipaddress");
					if (cpuhash == null)
						cpuhash = new Hashtable();
					String cpumax = "";
					String avgcpu = "";
					if (cpuhash.get("max") != null) {
						cpumax = (String) cpuhash.get("max");
					}
					if (cpuhash.get("avgcpucon") != null) {
						avgcpu = (String) cpuhash.get("avgcpucon");
					}
					HostNodeDao dao = new HostNodeDao();
					HostNode node = (HostNode) dao.findByCondition(
							"ip_address", ip).get(0);
					// Monitoriplist monitoriplist =
					// monitorManager.getByIpaddress(ip);
					String equname = node.getAlias();
					String osname = node.getType();
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, ip, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, equname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, osname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, avgcpu, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, cpumax, p_labelFormat);
					sheet.addCell(tmpLabel);

				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_hostmem(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("内存使用统计报表", 0);
			List memlist = (List) reportHash.get("memlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "主机服务器内存性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "物理内存总大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "虚拟内存总大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 4, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 4, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 5 + i, (String) mlist.get(7),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, 5 + i, (String) mlist.get(8),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_hostdisk(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("磁盘使用统计报表", 0);
			List memlist = (List) reportHash.get("disklist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "主机服务器磁盘性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "磁盘名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "磁盘总大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "已使用大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "利用率", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			
			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_hostping(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("连通率使用统计报表", 0);
			List memlist = (List) reportHash.get("pinglist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "主机服务器连通率性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "不可达次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "平均响应时间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "最大响应时间", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			String ipaddress = (String)request.getParameter("ipaddress");
			String newip = doip(ipaddress);
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_tomcatping(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("TOMCAT连通率使用统计报表", 0);
			List memlist = (List) reportHash.get("pinglist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "TOMCAT连通率性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "不可达次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "平均响应时间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "最大响应时间", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// public void createReport_dbping(String filename)
	// {
	// if(impReport.getTable()==null)
	// {
	// fileName = null;
	// return;
	// }
	// WritableWorkbook wb = null;
	// try
	// {
	// fileName = ResourceCenter.getInstance().getSysPath()+ filename;
	// wb = Workbook.createWorkbook(new File(fileName));
	//			
	// String starttime = (String)reportHash.get("starttime");
	// String totime = (String)reportHash.get("totime");
	// WritableSheet sheet = wb.createSheet("数据库连通率使用统计报表",0);
	// List memlist = (List)reportHash.get("pinglist");
	//			
	// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//						
	// WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"),
	// 12, WritableFont.BOLD, false);
	// WritableCellFormat labelFormat = new WritableCellFormat (labelFont);
	//			
	// WritableCellFormat _labelFormat = new WritableCellFormat();
	// _labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	//			
	// WritableCellFormat p_labelFormat = new WritableCellFormat ();
	// p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	//			
	// WritableCellFormat b_labelFormat = new WritableCellFormat ();
	// b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	//			
	// Label tmpLabel = null;
	// tmpLabel = new Label(1, 0, "数据库连通率性能统计报表",labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime+" 至 "+totime);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 4, "序号",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 4, "IP地址",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 4, "数据库类型",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 4, "数据库名称",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 4, "应用",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 4, "平均连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 4, "不可达次数",_labelFormat);
	// sheet.addCell(tmpLabel);
	// //I_MonitorIpList monitorManager=new MonitoriplistManager();
	// int row = 5;
	// if(memlist != null && memlist.size()>0){
	// for(int i=0;i<memlist.size();i++){
	// List mlist = (List)memlist.get(i);
	// row = row + (i);
	// tmpLabel = new Label(0, 5+i, i+1+"",p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 5+i, (String)mlist.get(0),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 5+i, (String)mlist.get(1),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 5+i, (String)mlist.get(2),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 5+i, (String)mlist.get(3),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 5+i, (String)mlist.get(4),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 5+i, (String)mlist.get(5),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// }
	// }
	//		    
	// /*
	// if(impReport.getChart()!=null){
	// ByteArrayOutputStream baos = new ByteArrayOutputStream();
	// try
	// {
	// ChartUtilities.writeChartAsPNG(baos,
	// impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight());
	// }
	// catch (IOException ioe){}
	// WritableImage wi = new WritableImage(2,10000 + 5, 8, 12,
	// baos.toByteArray());
	// sheet.addImage(wi);
	// }
	// */
	// wb.write();
	// }
	// catch(Exception e)
	// {
	// //SysLogger.error("Error in ExcelReport.createReport()",e);
	// e.printStackTrace();
	// }
	// finally
	// {
	// try
	// {
	// if(wb!= null) wb.close();
	// }
	// catch(Exception e){}
	// }
	// }
	// public void createReport_dbevent(String filename)
	// {
	// if(impReport.getTable()==null)
	// {
	// fileName = null;
	// return;
	// }
	// WritableWorkbook wb = null;
	// try
	// {
	// fileName = ResourceCenter.getInstance().getSysPath() + filename;
	// wb = Workbook.createWorkbook(new File(fileName));
	//			
	// String starttime = (String)reportHash.get("starttime");
	// String totime = (String)reportHash.get("totime");
	// WritableSheet sheet = wb.createSheet("数据库事件统计报表",0);
	// List memlist = (List)reportHash.get("eventlist");
	//			
	// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//						
	// WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"),
	// 12, WritableFont.BOLD, false);
	// WritableCellFormat labelFormat = new WritableCellFormat (labelFont);
	//			
	// WritableCellFormat _labelFormat = new WritableCellFormat();
	// _labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	//			
	// WritableCellFormat p_labelFormat = new WritableCellFormat ();
	// p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	//			
	// WritableCellFormat b_labelFormat = new WritableCellFormat ();
	// b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	//			
	// Label tmpLabel = null;
	// tmpLabel = new Label(1, 0, "数据库事件统计报表",labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime+" 至 "+totime);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 4, "序号",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 4, "IP地址",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 4, "数据库类型",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 4, "数据库名称",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 4, "应用",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 4, "服务不可用事件",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 4, "超越阀值事件",_labelFormat);
	// sheet.addCell(tmpLabel);
	// //I_MonitorIpList monitorManager=new MonitoriplistManager();
	// int row = 5;
	// if(memlist != null && memlist.size()>0){
	// for(int i=0;i<memlist.size();i++){
	// List mlist = (List)memlist.get(i);
	// row = row + (i);
	// tmpLabel = new Label(0, 5+i, i+1+"",p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 5+i, (String)mlist.get(0),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 5+i, (String)mlist.get(1),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 5+i, (String)mlist.get(2),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 5+i, (String)mlist.get(3),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 5+i, (String)mlist.get(4),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 5+i, (String)mlist.get(5),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// }
	// }
	//		    
	//			
	// if(impReport.getChart()!=null){
	// ByteArrayOutputStream baos = new ByteArrayOutputStream();
	// try
	// {
	// ChartUtilities.writeChartAsPNG(baos,
	// impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight());
	// }
	// catch (IOException ioe){}
	// WritableImage wi = new WritableImage(2,10000 + 5, 8, 12,
	// baos.toByteArray());
	// sheet.addImage(wi);
	// }
	//			
	// wb.write();
	// }
	// catch(Exception e)
	// {
	// //SysLogger.error("Error in ExcelReport.createReport()",e);
	// e.printStackTrace();
	// }
	// finally
	// {
	// try
	// {
	// if(wb!= null) wb.close();
	// }
	// catch(Exception e){}
	// }
	// }
	public void createReport_hostevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "主机服务器事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "事件总数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "普通", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "紧急", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "严重", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 4, "连通率事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 4, "内存事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, 4, "磁盘事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(11, 4, "CPU事件", _labelFormat);

			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 5 + i, (String) mlist.get(7),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, 5 + i, (String) mlist.get(8),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(10, 5 + i, (String) mlist.get(9),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(11, 5 + i, (String) mlist.get(10),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_netlocationevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "业务系统事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "业务系统名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "事件总数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "普通", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "紧急", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "严重", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "未处理", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "正在处理", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 4, "已处理", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 5 + i, (String) mlist.get(7),
							p_labelFormat);
					sheet.addCell(tmpLabel);

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_operatorevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("管理员处理事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "管理员处理事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "管理员名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "事件总数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "普通", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "紧急", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "严重", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(6, 4, "正在处理", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "已处理", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_netevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("事件使用统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "网络设备事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "操作系统", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "事件总数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "普通", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "紧急", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 4, "严重", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 4, "连通率事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 4, "CPU事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, 4, "端口事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(11, 4, "流速事件", _labelFormat);

			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, (String) mlist.get(6),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 5 + i, (String) mlist.get(7),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, 5 + i, (String) mlist.get(8),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(10, 5 + i, (String) mlist.get(9),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(11, 5 + i, (String) mlist.get(10),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_hostall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("equipname");
					WritableSheet sheet = wb.createSheet(hostname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;
					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					Calendar colTime = (Calendar) report_has.get("time");
					Date cc = colTime.getTime();
					Hashtable Memory = (Hashtable) report_has.get("Memory");
					Hashtable Disk = (Hashtable) report_has.get("Disk");

					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable memAvgHash = (Hashtable) report_has
							.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
					String[] memoryItem = { "Capability", "Utilization" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
					String[] diskItemch = { "总容量", "已用容量", "利用率" };

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);
					File file = null;
					try {
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "ConnectUtilization" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						// allRow = allRow+2;
						sheet.addImage(new WritableImage(1, 6, 7, 7, file));
						// allRow = allRow+7;
					} catch (Exception ex) {
						ex.printStackTrace();
					}

					tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					String cpu = "";
					if (CPU.get("cpu") != null)
						cpu = (String) CPU.get("cpu");
					String cpumax = "";
					if (CPU.get("cpumax") != null)
						cpumax = (String) CPU.get("cpumax");
					String avgcpu = "";
					if (CPU.get("avgcpu") != null)
						avgcpu = (String) CPU.get("avgcpu");

					tmpLabel = new Label(1, 15, cpu + "%", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15, cpumax, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 15, avgcpu, p_labelFormat);
					sheet.addCell(tmpLabel);

					int allRow = 15;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "cpu"
							+ ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 6;
					int memoryRow = 0;
					if (Memory != null && Memory.size() > 0) {
						memoryRow = Memory.size();
						allRow = allRow + 2;
						tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 内存的标题
						allRow = allRow;
						Label label = new Label(1, allRow, "内存名", _labelFormat);
						sheet.addCell(label);
						for (int i = 0; i < memoryItemch.length; i++) {
							label = new Label(i + 2, allRow, memoryItemch[i],
									_labelFormat);
							sheet.addCell(label);
						}
						// 写内存
						for (int i = 0; i < Memory.size(); i++) {
							Hashtable mhash = (Hashtable) (Memory
									.get(new Integer(i)));
							String name = (String) mhash.get("name");
							allRow = allRow + 1;
							label = new Label(1, allRow, name);
							sheet.addCell(label);
							for (int j = 0; j < memoryItem.length; j++) {
								String value = "";
								if (mhash != null) {
									if (mhash.get(memoryItem[j]) != null) {
										value = (String) mhash
												.get(memoryItem[j]);
									}
								}
								label = new Label(j + 2, allRow, value,
										p_labelFormat);
								sheet.addCell(label);
							}
							String value = "";
							if (memMaxHash != null) {
								if (memMaxHash.get(name) != null) {
									value = (String) memMaxHash.get(name);
									label = new Label(memoryItem.length + 2,
											allRow, value, p_labelFormat);
									sheet.addCell(label);
								}
							} else {
								label = new Label(memoryItem.length + 2,
										allRow, value, p_labelFormat);
								sheet.addCell(label);
							}
							String avgvalue = "";
							if (memAvgHash != null) {
								if (memAvgHash.get(name) != null) {
									avgvalue = (String) memAvgHash.get(name);
									label = new Label(memoryItem.length + 3,
											allRow, avgvalue, p_labelFormat);
									sheet.addCell(label);
								}
							} else {
								label = new Label(memoryItem.length + 3,
										allRow, avgvalue, p_labelFormat);
								sheet.addCell(label);
							}

						} // end 写内存
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "memory" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						allRow = allRow + 2;
						sheet
								.addImage(new WritableImage(1, allRow, 7, 7,
										file));

					} else {
						allRow = allRow + 2;
						tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 内存的标题
						allRow = allRow;
						Label label = new Label(1, allRow, "内存名", _labelFormat);
						sheet.addCell(label);
						for (int i = 0; i < memoryItemch.length; i++) {
							label = new Label(i + 2, allRow, memoryItemch[i],
									_labelFormat);
							sheet.addCell(label);
						}
						// 写内存
						String[] names = null;
						HostNodeDao dao = new HostNodeDao();
						HostNode node = (HostNode) dao.findByCondition(
								"ip_address", ip).get(0);
						// Monitoriplist monitor =
						// monitorManager.getByIpaddress(ip);
						if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
							names = new String[] { "PhysicalMemory",
									"VirtualMemory" };
						} else {
							names = new String[] { "PhysicalMemory",
									"SwapMemory" };
						}
						dao.close();
						for (int i = 0; i < names.length; i++) {
							// Hashtable mhash = (Hashtable)(Memory.get(new
							// Integer(i)));
							String name = names[i];
							// String[] unixs =
							// {"PhysicalMemory","VirtualMemory"};
							allRow = allRow + 1;
							label = new Label(1, allRow, names[i]);
							sheet.addCell(label);

							for (int j = 0; j < memoryItem.length; j++) {
								// 因为当前没有瞬间值和利用率
								String value = "";
								label = new Label(j + 2, allRow, value,
										p_labelFormat);
								sheet.addCell(label);
							}
							String value = "";
							if (memMaxHash.get(name) != null) {
								value = (String) memMaxHash.get(name);
								label = new Label(memoryItem.length + 2,
										allRow, value, p_labelFormat);
								sheet.addCell(label);
							} else {
								label = new Label(memoryItem.length + 2,
										allRow, value, p_labelFormat);
								sheet.addCell(label);
							}
							String avgvalue = "";
							if (memAvgHash.get(name) != null) {
								avgvalue = (String) memAvgHash.get(name);
								label = new Label(memoryItem.length + 3,
										allRow, avgvalue, p_labelFormat);
								sheet.addCell(label);
							} else {
								label = new Label(memoryItem.length + 3,
										allRow, avgvalue, p_labelFormat);
								sheet.addCell(label);
							}

						} // end 写内存
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "memory" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						allRow = allRow + 2;
						sheet
								.addImage(new WritableImage(1, allRow, 7, 7,
										file));

					}
					if (Disk != null && Disk.size() > 0) {
						// memoryRow = Disk.size();
						allRow = allRow + 1 + 7;
						tmpLabel = new Label(0, allRow, "磁盘使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 磁盘的标题
						allRow = allRow;
						Label label = new Label(1, allRow, "磁盘名", _labelFormat);
						// CellFormat cf = new CellFormat();
						// label.setCellFormat(cf)

						sheet.addCell(label);
						for (int i = 0; i < diskItemch.length; i++) {
							label = new Label(i + 2, allRow, diskItemch[i],
									_labelFormat);
							sheet.addCell(label);
						}
						// 写磁盘

						for (int i = 0; i < Disk.size(); i++) {
							Hashtable diskhash = (Hashtable) (Disk
									.get(new Integer(i)));
							if (diskhash != null && diskhash.size() > 0) {
								String name = (String) diskhash.get("name");
								if (name == null)
									name = "";
								allRow = allRow + 1;
								label = new Label(1, allRow, name);
								sheet.addCell(label);
								for (int j = 0; j < diskItem.length; j++) {
									String value = "";
									if (diskhash.get(diskItem[j]) != null) {
										value = (String) diskhash
												.get(diskItem[j]);
									}
									label = new Label(j + 2, allRow, value,
											p_labelFormat);
									sheet.addCell(label);
								}
							}
						}// end 写内存
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "disk" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						sheet.addImage(new WritableImage(1, allRow + 2, 9, 9,
								file));

						/*
						 * if(impReport.getChart()!=null){ ByteArrayOutputStream
						 * baos = new ByteArrayOutputStream(); try {
						 * ChartUtilities.writeChartAsPNG(baos,
						 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
						 * catch (IOException ioe){} WritableImage wi = new
						 * WritableImage(2,40, 8, 12, baos.toByteArray());
						 * sheet.addImage(wi); }
						 */
					}

				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// public void createReport_oraall(String filename)
	// {
	// if(impReport.getTable()==null)
	// {
	// fileName = null;
	// return;
	// }
	// WritableWorkbook wb = null;
	// try
	// {
	// //fileName = ResourceCenter.getInstance().getSysPath() +
	// "temp\\dhcnms_report.xls";
	// fileName = ResourceCenter.getInstance().getSysPath() + filename;
	// wb = Workbook.createWorkbook(new File(fileName));
	// Hashtable allreporthash = new Hashtable();
	// allreporthash = reportHash;
	// if (allreporthash != null && allreporthash.size()>0){
	// Iterator keys=allreporthash.keySet().iterator();
	// String ip="";
	// int sheetNum = 0;
	// while(keys.hasNext()){
	// ip=keys.next().toString();
	// String newip=doip(ip);
	// Hashtable report_has = (Hashtable)allreporthash.get(ip);
	// String dbname = (String)report_has.get("dbname");
	// WritableSheet sheet = wb.createSheet(dbname+"性能日报表", sheetNum);
	// sheetNum = sheetNum +1;
	// Vector tableinfo_v = new Vector();
	// if(report_has.get("tableinfo_v") != null)
	// tableinfo_v = (Vector)report_has.get("tableinfo_v");
	// //Hashtable CPU = (Hashtable)report_has.get("CPU");
	// String Ping = (String)report_has.get("Ping");
	//							
	//					
	// //Calendar colTime = (Calendar)report_has.get("time");
	// //Date cc = colTime.getTime();
	// //Hashtable Memory = (Hashtable)report_has.get("Memory");
	// //Hashtable Disk = (Hashtable)report_has.get("Disk");
	//					
	// //Hashtable memMaxHash = (Hashtable)report_has.get("memmaxhash");
	// //Hashtable memAvgHash = (Hashtable)report_has.get("memavghash");
	// Hashtable maxping = (Hashtable)report_has.get("ping");
	//					
	// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//					
	//						
	//					
	// WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"),
	// 12, WritableFont.BOLD, false);
	// WritableCellFormat labelFormat = new WritableCellFormat (labelFont);
	// WritableCellFormat _labelFormat = new WritableCellFormat ();
	// _labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	//					
	// WritableCellFormat p_labelFormat = new WritableCellFormat ();
	// p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	//					
	// WritableCellFormat b_labelFormat = new WritableCellFormat ();
	// b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	//					
	// Label tmpLabel = null;
	// tmpLabel = new Label(1, 0, dbname+"性能日报表",labelFormat);
	// sheet.addCell(tmpLabel);
	// String reporttime = (String)report_has.get("reporttime");
	// if (reporttime == null || reporttime.trim().length()==0){
	// tmpLabel = new Label(0, 1, "报表日期:" + impReport.getTimeStamp());
	// }else{
	// tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
	// }
	//				    
	// sheet.addCell(tmpLabel);
	// String starttime = (String)report_has.get("starttime");
	// String totime = (String)report_has.get("totime");
	// tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime+" 至 "+totime);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 4, "连通率",b_labelFormat);
	// sheet.addCell(tmpLabel);
	//				    
	// tmpLabel = new Label(2, 4, "最小连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 4, "平均连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	//				    
	// tmpLabel = new Label(1, 5, (String)maxping.get("pingmax"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 5,
	// (String)maxping.get("avgpingcon"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// File file =null;
	// try{
	// // 设置图片
	// file = new
	// File(ResourceCenter.getInstance().getSysPath()+"/resource/image/jfreechart/"+newip+"ConnectUtilization"+".png");
	// //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
	// //allRow = allRow+2;
	// sheet.addImage(new WritableImage(1,6,7,7,file));
	// //allRow = allRow+7;
	// }catch(Exception ex){
	// ex.printStackTrace();
	// }
	//				    	
	// tmpLabel = new Label(0, 14, "序号",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 14, "文件名",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 14, "表空间",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 14, "空间大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 14, "空闲大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 14, "空闲比例",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 14, "文件状态",_labelFormat);
	// sheet.addCell(tmpLabel);
	// int row = 14;
	// //表空间信息
	// //Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
	// for(int i=0;i<tableinfo_v.size();i++){
	// Hashtable ht = (Hashtable)tableinfo_v.get(i);
	// String _filename = ht.get("file_name").toString();
	// String tablespace = ht.get("tablespace").toString();
	// String size = ht.get("size mb").toString();
	// String free = ht.get("free mb").toString();
	// String percent = ht.get("percent free").toString();
	// String status = ht.get("status").toString();
	//						
	// row = row + (i);
	// tmpLabel = new Label(0, 15+i, i+1+"",p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 15+i, _filename,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 15+i, tablespace,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 15+i, size,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 15+i, free,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(5, 15+i, percent,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(6, 15+i, status,p_labelFormat);
	// sheet.addCell(tmpLabel);
	//						
	// }
	// }
	// wb.write();
	// }
	//		    
	// }
	// catch(Exception e)
	// {
	// //SysLogger.error("Error in ExcelReport.createReport()",e);
	// e.printStackTrace();
	// }
	// finally
	// {
	// try
	// {
	// if(wb!= null) wb.close();
	// }
	// catch(Exception e){}
	// }
	// }

	public void createReport_monthhostall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("equipname");
					WritableSheet sheet = wb.createSheet(hostname + "性能月报表",
							sheetNum);
					sheetNum = sheetNum + 1;
					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();
					Hashtable Memory = (Hashtable) report_has.get("Memory");
					Hashtable Disk = (Hashtable) report_has.get("Disk");

					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable memAvgHash = (Hashtable) report_has
							.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] memoryItemch = { "内存容量", "最大利用率", "平均利用率" };
					String[] memoryItem = { "Capability" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
					String[] diskItemch = { "总容量", "已用容量", "利用率" };

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能月报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ newip
							+ "ping_month" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 6, 7, 7, file));
					// allRow = allRow+7;

					tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "最大利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "平均利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					if (CPU == null) {
						tmpLabel = new Label(1, 15, "", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, 15, "", p_labelFormat);
						sheet.addCell(tmpLabel);
					} else {
						tmpLabel = new Label(1, 15, (String) CPU.get("cpumax"),
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, 15, (String) CPU.get("avgcpu"),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					}

					int allRow = 15;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "cpu_month" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 6;
					int memoryRow = 0;
					if (Memory != null && Memory.size() > 0) {
						memoryRow = Memory.size();
						allRow = allRow + 2;
						tmpLabel = new Label(0, allRow, "内存使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 内存的标题
						allRow = allRow;
						Label label = new Label(1, allRow, "内存名", _labelFormat);
						sheet.addCell(label);
						for (int i = 0; i < memoryItemch.length; i++) {
							label = new Label(i + 2, allRow, memoryItemch[i],
									_labelFormat);
							sheet.addCell(label);
						}
						// 写内存
						for (int i = 0; i < Memory.size(); i++) {
							Hashtable mhash = (Hashtable) (Memory
									.get(new Integer(i)));
							String name = (String) mhash.get("name");
							allRow = allRow + 1;
							label = new Label(1, allRow, name);
							sheet.addCell(label);

							for (int j = 0; j < memoryItem.length; j++) {
								String value = "";
								if (mhash != null) {
									if (mhash.get(memoryItem[j]) != null) {
										value = (String) mhash
												.get(memoryItem[j]);
									}
								}
								label = new Label(j + 2, allRow, value,
										p_labelFormat);
								sheet.addCell(label);
							}

							String value = "";
							if (memMaxHash != null) {
								if (memMaxHash.get(name) != null) {
									value = (String) memMaxHash.get(name);
									label = new Label(memoryItem.length + 2,
											allRow, value, p_labelFormat);
									sheet.addCell(label);
								}
							} else {
								label = new Label(memoryItem.length + 2,
										allRow, value, p_labelFormat);
								sheet.addCell(label);
							}
							String avgvalue = "";
							if (memAvgHash != null) {
								if (memAvgHash.get(name) != null) {
									avgvalue = (String) memAvgHash.get(name);
									label = new Label(memoryItem.length + 3,
											allRow, avgvalue, p_labelFormat);
									sheet.addCell(label);
								}
							} else {
								label = new Label(memoryItem.length + 3,
										allRow, avgvalue, p_labelFormat);
								sheet.addCell(label);
							}

						}// end 写内存
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "memory_month" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						allRow = allRow + 2;
						sheet
								.addImage(new WritableImage(1, allRow, 7, 7,
										file));

					}
					if (Disk != null && Disk.size() > 0) {
						// memoryRow = Disk.size();
						allRow = allRow + 1 + 7;
						tmpLabel = new Label(0, allRow, "磁盘使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 磁盘的标题
						allRow = allRow;
						Label label = new Label(1, allRow, "磁盘名", _labelFormat);
						// CellFormat cf = new CellFormat();
						// label.setCellFormat(cf)

						sheet.addCell(label);
						for (int i = 0; i < diskItemch.length; i++) {
							label = new Label(i + 2, allRow, diskItemch[i],
									_labelFormat);
							sheet.addCell(label);
						}
						// 写磁盘

						for (int i = 0; i < Disk.size(); i++) {
							Hashtable diskhash = (Hashtable) (Disk
									.get(new Integer(i)));
							if (diskhash != null && diskhash.size() > 0) {
								String name = (String) diskhash.get("name");
								if (name == null)
									name = "";
								allRow = allRow + 1;
								label = new Label(1, allRow, name);
								sheet.addCell(label);
								for (int j = 0; j < diskItem.length; j++) {
									String value = "";
									if (diskhash.get(diskItem[j]) != null) {
										value = (String) diskhash
												.get(diskItem[j]);
									}
									label = new Label(j + 2, allRow, value,
											p_labelFormat);
									sheet.addCell(label);
								}
							}
						}// end 写内存
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "disk" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						sheet.addImage(new WritableImage(1, allRow + 2, 9, 9,
								file));

						/*
						 * if(impReport.getChart()!=null){ ByteArrayOutputStream
						 * baos = new ByteArrayOutputStream(); try {
						 * ChartUtilities.writeChartAsPNG(baos,
						 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
						 * catch (IOException ioe){} WritableImage wi = new
						 * WritableImage(2,40, 8, 12, baos.toByteArray());
						 * sheet.addImage(wi); }
						 */
					}

				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_weball(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String urlid = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					urlid = keys.next().toString();
					Hashtable report_has = (Hashtable) allreporthash.get(urlid);
					WritableSheet sheet = wb.createSheet((String) report_has
							.get("urlname")
							+ "性能日报表", sheetNum);
					sheetNum = sheetNum + 1;
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, (String) report_has
							.get("urlname")
							+ "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 3, "访问路径:"
							+ (String) report_has.get("urlstr"));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 5, "当前连通率",_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 5, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 5, Ping+"%",p_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 6, (String) report_has
							.get("minconn"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 6, (String) report_has
							.get("avgconn"), p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片"../images/jfreechart/"+conn_name+".png"
					File file = new File(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ (String) report_has.get("wave_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 7, 7, 7, file));
					// allRow = allRow+7;

					tmpLabel = new Label(0, 15, "访问时延(毫秒)", b_labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 14, "当前利用率",_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 15, "最大时延", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15, "平均时延", _labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * if((String)report_has.get("condelay") == null){ tmpLabel =
					 * new Label(1, 15, "%",p_labelFormat);
					 * sheet.addCell(tmpLabel); }else{ tmpLabel = new Label(1,
					 * 15, (String)CPU.get("condelay")+"%",p_labelFormat);
					 * sheet.addCell(tmpLabel); }
					 */
					if ((String) report_has.get("maxcondelay") == null) {
						tmpLabel = new Label(1, 16, "", p_labelFormat);
						sheet.addCell(tmpLabel);
					} else {
						tmpLabel = new Label(1, 16, (String) report_has
								.get("maxcondelay"), p_labelFormat);
						sheet.addCell(tmpLabel);
					}
					if ((String) report_has.get("avgcondelay") == null) {
						tmpLabel = new Label(2, 16, "", p_labelFormat);
						sheet.addCell(tmpLabel);
					} else {
						tmpLabel = new Label(2, 16, (String) report_has
								.get("avgcondelay"), p_labelFormat);
						sheet.addCell(tmpLabel);
					}

					int allRow = 16;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/"
							+ report_has.get("delay_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 8;

					tmpLabel = new Label(0, allRow, "服务有效图", b_labelFormat);
					sheet.addCell(tmpLabel);
					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/"
							+ report_has.get("conn_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 4, 5, file));
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_monthweball(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String urlid = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					urlid = keys.next().toString();
					Hashtable report_has = (Hashtable) allreporthash.get(urlid);
					WritableSheet sheet = wb.createSheet((String) report_has
							.get("urlname")
							+ "性能月报表", sheetNum);
					sheetNum = sheetNum + 1;
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, (String) report_has
							.get("urlname")
							+ "性能月报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 3, "访问路径:"
							+ (String) report_has.get("urlstr"));
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 5, "当前连通率",_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 5, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 5, Ping+"%",p_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 6, (String) report_has
							.get("minconn"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 6, (String) report_has
							.get("avgconn"), p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片"../images/jfreechart/"+conn_name+".png"
					File file = new File(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ (String) report_has.get("wave_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 7, 7, 7, file));
					// allRow = allRow+7;

					tmpLabel = new Label(0, 15, "访问时延(毫秒)", b_labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * tmpLabel = new Label(1, 14, "当前利用率",_labelFormat);
					 * sheet.addCell(tmpLabel);
					 */
					tmpLabel = new Label(1, 15, "最大时延", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15, "平均时延", _labelFormat);
					sheet.addCell(tmpLabel);
					/*
					 * if((String)report_has.get("condelay") == null){ tmpLabel =
					 * new Label(1, 15, "%",p_labelFormat);
					 * sheet.addCell(tmpLabel); }else{ tmpLabel = new Label(1,
					 * 15, (String)CPU.get("condelay")+"%",p_labelFormat);
					 * sheet.addCell(tmpLabel); }
					 */
					if ((String) report_has.get("maxcondelay") == null) {
						tmpLabel = new Label(1, 16, "", p_labelFormat);
						sheet.addCell(tmpLabel);
					} else {
						tmpLabel = new Label(1, 16, (String) report_has
								.get("maxcondelay"), p_labelFormat);
						sheet.addCell(tmpLabel);
					}
					if ((String) report_has.get("avgcondelay") == null) {
						tmpLabel = new Label(2, 16, "", p_labelFormat);
						sheet.addCell(tmpLabel);
					} else {
						tmpLabel = new Label(2, 16, (String) report_has
								.get("avgcondelay"), p_labelFormat);
						sheet.addCell(tmpLabel);
					}

					int allRow = 16;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/"
							+ report_has.get("delay_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 8;

					tmpLabel = new Label(0, allRow, "服务有效图", b_labelFormat);
					sheet.addCell(tmpLabel);
					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/"
							+ report_has.get("conn_name") + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 4, 5, file));
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_networkWithoutClose(String filename,WritableWorkbook wb)
	{

		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		String hostname = (String) reportHash.get("equipname");
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			//wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			String Ping = (String) reportHash.get("Ping");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Vector netifVector = (Vector) reportHash.get("netifVector");
			Hashtable portconfigHash = (Hashtable) reportHash
					.get("portconfigHash");
			List reportports = (List) reportHash.get("reportports");
			Vector iprouterVector = (Vector) reportHash.get("iprouterVector");

			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");
			
			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)", "当前状态",
					"出口流速", "入口流速" };
			String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型", "路由协议",
					"子网掩码" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization",
					"INodeUsedSize", "INodeUtilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用",
					"i-node利用率" };
			String[] iproutertype = { "", "", "", "direct(3)", "indirect(4)" };
			String[] iprouterproto = { "", "other(1)", "local(2)",
					"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)", "hello(7)",
					"rip(8)", "is-is(9)", "es-is(10)", "ciscoIgrp(11)",
					"bbnSpfIgp(12)", "ospf(13)", "bgp(14)" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据采集时间:" + sdf.format(cc));
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 15, (String) CPU.get("cpu") + "%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 15, (String) CPU.get("cpumax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 15, (String) CPU.get("avgcpu"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			int allRow = 15;

			// 设置图片
			file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			allRow = allRow + 2;
			sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			allRow = allRow + 7;

			if (netifVector != null && netifVector.size() > 0) {
				allRow = allRow + 1;
				tmpLabel = new Label(0, allRow, "端口使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 端口的标题
				// allRow = allRow;
				for (int i = 0; i < netIfItemch.length; i++) {
					Label label = new Label(i + 1, allRow, netIfItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写端口
				for (int i = 0; i < netifVector.size(); i++) {
					allRow = allRow + 1;

					String[] strs = (String[]) netifVector.get(i);
					String ifname = strs[1];
					String index = strs[0];
					for (int j = 0; j < strs.length; j++) {

						if (j == 1) {
							String linkuse = "";
							if (portconfigHash != null
									&& portconfigHash.size() > 0) {
								if (portconfigHash.get(ip + ":" + index) != null)
									linkuse = (String) portconfigHash.get(ip
											+ ":" + index);
							}
							Label label = new Label(j + 1, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(j + 2, allRow, linkuse,
									p_labelFormat);
							sheet.addCell(label);

						} else if (j > 1) {
							Label label = new Label(j + 2, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
						} else {
							Label label = new Label(j + 1, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
						}
					}// end 写端口

				}
			}

			if (iprouterVector != null && iprouterVector.size() > 0) {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "路由表信息", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 标题
				// allRow = allRow+1;
				for (int i = 0; i < ipRouterItemch.length; i++) {
					Label label = new Label(i + 1, allRow, ipRouterItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}

				// 写路由表信息

				for (int i = 0; i < iprouterVector.size(); i++) {
					allRow = allRow + 1;
					IpRouter iprouter = (IpRouter) iprouterVector.get(i);
					Label label = new Label(1, allRow, iprouter.getIfindex(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(2, allRow, iprouter.getDest(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(3, allRow, iprouter.getNexthop(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(4, allRow, iproutertype[Integer
							.parseInt(iprouter.getType().longValue() + "")],
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(5, allRow, iprouterproto[Integer
							.parseInt(iprouter.getProto().longValue() + "")],
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(6, allRow, iprouter.getMask(),
							p_labelFormat);
					sheet.addCell(label);
				}
			}

			allRow = allRow + 2;
			if (reportports != null && reportports.size() > 0) {
				// 显示该端口的流速图形
				for (int i = 0; i < reportports.size(); i++) {
					// SysLogger.info(reportports.get(i).getClass()+"=============================================");
					com.afunms.config.model.Portconfig portconfig = (com.afunms.config.model.Portconfig) reportports
							.get(i);
					tmpLabel = new Label(0, allRow, "第"
							+ portconfig.getPortindex() + "("
							+ portconfig.getName() + ")端口", b_labelFormat);
					sheet.addCell(tmpLabel);
					if (portconfig.getLinkuse() == null)
						portconfig.setLinkuse("");
					tmpLabel = new Label(1, allRow, "应用:"
							+ portconfig.getLinkuse());
					sheet.addCell(tmpLabel);
					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ portconfig.getPortindex() + "ifspeed_day.png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 1;
					sheet.addImage(new WritableImage(1, allRow, 8, 7, file));
					allRow = allRow + 8;
				}
			}

			/*
			 * if ( reportports != null && reportports.size()>0){ //显示该端口的流速图形
			 * for(int i =0;i<reportports.size();i++){ Portconfig portconfig =
			 * (Portconfig)reportports.get(i); // 设置图片 file = new
			 * File(CommonAppUtil.getAppName()+"/images/jfreechart/"+newip+portconfig.getPortindex()+"ifspeed_day.png");
			 * //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行 allRow =
			 * allRow+2; sheet.addImage(new WritableImage(1,allRow,8,7,file));
			 * allRow = allRow+7; } }
			 */
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			//wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} /*finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}*/
	}

	public void createReport_network(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("性能报表", 0);
			Hashtable CPU = (Hashtable) reportHash.get("CPU");
			String Ping = (String) reportHash.get("Ping");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Calendar colTime = (Calendar) reportHash.get("time");
			Date cc = colTime.getTime();
			Vector netifVector = (Vector) reportHash.get("netifVector");
			Hashtable portconfigHash = (Hashtable) reportHash
					.get("portconfigHash");
			List reportports = (List) reportHash.get("reportports");
			Vector iprouterVector = (Vector) reportHash.get("iprouterVector");

			Hashtable Memory = (Hashtable) reportHash.get("Memory");
			Hashtable Disk = (Hashtable) reportHash.get("Disk");
			String hostname = (String) reportHash.get("equipname");
			Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)", "当前状态",
					"出口流速", "入口流速" };
			String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型", "路由协议",
					"子网掩码" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization",
					"INodeUsedSize", "INodeUtilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用",
					"i-node利用率" };
			String[] iproutertype = { "", "", "", "direct(3)", "indirect(4)" };
			String[] iprouterproto = { "", "other(1)", "local(2)",
					"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)", "hello(7)",
					"rip(8)", "is-is(9)", "es-is(10)", "ciscoIgrp(11)",
					"bbnSpfIgp(12)", "ospf(13)", "bgp(14)" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据采集时间:" + sdf.format(cc));
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 15, (String) CPU.get("cpu") + "%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 15, (String) CPU.get("cpumax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 15, (String) CPU.get("avgcpu"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			int allRow = 15;

			// 设置图片
			file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			allRow = allRow + 2;
			sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
			allRow = allRow + 7;

			if (netifVector != null && netifVector.size() > 0) {
				allRow = allRow + 1;
				tmpLabel = new Label(0, allRow, "端口使用情况", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 端口的标题
				// allRow = allRow;
				for (int i = 0; i < netIfItemch.length; i++) {
					Label label = new Label(i + 1, allRow, netIfItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}
				// 写端口
				for (int i = 0; i < netifVector.size(); i++) {
					allRow = allRow + 1;

					String[] strs = (String[]) netifVector.get(i);
					String ifname = strs[1];
					String index = strs[0];
					for (int j = 0; j < strs.length; j++) {

						if (j == 1) {
							String linkuse = "";
							if (portconfigHash != null
									&& portconfigHash.size() > 0) {
								if (portconfigHash.get(ip + ":" + index) != null)
									linkuse = (String) portconfigHash.get(ip
											+ ":" + index);
							}
							Label label = new Label(j + 1, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(j + 2, allRow, linkuse,
									p_labelFormat);
							sheet.addCell(label);

						} else if (j > 1) {
							Label label = new Label(j + 2, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
						} else {
							Label label = new Label(j + 1, allRow, strs[j],
									p_labelFormat);
							sheet.addCell(label);
						}
					}// end 写端口

				}
			}

			if (iprouterVector != null && iprouterVector.size() > 0) {
				allRow = allRow + 2;
				tmpLabel = new Label(0, allRow, "路由表信息", b_labelFormat);
				sheet.addCell(tmpLabel);
				// 标题
				// allRow = allRow+1;
				for (int i = 0; i < ipRouterItemch.length; i++) {
					Label label = new Label(i + 1, allRow, ipRouterItemch[i],
							_labelFormat);
					sheet.addCell(label);
				}

				// 写路由表信息

				for (int i = 0; i < iprouterVector.size(); i++) {
					allRow = allRow + 1;
					IpRouter iprouter = (IpRouter) iprouterVector.get(i);
					Label label = new Label(1, allRow, iprouter.getIfindex(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(2, allRow, iprouter.getDest(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(3, allRow, iprouter.getNexthop(),
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(4, allRow, iproutertype[Integer
							.parseInt(iprouter.getType().longValue() + "")],
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(5, allRow, iprouterproto[Integer
							.parseInt(iprouter.getProto().longValue() + "")],
							p_labelFormat);
					sheet.addCell(label);
					label = new Label(6, allRow, iprouter.getMask(),
							p_labelFormat);
					sheet.addCell(label);
				}
			}

			allRow = allRow + 2;
			if (reportports != null && reportports.size() > 0) {
				// 显示该端口的流速图形
				for (int i = 0; i < reportports.size(); i++) {
					// SysLogger.info(reportports.get(i).getClass()+"=============================================");
					com.afunms.config.model.Portconfig portconfig = (com.afunms.config.model.Portconfig) reportports
							.get(i);
					tmpLabel = new Label(0, allRow, "第"
							+ portconfig.getPortindex() + "("
							+ portconfig.getName() + ")端口", b_labelFormat);
					sheet.addCell(tmpLabel);
					if (portconfig.getLinkuse() == null)
						portconfig.setLinkuse("");
					tmpLabel = new Label(1, allRow, "应用:"
							+ portconfig.getLinkuse());
					sheet.addCell(tmpLabel);
					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ portconfig.getPortindex() + "ifspeed_day.png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 1;
					sheet.addImage(new WritableImage(1, allRow, 8, 7, file));
					allRow = allRow + 8;
				}
			}

			/*
			 * if ( reportports != null && reportports.size()>0){ //显示该端口的流速图形
			 * for(int i =0;i<reportports.size();i++){ Portconfig portconfig =
			 * (Portconfig)reportports.get(i); // 设置图片 file = new
			 * File(CommonAppUtil.getAppName()+"/images/jfreechart/"+newip+portconfig.getPortindex()+"ifspeed_day.png");
			 * //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行 allRow =
			 * allRow+2; sheet.addImage(new WritableImage(1,allRow,8,7,file));
			 * allRow = allRow+7; } }
			 */
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_networkall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("equipname");
					WritableSheet sheet = wb.createSheet(hostname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;

					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					String newip = doip(ip);
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();
					Vector netifVector = (Vector) report_has.get("netifVector");
					Hashtable portconfigHash = (Hashtable) report_has
							.get("portconfigHash");
					List reportports = (List) report_has.get("reportports");
					Vector iprouterVector = (Vector) report_has
							.get("iprouterVector");

					// Hashtable Memory = (Hashtable)report_has.get("Memory");
					// Hashtable Disk = (Hashtable)report_has.get("Disk");
					// String hostname = (String)report_has.get("equipname");
					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)",
							"当前状态", "出口流速", "入口流速" };
					String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型",
							"路由协议", "子网掩码" };
					String[] memoryItem = { "Capability", "Utilization" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization",
							"INodeUsedSize", "INodeUtilization" };
					String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用",
							"i-node利用率" };
					String[] iproutertype = { "", "", "", "direct(3)",
							"indirect(4)" };
					String[] iprouterproto = { "", "other(1)", "local(2)",
							"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)",
							"hello(7)", "rip(8)", "is-is(9)", "es-is(10)",
							"ciscoIgrp(11)", "bbnSpfIgp(12)", "ospf(13)",
							"bgp(14)" };

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, Ping + "%", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 6, 7, 7, file));
					// allRow = allRow+7;

					tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "当前利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "最大利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 14, "平均利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 15, (String) CPU.get("cpu") + "%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15, (String) CPU.get("cpumax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 15, (String) CPU.get("avgcpu"),
							p_labelFormat);
					sheet.addCell(tmpLabel);

					int allRow = 15;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "cpu"
							+ ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 7;

					if (netifVector != null && netifVector.size() > 0) {
						allRow = allRow + 1;
						tmpLabel = new Label(0, allRow, "端口使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 端口的标题
						// allRow = allRow;
						for (int i = 0; i < netIfItemch.length; i++) {
							Label label = new Label(i + 1, allRow,
									netIfItemch[i], _labelFormat);
							sheet.addCell(label);
						}
						// 写端口
						for (int i = 0; i < netifVector.size(); i++) {
							allRow = allRow + 1;

							String[] strs = (String[]) netifVector.get(i);
							String ifname = strs[1];
							String index = strs[0];
							for (int j = 0; j < strs.length; j++) {

								if (j == 1) {
									String linkuse = "";
									if (portconfigHash != null
											&& portconfigHash.size() > 0) {
										if (portconfigHash
												.get(ip + ":" + index) != null)
											linkuse = (String) portconfigHash
													.get(ip + ":" + index);
									}
									Label label = new Label(j + 1, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
									label = new Label(j + 2, allRow, linkuse,
											p_labelFormat);
									sheet.addCell(label);

								} else if (j > 1) {
									Label label = new Label(j + 2, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
								} else {
									Label label = new Label(j + 1, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
								}
							}// end 写端口

						}
					}

					if (iprouterVector != null && iprouterVector.size() > 0) {

						allRow = allRow + 2;
						tmpLabel = new Label(0, allRow, "路由表信息", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 标题
						// allRow = allRow+1;
						for (int i = 0; i < ipRouterItemch.length; i++) {
							Label label = new Label(i + 1, allRow,
									ipRouterItemch[i], _labelFormat);
							sheet.addCell(label);
						}

						// 写路由表信息

						for (int i = 0; i < iprouterVector.size(); i++) {
							allRow = allRow + 1;
							IpRouter iprouter = (IpRouter) iprouterVector
									.get(i);
							Label label = new Label(1, allRow, iprouter
									.getIfindex(), p_labelFormat);
							sheet.addCell(label);
							label = new Label(2, allRow, iprouter.getDest(),
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(3, allRow, iprouter.getNexthop(),
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(4, allRow, iproutertype[Integer
									.parseInt(iprouter.getType().longValue()
											+ "")], p_labelFormat);
							sheet.addCell(label);
							label = new Label(5, allRow, iprouterproto[Integer
									.parseInt(iprouter.getProto().longValue()
											+ "")], p_labelFormat);
							sheet.addCell(label);
							label = new Label(6, allRow, iprouter.getMask(),
									p_labelFormat);
							sheet.addCell(label);
						}
					}
					allRow = allRow + 2;
					if (reportports != null && reportports.size() > 0) {
						// 显示该端口的流速图形
						for (int i = 0; i < reportports.size(); i++) {
							com.afunms.config.model.Portconfig portconfig = (com.afunms.config.model.Portconfig) reportports
									.get(i);
							tmpLabel = new Label(0, allRow, "第"
									+ portconfig.getPortindex() + "("
									+ portconfig.getName() + ")端口",
									b_labelFormat);
							sheet.addCell(tmpLabel);
							if (portconfig.getLinkuse() == null)
								portconfig.setLinkuse("");
							tmpLabel = new Label(1, allRow, "应用:"
									+ portconfig.getLinkuse());
							sheet.addCell(tmpLabel);
							// 设置图片
							file = new File(ResourceCenter.getInstance()
									.getSysPath()
									+ "/resource/image/jfreechart/"
									+ newip
									+ portconfig.getPortindex()
									+ "ifspeed_day.png");
							// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
							allRow = allRow + 1;
							sheet.addImage(new WritableImage(1, allRow, 8, 7,
									file));
							allRow = allRow + 8;
						}
					}
					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport
									.getChart().getChart(), impReport
									.getChart().getWidth(), impReport
									.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8,
								12, baos.toByteArray());
						sheet.addImage(wi);
					}
					// wb.write();
				}
				wb.write();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_monthnetworkall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("equipname");
					WritableSheet sheet = wb.createSheet(hostname + "性能月报表",
							sheetNum);
					sheetNum = sheetNum + 1;

					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					String newip = doip(ip);
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();
					Vector netifVector = (Vector) report_has.get("netifVector");
					Hashtable portconfigHash = (Hashtable) report_has
							.get("portconfigHash");
					List reportports = (List) report_has.get("reportports");
					Vector iprouterVector = (Vector) report_has
							.get("iprouterVector");

					// Hashtable Memory = (Hashtable)report_has.get("Memory");
					// Hashtable Disk = (Hashtable)report_has.get("Disk");
					// String hostname = (String)report_has.get("equipname");
					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)",
							"当前状态", "出口流速", "入口流速" };
					String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型",
							"路由协议", "子网掩码" };
					String[] memoryItem = { "Capability", "Utilization" };
					String[] iproutertype = { "", "", "", "direct(3)",
							"indirect(4)" };
					String[] iprouterproto = { "", "other(1)", "local(2)",
							"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)",
							"hello(7)", "rip(8)", "is-is(9)", "es-is(10)",
							"ciscoIgrp(11)", "bbnSpfIgp(12)", "ospf(13)",
							"bgp(14)" };

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能月报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "报表生成时间:" + sdf.format(cc));
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 6, 7, 7, file));
					// allRow = allRow+7;

					tmpLabel = new Label(0, 14, "CPU利用率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "最大利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "平均利用率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 15, (String) CPU.get("cpumax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15, (String) CPU.get("avgcpu"),
							p_labelFormat);
					sheet.addCell(tmpLabel);

					int allRow = 15;

					// 设置图片
					file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "cpu"
							+ ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					allRow = allRow + 2;
					sheet.addImage(new WritableImage(1, allRow, 7, 7, file));
					allRow = allRow + 7;

					if (netifVector != null && netifVector.size() > 0) {
						allRow = allRow + 1;
						tmpLabel = new Label(0, allRow, "端口使用情况", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 端口的标题
						// allRow = allRow;
						for (int i = 0; i < netIfItemch.length; i++) {
							Label label = new Label(i + 1, allRow,
									netIfItemch[i], _labelFormat);
							sheet.addCell(label);
						}
						// 写端口
						for (int i = 0; i < netifVector.size(); i++) {
							allRow = allRow + 1;

							String[] strs = (String[]) netifVector.get(i);
							String ifname = strs[1];
							String index = strs[0];
							for (int j = 0; j < strs.length; j++) {

								if (j == 1) {
									String linkuse = "";
									if (portconfigHash != null
											&& portconfigHash.size() > 0) {
										if (portconfigHash
												.get(ip + ":" + index) != null)
											linkuse = (String) portconfigHash
													.get(ip + ":" + index);
									}
									Label label = new Label(j + 1, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
									label = new Label(j + 2, allRow, linkuse,
											p_labelFormat);
									sheet.addCell(label);

								} else if (j > 1) {
									Label label = new Label(j + 2, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
								} else {
									Label label = new Label(j + 1, allRow,
											strs[j], p_labelFormat);
									sheet.addCell(label);
								}
							}// end 写端口

						}
					}

					if (iprouterVector != null && iprouterVector.size() > 0) {

						allRow = allRow + 2;
						tmpLabel = new Label(0, allRow, "路由表信息", b_labelFormat);
						sheet.addCell(tmpLabel);
						// 标题
						// allRow = allRow+1;
						for (int i = 0; i < ipRouterItemch.length; i++) {
							Label label = new Label(i + 1, allRow,
									ipRouterItemch[i], _labelFormat);
							sheet.addCell(label);
						}

						// 写路由表信息

						for (int i = 0; i < iprouterVector.size(); i++) {
							allRow = allRow + 1;
							IpRouter iprouter = (IpRouter) iprouterVector
									.get(i);
							Label label = new Label(1, allRow, iprouter
									.getIfindex(), p_labelFormat);
							sheet.addCell(label);
							label = new Label(2, allRow, iprouter.getDest(),
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(3, allRow, iprouter.getNexthop(),
									p_labelFormat);
							sheet.addCell(label);
							label = new Label(4, allRow, iproutertype[Integer
									.parseInt(iprouter.getType().longValue()
											+ "")], p_labelFormat);
							sheet.addCell(label);
							label = new Label(5, allRow, iprouterproto[Integer
									.parseInt(iprouter.getProto().longValue()
											+ "")], p_labelFormat);
							sheet.addCell(label);
							label = new Label(6, allRow, iprouter.getMask(),
									p_labelFormat);
							sheet.addCell(label);
						}
					}
					allRow = allRow + 2;
					if (reportports != null && reportports.size() > 0) {
						// 显示该端口的流速图形
						for (int i = 0; i < reportports.size(); i++) {
							Portconfig portconfig = (Portconfig) reportports
									.get(i);
							tmpLabel = new Label(0, allRow, "第"
									+ portconfig.getPortindex() + "("
									+ portconfig.getName() + ")端口",
									b_labelFormat);
							sheet.addCell(tmpLabel);
							if (portconfig.getLinkuse() == null)
								portconfig.setLinkuse("");
							tmpLabel = new Label(1, allRow, "应用:"
									+ portconfig.getLinkuse());
							sheet.addCell(tmpLabel);
							// 设置图片
							file = new File(ResourceCenter.getInstance()
									.getSysPath()
									+ "/resource/image/jfreechart/"
									+ newip
									+ portconfig.getPortindex()
									+ "ifspeed_day.png");
							// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
							allRow = allRow + 1;
							sheet.addImage(new WritableImage(1, allRow, 8, 7,
									file));
							allRow = allRow + 8;
						}
					}
					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport
									.getChart().getChart(), impReport
									.getChart().getWidth(), impReport
									.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8,
								12, baos.toByteArray());
						sheet.addImage(wi);
					}
					wb.write();
				}
			}
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	private String doip(String ip) {
		String newip = "";
		for (int i = 0; i < 3; i++) {
			int p = ip.indexOf(".");
			newip += ip.substring(0, p);
			ip = ip.substring(p + 1);
		}
		newip += ip;
		// System.out.println("newip="+newip);
		return newip;
	}

	// quzhi

	public void createReport_syball(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String dbname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(dbname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;

					String Ping = (String) report_has.get("Ping");

					// Calendar colTime = (Calendar)report_has.get("time");
					// Date cc = colTime.getTime();
					// Hashtable Memory = (Hashtable)report_has.get("Memory");
					// Hashtable Disk = (Hashtable)report_has.get("Disk");

					// Hashtable memMaxHash =
					// (Hashtable)report_has.get("memmaxhash");
					// Hashtable memAvgHash =
					// (Hashtable)report_has.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, dbname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 "
							+ totime);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);
					File file = null;
					try {
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/images/jfreechart/"
								+ newip
								+ "ConnectUtilization" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						// allRow = allRow+2;
						sheet.addImage(new WritableImage(1, 6, 7, 7, file));
						// allRow = allRow+7;
					} catch (Exception ex) {
						ex.printStackTrace();
					}

					tmpLabel = new Label(0, 14, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "文件名", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "表空间", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 14, "空间大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 14, "空闲大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 14, "空闲比例", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 14, "文件状态", _labelFormat);
					sheet.addCell(tmpLabel);
					int row = 14;
					// 表空间信息
					SybaseVO sysbaseVO = (SybaseVO) report_has.get("sysbaseVO");
					if (sysbaseVO == null)
						sysbaseVO = new SybaseVO();
					List dbsizelist = (List) sysbaseVO.getDbInfo();
					if (dbsizelist != null && dbsizelist.size() > 0) {
						for (int i = 0; i < dbsizelist.size(); i++) {
							TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
							String _dbname = tablesVO.getDb_name();
							String dbsize = tablesVO.getDb_size();
							String freesize = tablesVO.getDb_freesize();
							String userdperc = tablesVO.getDb_usedperc();
							row = row + 1;
							tmpLabel = new Label(0, 15 + i, i + 1 + "",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, 15 + i, _dbname,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, 15 + i, dbsize,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, 15 + i, freesize,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, 15 + i, userdperc,
									p_labelFormat);
							sheet.addCell(tmpLabel);
						}
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_syball2(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					

					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					Hashtable mems = (Hashtable)report_has.get("mems");//内存信息
					Hashtable sysValue = (Hashtable)report_has.get("sysValue");//系统信息
					String typename = (String) report_has.get("typename");
					String runstr = (String) report_has.get("runstr");
					String grade = (String) report_has.get("grade");
					String pingnow = (String) report_has.get("pingnow");
					String pingmin = (String) report_has.get("pingmin");
					String pingconavg = (String) report_has.get("pingconavg");
					DBVo vo = (DBVo) report_has.get("vo");
					Hashtable maxping = (Hashtable) report_has.get("ping");
					SybaseVO sysbaseVO = (SybaseVO)report_has.get("sysbaseVO");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					
					//数据库ip信息
					tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "IP", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "类型", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, vo.getDbName(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, ip,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, typename,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, runstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5, grade,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					
					
					//连通率
					tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 8, pingnow+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 8, pingmin+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 8, pingconavg+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 9, 7, 7, file));
					// allRow = allRow+7;
					int row = 15;
					tmpLabel = new Label(0, row, "表空间", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "表空间 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "空间大小（MB）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "空闲大小（MB） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "利用率(%)", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					
					List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
					if(dbInfo != null && dbInfo.size()>0){

						for(int i=0;i<dbInfo.size();i++){
							TablesVO tempSpace = (TablesVO)dbInfo.get(i);
							String db_name = (String)tempSpace.getDb_name();
						 	String db_size = (String)tempSpace.getDb_size();
						 	String db_freesize = (String)tempSpace.getDb_freesize();
						 	String db_usedperc = (String)tempSpace.getDb_usedperc();
							tmpLabel = new Label(0, row, (i + 1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, db_name, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, db_size, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, db_freesize, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, db_usedperc, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					 row = row+2;
					
//					存储信息 
					tmpLabel = new Label(0, row, "存储信息 ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "总数据高速缓存大小(MB)", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "总物理内存大小(MB) ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "Metadata缓存(MB)", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "存储过程缓存大小(MB) ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "总逻辑内存大小(MB) ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "数据缓存匹配度(%)", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, sysbaseVO.getTotal_dataCache() ,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, sysbaseVO.getTotal_physicalMemory(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, sysbaseVO.getMetadata_cache(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, sysbaseVO.getProcedure_cache(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, sysbaseVO.getTotal_logicalMemory(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, sysbaseVO.getData_hitrate(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;

					
//					Sysbase 远程服务器信息 
					tmpLabel = new Label(0, row, "Sysbase 远程服务器信息  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row," ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row,"服务器名称  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row,"服务器网络名称  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row,"所属类别  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row,"服务器状态 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List serverlist = (List)sysbaseVO.getServersInfo();
		            if (serverlist != null && serverlist.size()>0){
		            	for(int k=0;k<serverlist.size();k++){
		            		TablesVO tVO = (TablesVO)serverlist.get(k);
							tmpLabel = new Label(0, row, (k+1)+"",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tVO.getServer_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, tVO.getServer_network_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, tVO.getServer_class(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, tVO.getServer_status(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
		            	}
		            }
		            row = row+2;
		        	
//					Sysbase 数据库用户信息
					tmpLabel = new Label(0, row, "Sysbase 数据库用户信息  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row," ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row,"用户名称   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row,"数据库中的id   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row,"所属组组名   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row,"登陆名称  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List userlist = (List)sysbaseVO.getUserInfo();
		            if (userlist != null && userlist.size()>0){
		            	for(int k=0;k<userlist.size();k++){
		            		TablesVO tVO = (TablesVO)userlist.get(k);
							tmpLabel = new Label(0, row, (k+1)+"",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tVO.getUsers_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, tVO.getID_in_db(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, tVO.getGroup_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, tVO.getLogin_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
		            	}
		            }
		            row = row+2;
		        	
//					 Sysbase 数据库设备信息 
					tmpLabel = new Label(0, row, "Sysbase 数据库设备信息  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row," ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row,"设备名称   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row,"设备物理名称    ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row,"设备描述    ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List devicelist = (List)sysbaseVO.getDeviceInfo();
		            if (devicelist != null && devicelist.size()>0){
		            	for(int k=0;k<devicelist.size();k++){
		            		TablesVO tVO = (TablesVO)devicelist.get(k);
							tmpLabel = new Label(0, row, (k+1)+"",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tVO.getDevice_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, tVO.getDevice_physical_name(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, tVO.getDevice_description(),
									p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
		            	}
		            }
		            row = row+2;
					
					//事 件 汇 报 
					tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//增加事件列表
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					
					
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}
					
					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_informixall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);

					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					Hashtable dbinfo = new Hashtable();
					dbinfo = (Hashtable)report_has.get("dbValue");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 4, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
							p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 6, 7, 7, file));
					// allRow = allRow+7;
					int row = 14;
					tmpLabel = new Label(0, row, "数据库表空间信息   ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "空间名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "空间所有者 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "该块文件的路径", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "空间大小", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "已使用的空间 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "空闲空间 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, "空间使用率  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					// 数据库信息
					ArrayList dbspaces = new ArrayList();
					if(dbinfo!=null){
					    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
					}
					 if (dbspaces != null) {
					      if (dbspaces.size()>0){
					          DecimalFormat df=new DecimalFormat("#.###");
			           	      for(int i=0;i<dbspaces.size();i++){
			           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
									tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(1, row, (String)tablesVO.get("dbspace"), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(2, row, (String)tablesVO.get("owner"), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(3, row, (String)tablesVO.get("fname"), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(4, row, df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(5, row, df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(6, row, df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(7, row, df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%", p_labelFormat);
									sheet.addCell(tmpLabel);
									row++;
								}
					      }
					 }
					 row = row+2;
					 //Informix数据库会话信息  
					 tmpLabel = new Label(0, row, "数据库会话信息     ", labelFormat);
						sheet.addCell(tmpLabel);
						row++;
						tmpLabel = new Label(0, row, "", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, "命中次数", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, "锁的数量 ", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, "顺序扫描访问数据的次数 ", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(6, row, "排序总数 ", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(7, row, "不适合内存排序数  ", b_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
						List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
						if (dbsession != null && dbsession.size()>0){
		                	for(int i=0;i<dbsession.size();i++){
		                		Hashtable tablesVO = (Hashtable)dbsession.get(i);
		                		String seqscans = String.valueOf(tablesVO.get("seqscans"));
			            		if("null".equals(seqscans)){
			            			seqscans = "";
			            		}
			            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
			            		if("null".equals(total_sorts)){
			            			total_sorts = "";
			            		}
			            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
			            		if("null".equals(dsksorts)){
			            			dsksorts = "";
			            		}
								tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(3, row, tablesVO.get("access")+"", p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(4, row, tablesVO.get("locksheld")+"", p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(5, row, seqscans, p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(6, row, total_sorts, p_labelFormat);
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(7, row, dsksorts, p_labelFormat);
								sheet.addCell(tmpLabel);
								row++;
						      }
						 }
						
						row = row +2;
						 //Informix数据库锁信息
						 tmpLabel = new Label(0, row, "数据库锁信息    ", labelFormat);
							sheet.addCell(tmpLabel);
							row++;
							tmpLabel = new Label(0, row, "", b_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, "数据库名称", b_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, "表名称 ", b_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, "锁的类型  ", b_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
							List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
							 if (dblock != null && dblock.size()>0){
				             	for(int i=0;i<dblock.size();i++){
				             		Hashtable tablesVO = (Hashtable)dblock.get(i);
				             		String type = (String)tablesVO.get("type");
				             		String desc = "";
				             		if("B".equals(type)){
				             			desc = "字节锁";
				             		}else if("IS".equals(type)){
				             			desc = "意向共享锁";
				             		}else if("S".equals(type)){
				             			desc = "共享锁";
				             		}else if("XS".equals(type)){
				             			desc = "由可重复阅读器持有的共享键值";
				             		}else if("U".equals(type)){
				             			desc = "更新锁";
				             		}else if("IX".equals(type)){
				             			desc = "意向互斥锁";
				             		}else if("SIX".equals(type)){
				             			desc = "共享的意向互斥锁";
				             		}else if("X".equals(type)){
				             			desc = "互斥锁";
				             		}else if("XR".equals(type)){
				             			desc = "由可重复阅读器持有的互斥键值";
				             		}
									tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(3, row, tablesVO.get("dbsname")+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(4, row, tablesVO.get("tabname")+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(5, row, desc, p_labelFormat);
									sheet.addCell(tmpLabel);
									row++;
							      }
							 }
				    row = row+2;
				    
		//Informix数据库日志信息  
				    tmpLabel = new Label(0, row, "数据库日志信息     ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "文件ID  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "日志文件的页数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "日志文件已用的页数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "是否被使用 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "是否是当前文件  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "是否已经备份过 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, "是否已置于备份磁盘上  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, "是否为临时日志文件  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List dblog = (ArrayList)dbinfo.get("informixlog");//锁信息
					 if (dblog != null && dblog.size()>0){
			        	for(int i=0;i<dblog.size();i++){
			        		Hashtable tablesVO = (Hashtable)dblog.get(i);
									tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(1, row, String.valueOf(tablesVO.get("uniqid")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(2, row, String.valueOf(tablesVO.get("size")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(3, row, String.valueOf(tablesVO.get("used")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(4, row, String.valueOf(tablesVO.get("is_used")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(5, row, String.valueOf(tablesVO.get("is_current")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(6, row, String.valueOf(tablesVO.get("is_backed_up")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(7, row, String.valueOf(tablesVO.get("is_archived")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(8, row, String.valueOf(tablesVO.get("is_temp")), p_labelFormat);
									sheet.addCell(tmpLabel);
									row++;
								}
					      }
					 row = row+2;
					 
					 //Informix数据库IO信息   
				    tmpLabel = new Label(0, row, "数据库IO信息 ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "块编号   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "物理读取数  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "读取的页数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "物理写入数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "写入的页数  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "物理读取（镜像）数  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, "读取（镜像）的页数   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, "物理写入（镜像）数   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row, "写入（镜像）的页数    ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List dbio = (ArrayList)dbinfo.get("iolist");//IO信息
					 if (dbio != null && dbio.size()>0){
		            	for(int i=0;i<dbio.size();i++){
		            		Hashtable tablesVO = (Hashtable)dbio.get(i);
									tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(1, row, String.valueOf(tablesVO.get("chunknum")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(2, row, String.valueOf(tablesVO.get("reads")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(3, row, String.valueOf(tablesVO.get("pagesread")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(4, row, String.valueOf(tablesVO.get("writes")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(5, row, String.valueOf(tablesVO.get("pageswritten")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(6, row, String.valueOf(tablesVO.get("mreads")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(7, row, String.valueOf(tablesVO.get("mpagesread")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(8, row, String.valueOf(tablesVO.get("mwrites")), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(9, row, String.valueOf(tablesVO.get("mpageswritten")), p_labelFormat);
									sheet.addCell(tmpLabel);
									row++;
								}
					      }
					 row = row+2;
					 
					 //事 件 汇 报 
					tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//增加事件列表
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					
					
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}
					 
					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
								.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * 多张mysql综合运行分析报表打印 xls格式
	 * @param filename
	 */
	public void createReport_mysqlall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);

					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					String typename = (String) report_has.get("typename");
					String runstr = (String) report_has.get("runstr");
					String grade = (String) report_has.get("grade");
					String pingnow = (String) report_has.get("pingnow");
					String pingmin = (String) report_has.get("pingmin");
					String pingconavg = (String) report_has.get("pingconavg");
					DBVo vo = (DBVo) report_has.get("vo");
					Vector val = (Vector)report_has.get("Val");
					if(val == null){
						val = new Vector();	
					}
					List sessionlist = (ArrayList)report_has.get("sessionlist");
					if(sessionlist == null) {
						sessionlist = new ArrayList();
					}
					Hashtable tablesHash = (Hashtable)report_has.get("tablesHash");
					if(tablesHash == null) {
						tablesHash = new Hashtable();
					}
					Vector tableinfo_v = (Vector)report_has.get("tableinfo_v");
					if(tableinfo_v == null){
						tableinfo_v = new Vector();	
					}
					Hashtable maxping = (Hashtable) report_has.get("ping");
		
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
		
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
		
					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
		
					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
		
					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					
					//数据库ip信息
					tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "IP", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "类型", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, vo.getDbName(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, ip,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, typename,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, runstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5, grade,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					
					
					//连通率
					tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 8, pingnow+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 8, pingmin+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 8, pingconavg+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
		
					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 9, 7, 7, file));
					// allRow = allRow+7;
					
					tmpLabel = new Label(0, 18, " 数据库性能信息", b_labelFormat);
					sheet.mergeCells(0,18,3,18); 
					sheet.addCell(tmpLabel);
					int row = 19;
					if(val != null && val.size()>0){
	            		for(int i=0;i<val.size();i++){
	            			Hashtable return_value = (Hashtable)val.get(i);
	            			if(return_value != null && return_value.size()>0){
	            				String name=return_value.get("variable_name").toString();
	            				String value=return_value.get("value").toString();
	            				if(name.equalsIgnoreCase("Max_used_connections"))
								{
								 name="服务器相应的最大连接数";
								}
								if(name.equalsIgnoreCase("Handler_read_first"))
								{
								 name="索引中第一条被读的次数";
								}
								if(name.equalsIgnoreCase("Handler_read_key"))
								{
								 name="根据键读一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_next"))
								{
								 name="按照键顺序读下一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_prev"))
								{
								 name="按照键顺序读前一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_rnd"))
								{
								 name="H根据固定位置读一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_rnd_next"))
								{
								 name="在数据文件中读下一行的请求数";
								}
								if(name.equalsIgnoreCase("Open_tables"))
								{
								 name="当前打开的表的数量";
								}
								if(name.equalsIgnoreCase("Opened_tables"))
								{
								 name="已经打开的表的数量";
								}
								if(name.equalsIgnoreCase("Threads_cached"))
								{
								 name="线程缓存内的线程的数量";
								}
								if(name.equalsIgnoreCase("Threads_connected"))
								{
								 name="当前打开的连接的数量";
								}
								if(name.equalsIgnoreCase("Threads_created"))
								{
								 name="创建用来处理连接的线程数";
								}
								if(name.equalsIgnoreCase("Threads_running"))
								{
								 name="激活的非睡眠状态的线程数";
								}
								if(name.equalsIgnoreCase("Table_locks_immediate"))
								{
								 name="立即获得的表的锁的次数";
								}
								if(name.equalsIgnoreCase("Table_locks_waited"))
								{
								 name="不能立即获得的表的锁的次数";
								}
								if(name.equalsIgnoreCase("Key_read_requests"))
								{
								 name="从缓存读键的数据块的请求数";
								}
								if(name.equalsIgnoreCase("Key_reads"))
								{
								 name="从硬盘读取键的数据块的次数";
								}
								if(name.equalsIgnoreCase("log_slow_queries"))
								{
								 name="是否记录慢查询";
								}
								if(name.equalsIgnoreCase("slow_launch_time"))
								{
								 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
								}
								tmpLabel = new Label(0, row, name, p_labelFormat);
								sheet.mergeCells(0,row,2,row); 
								sheet.addCell(tmpLabel);
								tmpLabel = new Label(3, row, value, p_labelFormat);
								sheet.addCell(tmpLabel);
								row++;
						}
					}
					}
					//连接信息 
					row = row+2;
					tmpLabel = new Label(0, row, "连接信息 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "数据库 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "用户名  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "主机 ", b_labelFormat);
					sheet.mergeCells(3,row,4,row); 
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "命令 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "连接时间 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					 if(sessionlist != null && sessionlist.size()>0){
	                  	for(int i=0;i<sessionlist.size();i++){
	                  		List ipsessionlist = (List)sessionlist.get(i);
	                  		if(ipsessionlist != null && ipsessionlist.size()>0){
	                  			for(int k=0;k<ipsessionlist.size();k++){
	                  				String[] sessions = (String[])ipsessionlist.get(k);
	                  				if(sessions != null && sessions.length ==5){
										tmpLabel = new Label(0, row, String.valueOf(k+1), p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(1, row, sessions[4], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(2, row, sessions[0], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(3, row, sessions[1], p_labelFormat);
										sheet.mergeCells(3,row,4,row); 
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(5, row, sessions[2], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(6, row, sessions[3], p_labelFormat);
										sheet.addCell(tmpLabel);
										row++;
	                  				}
	                  				
	                  			}
	                  		}
	                  	}
					 }
					 
					 // 表信息
					 row = row+2;
					tmpLabel = new Label(0, row, "表信息 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "表名 ", b_labelFormat);
					sheet.mergeCells(1,row,2,row); 
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "表行数   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "表大小  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "创建时间  ", b_labelFormat);
					sheet.mergeCells(5,row,6,row); 
					sheet.addCell(tmpLabel);
					row++;
					String[] dbs = vo.getDbName().split(","); 
	                if(dbs != null && dbs.length>0){
	                  	for(int i=0;i<dbs.length;i++){
	                  		String dbStr = dbs[i];
	                  		//System.out.println(dbStr+"====="+tablesHash.size());
	                  		if(tablesHash.containsKey(dbStr)){
	                  			List tableslist = (List)tablesHash.get(dbStr);
	                  			if(tableslist != null && tableslist.size()>0){
			              			for(int k=0;k<tableslist.size();k++){
			              				String[] tables = (String[])tableslist.get(k);
			              				if(tables != null && tables.length ==4){
											tmpLabel = new Label(0, row, String.valueOf(k+1), p_labelFormat);
											sheet.addCell(tmpLabel);
											tmpLabel = new Label(1, row, tables[0], p_labelFormat);
											sheet.mergeCells(1,row,2,row); 
											sheet.addCell(tmpLabel);
											tmpLabel = new Label(3, row, tables[1], p_labelFormat);
											sheet.addCell(tmpLabel);
											tmpLabel = new Label(4, row, tables[2], p_labelFormat);
											sheet.addCell(tmpLabel);
											tmpLabel = new Label(5, row, tables[3], p_labelFormat);
											sheet.mergeCells(5,row,6,row); 
											sheet.addCell(tmpLabel);
											row++;
	                  				}
	                  				
	                  			}
	                  		}
	                  	}
					 }
	               }
		                  	
//	                数据库状态信息
	   				 row = row+2;
	   				tmpLabel = new Label(0, row, "数据库状态信息  ", b_labelFormat);
					sheet.mergeCells(0,row,1,row); 
	   				sheet.addCell(tmpLabel);
	   				row++;
	   				tmpLabel = new Label(0, row, "序号  ", b_labelFormat);
	   				sheet.addCell(tmpLabel);
	   				tmpLabel = new Label(1, row, "名称  ", b_labelFormat);
					sheet.mergeCells(1,row,2,row); 
	   				sheet.addCell(tmpLabel);
	   				tmpLabel = new Label(3, row, "状态信息  ", b_labelFormat);
					sheet.mergeCells(3,row,4,row); 
	   				sheet.addCell(tmpLabel);  
	   				row++;
	   				if(tableinfo_v != null)
	   				{//HONGLILI
	   					for(int i=0;i<tableinfo_v.size();i++){
	   						Hashtable ht = (Hashtable)tableinfo_v.get(i);
	   						String size = ht.get("variable_name").toString();
	   						String free = ht.get("value").toString();
	   						if(size.equalsIgnoreCase("auto_increment_increment"))
	   						{
	   						 size="控制列中的值的增量值";
	   						}
	   						if(size.equalsIgnoreCase("auto_increment_offset"))
	   						{
	   						 size="确定AUTO_INCREMENT列值的起点";
	   						}
	   						if(size.equalsIgnoreCase("automatic_sp_privileges"))
	   						{
	   						 size="automatic_sp_privileges";
	   						}
	   						if(size.equalsIgnoreCase("back_log"))
	   						{
	   						 size="连接请求的数量";
	   						}
	   						if(size.equalsIgnoreCase("basedir"))
	   						{
	   						 size="MySQL安装基准目录";
	   						}
	   						if(size.equalsIgnoreCase("binlog_cache_size"))
	   						{
	   						 size="容纳二进制日志SQL语句的缓存大小";
	   						}
	   						if(size.equalsIgnoreCase("bulk_insert_buffer_size"))
	   						{
	   						 size="每线程的字节数限制缓存树的大小";
	   						}
	   						if(size.equalsIgnoreCase("character_set_client"))
	   						{
	   						 size="来自客户端的语句的字符集";
	   						}
	   						if(size.equalsIgnoreCase("character_set_connection"))
	   						{
	   						 size="没有字符集导入符的字符串转换";
	   						}
	   						if(size.equalsIgnoreCase("character_set_database"))
	   						{
	   						 size="默认数据库使用的字符集";
	   						}
	   						if(size.equalsIgnoreCase("character_set_filesystem"))
	   						{
	   						 size="character_set_filesystem";
	   						}
	   						if(size.equalsIgnoreCase("character_set_results"))
	   						{
	   						 size="用于向客户端返回查询结果的字符集";
	   						}
	   						if(size.equalsIgnoreCase("character_set_server"))
	   						{
	   						 size="服务器的默认字符集";
	   						}
	   						if(size.equalsIgnoreCase("character_set_system"))
	   						{
	   						 size="服务器用来保存识别符的字符集";
	   						}
	   						if(size.equalsIgnoreCase("character_sets_dir"))
	   						{
	   						 size="字符集安装目录";
	   						}
	   						if(size.equalsIgnoreCase("collation_connection"))
	   						{
	   						 size="连接字符集的校对规则";
	   						}
	   						if(size.equalsIgnoreCase("collation_database"))
	   						{
	   						 size="默认数据库使用的校对规则";
	   						}
	   						if(size.equalsIgnoreCase("collation_server"))
	   						{
	   						 size="服务器的默认校对规则";
	   						}
	   						if(size.equalsIgnoreCase("completion_type"))
	   						{
	   						 size="事务结束类型";
	   						}
	   						if(size.equalsIgnoreCase("concurrent_insert"))
	   						{
	   						 size="存储值情况";
	   						}
	   						if(size.equalsIgnoreCase("connect_timeout"))
	   						{
	   						 size="服务器用Bad handshake响应前等待连接包的秒数";
	   						}
	   						if(size.equalsIgnoreCase("datadir"))
	   						{
	   						 size="MySQL数据目录";
	   						}
	   						if(size.equalsIgnoreCase("date_format"))
	   						{
	   						 size="date_format(为被使用)";
	   						}
	   						if(size.equalsIgnoreCase("datetime_format"))
	   						{
	   						 size="datetime_format(为被使用)";
	   						}
	   						if(size.equalsIgnoreCase("default_week_format"))
	   						{
	   						 size="WEEK() 函数使用的默认模式";
	   						}
	   						if(size.equalsIgnoreCase("delay_key_write"))
	   						{
	   						 size="使用的DELAY_KEY_WRITE表选项的处理";
	   						}
	   						if(size.equalsIgnoreCase("delayed_insert_limit"))
	   						{
	   						 size="INSERT DELAYED处理器线程检查是否有挂起的SELECT语句";
	   						}
	   						if(size.equalsIgnoreCase("delayed_insert_timeout"))
	   						{
	   						 size="INSERT DELAYED处理器线程终止前应等待INSERT语句的时间";
	   						}
	   						if(size.equalsIgnoreCase("delayed_queue_size"))
	   						{
	   						 size="处理INSERT DELAYED语句时队列中行的数量限制";
	   						}
	   						if(size.equalsIgnoreCase("div_precision_increment"))
	   						{
	   						 size="用/操作符执行除操作的结果可增加的精确度的位数";
	   						}
	   						if(size.equalsIgnoreCase("engine_condition_pushdown"))
	   						{
	   						 size="适用于NDB的检测";
	   						}
	   						if(size.equalsIgnoreCase("expire_logs_days"))
	   						{
	   						 size="二进制日志自动删除的天数";
	   						}
	   						if(size.equalsIgnoreCase("flush"))
	   						{
	   						 size="flush选项启动mysqld值";
	   						}
	   						if(size.equalsIgnoreCase("flush_time"))
	   						{
	   						 size="查看释放资源情况";
	   						}
	   						if(size.equalsIgnoreCase("ft_boolean_syntax"))
	   						{
	   						 size="使用IN BOOLEAN MODE执行的布尔全文搜索支持的操作符系列";
	   						}
	   						if(size.equalsIgnoreCase("ft_max_word_len"))
	   						{
	   						 size="FULLTEXT索引中所包含的字的最大长度";
	   						}
	   						if(size.equalsIgnoreCase("ft_min_word_len"))
	   						{
	   						 size="FULLTEXT索引中所包含的字的最小长度";
	   						}
	   						if(size.equalsIgnoreCase("ft_query_expansion_limit"))
	   						{
	   						 size="使用WITH QUERY EXPANSION进行全文搜索的最大匹配数";
	   						}
	   						if(size.equalsIgnoreCase("ft_stopword_file"))
	   						{
	   						 size="用于读取全文搜索的停止字清单的文件";
	   						}
	   						if(size.equalsIgnoreCase("group_concat_max_len"))
	   						{
	   						 size="允许的GROUP_CONCAT()函数结果的最大长度";
	   						}
	   						if(size.equalsIgnoreCase("have_archive"))
	   						{
	   						 size="mysqld支持ARCHIVE表支持表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_bdb"))
	   						{
	   						 size="mysqld支持BDB表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_blackhole_engine"))
	   						{
	   						 size="mysqld支持BLACKHOLE表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_compress"))
	   						{
	   						 size="是否zlib压缩库适合该服务器";
	   						}
	   						if(size.equalsIgnoreCase("have_crypt"))
	   						{
	   						 size="是否crypt()系统调用适合该服务器";
	   						}
	   						if(size.equalsIgnoreCase("have_csv"))
	   						{
	   						 size="mysqld支持ARCHIVE表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_example_engine"))
	   						{
	   						 size="mysqld支持EXAMPLE表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_federated_engine"))
	   						{
	   						 size="mysqld支持FEDERATED表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_geometry"))
	   						{
	   						 size="是否服务器支持空间数据类型";
	   						}
	   						if(size.equalsIgnoreCase("have_innodb"))
	   						{
	   						 size="mysqld支持InnoDB表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_isam"))
	   						{
	   						 size="向后兼容";
	   						}
	   						if(size.equalsIgnoreCase("have_ndbcluster"))
	   						{
	   						 size="mysqld支持NDB CLUSTER表情况";
	   						}
	   						if(size.equalsIgnoreCase("have_openssl"))
	   						{
	   						 size="mysqld支持客户端/服务器协议的SSL(加密)情况";
	   						}
	   						if(size.equalsIgnoreCase("have_query_cache"))
	   						{
	   						 size="mysqld支持查询缓存情况";
	   						}
	   						if(size.equalsIgnoreCase("have_raid"))
	   						{
	   						 size="mysqld支持RAID选项情况";
	   						}
	   						if(size.equalsIgnoreCase("have_rtree_keys"))
	   						{
	   						 size="RTREE索引是否可用";
	   						}
	   						if(size.equalsIgnoreCase("have_symlink"))
	   						{
	   						 size="是否启用符号链接支持";
	   						}
	   						if(size.equalsIgnoreCase("init_connect"))
	   						{
	   						 size="字符串处理";
	   						}
	   						if(size.equalsIgnoreCase("init_file"))
	   						{
	   						 size="启动服务器时用--init-file选项指定的文件名";
	   						}
	   						if(size.equalsIgnoreCase("init_slave"))
	   						{
	   						 size="SQL线程启动时从服务器应执行该字符串";
	   						}
	   						if(size.equalsIgnoreCase("innodb_additional_mem_pool_size"))
	   						{
	   						 size="InnoDB用来存储数据内存大小情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_autoextend_increment"))
	   						{
	   						 size="表空间被填满之时扩展表空间的尺寸";
	   						}
	   						if(size.equalsIgnoreCase("innodb_buffer_pool_awe_mem_mb"))
	   						{
	   						 size="缓冲池被放在32位Windows的AWE内存里缓存池大小";
	   						}
	   						if(size.equalsIgnoreCase("innodb_buffer_pool_size"))
	   						{
	   						 size="InnoDB用来缓存它的数据和索引的内存缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("innodb_checksums"))
	   						{
	   						 size="InnoDB在所有对磁盘的页面读取上的状态";
	   						}
	   						if(size.equalsIgnoreCase("innodb_commit_concurrency"))
	   						{
	   						 size="innodb_commit_concurrency";
	   						}
	   						if(size.equalsIgnoreCase("innodb_concurrency_tickets"))
	   						{
	   						 size="innodb_concurrency_tickets";
	   						}
	   						if(size.equalsIgnoreCase("innodb_data_file_path"))
	   						{
	   						 size="单独数据文件和它们尺寸的路径";
	   						}
	   						if(size.equalsIgnoreCase("innodb_data_home_dir"))
	   						{
	   						 size="目录路径对所有InnoDB数据文件的共同部分";
	   						}
	   						if(size.equalsIgnoreCase("innodb_doublewrite"))
	   						{
	   						 size="InnoDB存储所有数据情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_fast_shutdown"))
	   						{
	   						 size="InnoDB在关闭情况的值选择";
	   						}
	   						if(size.equalsIgnoreCase("innodb_file_io_threads"))
	   						{
	   						 size="InnoDB中文件I/O线程的数";
	   						}
	   						if(size.equalsIgnoreCase("innodb_file_per_table"))
	   						{
	   						 size="确定是否InnoDB用自己的.ibd文件为存储数据和索引创建每一个新表";
	   						}
	   						if(size.equalsIgnoreCase("innodb_flush_log_at_trx_commit"))
	   						{
	   						 size="InnoDB对日志操作情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_flush_method"))
	   						{
	   						 size="InnoDB使用fsync()来刷新数据和日志文件";
	   						}
	   						if(size.equalsIgnoreCase("innodb_force_recovery"))
	   						{
	   						 size="损坏的数据库转储表的方案";
	   						}
	   						if(size.equalsIgnoreCase("innodb_lock_wait_timeout"))
	   						{
	   						 size="InnoDB事务在被回滚之前可以等待一个锁定的超时秒数";
	   						}
	   						if(size.equalsIgnoreCase("innodb_locks_unsafe_for_binlog"))
	   						{
	   						 size="InnoDB搜索和索引扫描中关闭下一键锁定";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_arch_dir"))
	   						{
	   						 size="使用日志档案 被完整写入的日志文件所在的目录的归档值";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_archive"))
	   						{
	   						 size="日志处理情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_buffer_size"))
	   						{
	   						 size="InnoDB用来往磁盘上的日志文件写操作的缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_file_size"))
	   						{
	   						 size="日志组里每个日志文件的大小";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_files_in_group"))
	   						{
	   						 size="日志组里日志文件的数目";
	   						}
	   						if(size.equalsIgnoreCase("innodb_log_group_home_dir"))
	   						{
	   						 size="InnoDB日志文件的目录路径";
	   						}
	   						if(size.equalsIgnoreCase("innodb_max_dirty_pages_pct"))
	   						{
	   						 size="InnoDB中处理脏页的情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_max_purge_lag"))
	   						{
	   						 size="净化操作被滞后之时，如何延迟INSERT,UPDATE和DELETE操作";
	   						}
	   						if(size.equalsIgnoreCase("innodb_mirrored_log_groups"))
	   						{
	   						 size="为数据库保持的日志组内同样拷贝的数量";
	   						}
	   						if(size.equalsIgnoreCase("innodb_open_files"))
	   						{
	   						 size="定InnoDB一次可以保持打开的.ibd文件的最大数";
	   						}
	   						if(size.equalsIgnoreCase("innodb_support_xa"))
	   						{
	   						 size="InnoDB支持在XA事务中的双向提交情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_sync_spin_loops"))
	   						{
	   						 size="innodb_sync_spin_loops";
	   						}
	   						if(size.equalsIgnoreCase("innodb_table_locks"))
	   						{
	   						 size="InnoDB对表的锁定情况";
	   						}
	   						if(size.equalsIgnoreCase("innodb_thread_concurrency"))
	   						{
	   						 size="InnoDB试着在InnoDB内保持操作系统线程的数量少于或等于这个参数给出的限制范围";
	   						}
	   						if(size.equalsIgnoreCase("innodb_thread_sleep_delay"))
	   						{
	   						 size="让InnoDB为周期的SHOW INNODB STATUS输出创建一个文件<datadir>/innodb_status";
	   						}
	   						if(size.equalsIgnoreCase("interactive_timeout"))
	   						{
	   						 size="服务器关闭交互式连接前等待活动的秒数";
	   						}
	   						if(size.equalsIgnoreCase("join_buffer_size"))
	   						{
	   						 size="用于完全联接的缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("key_buffer_size"))
	   						{
	   						 size="索引块缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("key_cache_age_threshold"))
	   						{
	   						 size="控制将缓冲区从键值缓存热子链(sub-chain)降级到温子链(sub-chain)的值";
	   						}
	   						if(size.equalsIgnoreCase("key_cache_block_size"))
	   						{
	   						 size="键值缓存内块的字节大小";
	   						}
	   						if(size.equalsIgnoreCase("key_cache_division_limit"))
	   						{
	   						 size="键值缓存缓冲区链热子链和温子链的划分点";
	   						}
	   						if(size.equalsIgnoreCase("language"))
	   						{
	   						 size="错误消息所用语言";
	   						}
	   						if(size.equalsIgnoreCase("large_files_support"))
	   						{
	   						 size="mysqld编译时是否使用了大文件支持选项";
	   						}
	   						if(size.equalsIgnoreCase("large_page_size"))
	   						{
	   						 size="large_page_size";
	   						}
	   						if(size.equalsIgnoreCase("large_pages"))
	   						{
	   						 size="是否启用了大页面支持";
	   						}
	   						if(size.equalsIgnoreCase("license"))
	   						{
	   						 size="服务器的许可类型";
	   						}
	   						if(size.equalsIgnoreCase("local_infile"))
	   						{
	   						 size="是否LOCAL支持LOAD DATA INFILE语句";
	   						}
	   						if(size.equalsIgnoreCase("log"))
	   						{
	   						 size="是否启用将所有查询记录到常规查询日志中";
	   						}
	   						if(size.equalsIgnoreCase("log_bin"))
	   						{
	   						 size="是否启用二进制日志";
	   						}
	   						if(size.equalsIgnoreCase("log_bin_trust_function_creators"))
	   						{
	   						 size="是否可以信任保存的程序的作者不会创建向二进制日志写入不安全事件的程序";
	   						}
	   						if(size.equalsIgnoreCase("log_error"))
	   						{
	   						 size="错误日志的位置";
	   						}
	   						if(size.equalsIgnoreCase("log_slave_updates"))
	   						{
	   						 size="是否从服务器从主服务器收到的更新应记入从服务器自己的二进制日志";
	   						}
	   						if(size.equalsIgnoreCase("log_slow_queries"))
	   						{
	   						 size="是否记录慢查询";
	   						}
	   						if(size.equalsIgnoreCase("log_warnings"))
	   						{
	   						 size="是否产生其它警告消息";
	   						}
	   						if(size.equalsIgnoreCase("long_query_time"))
	   						{
	   						 size="查询时间超过该值，则增加Slow_queries状态变量";
	   						}
	   						if(size.equalsIgnoreCase("low_priority_updates"))
	   						{
	   						 size="表示sql语句等待语句将等待直到受影响的表没有挂起的SELECT或LOCK TABLE READ";
	   						}
	   						if(size.equalsIgnoreCase("lower_case_file_system"))
	   						{
	   						 size="说明是否数据目录所在的文件系统对文件名的大小写敏感";
	   						}
	   						if(size.equalsIgnoreCase("lower_case_table_names"))
	   						{
	   						 size="为1表示表名用小写保存到硬盘上，并且表名比较时不对大小写敏感";
	   						}
	   						if(size.equalsIgnoreCase("max_allowed_packet"))
	   						{
	   						 size="包或任何生成的/中间字符串的最大大小";
	   						}
	   						if(size.equalsIgnoreCase("max_binlog_cache_size"))
	   						{
	   						 size="多语句事务需要更大的内存时出现的情况";
	   						}
	   						if(size.equalsIgnoreCase("max_binlog_size"))
	   						{
	   						 size="多语句事务需要更大的内存时出现的情况";
	   						}
	   						if(size.equalsIgnoreCase("max_connect_errors"))
	   						{
	   						 size="断的与主机的连接的最大限制数";
	   						}
	   						if(size.equalsIgnoreCase("max_connections"))
	   						{
	   						 size="允许的并行客户端连接数目";
	   						}
	   						if(size.equalsIgnoreCase("max_delayed_threads"))
	   						{
	   						 size="启动线程来处理INSERT DELAYED语句的限制数";
	   						}
	   						if(size.equalsIgnoreCase("max_error_count"))
	   						{
	   						 size="存由SHOW ERRORS或SHOW WARNINGS显示的错误、警告和注解的最大数目";
	   						}
	   						if(size.equalsIgnoreCase("max_heap_table_size"))
	   						{
	   						 size="设置MEMORY (HEAP)表可以增长到的最大空间大小";
	   						}
	   						if(size.equalsIgnoreCase("max_insert_delayed_threads"))
	   						{
	   						 size="启动线程来处理INSERT DELAYED语句的限制数(同max_delayed_threads)";
	   						}
	   						if(size.equalsIgnoreCase("max_join_size"))
	   						{
	   						 size="不允许可能需要检查多于max_join_size行的情况";
	   						}
	   						if(size.equalsIgnoreCase("max_length_for_sort_data"))
	   						{
	   						 size="确定使用的filesort算法的索引值大小的限值";
	   						}
	   						if(size.equalsIgnoreCase("max_prepared_stmt_count"))
	   						{
	   						 size="max_prepared_stmt_count";
	   						}
	   						if(size.equalsIgnoreCase("max_relay_log_size"))
	   						{
	   						 size="如果复制从服务器写入中继日志时超出给定值，则滚动中继日";
	   						}
	   						if(size.equalsIgnoreCase("max_seeks_for_key"))
	   						{
	   						 size="限制根据键值寻找行时的最大搜索数";
	   						}
	   						if(size.equalsIgnoreCase("max_sort_length"))
	   						{
	   						 size="排序BLOB或TEXT值时使用的字节数";
	   						}
	   						if(size.equalsIgnoreCase("max_sp_recursion_depth"))
	   						{
	   						 size="max_sp_recursion_depth";
	   						}
	   						if(size.equalsIgnoreCase("max_tmp_tables"))
	   						{
	   						 size="客户端可以同时打开的临时表的最大数";
	   						}
	   						if(size.equalsIgnoreCase("max_user_connections"))
	   						{
	   						 size="给定的MySQL账户允许的最大同时连接数";
	   						}
	   						if(size.equalsIgnoreCase("max_write_lock_count"))
	   						{
	   						 size="超过写锁定限制后，允许部分读锁定";
	   						}
	   						if(size.equalsIgnoreCase("multi_range_count"))
	   						{
	   						 size="multi_range_count";
	   						}
	   						if(size.equalsIgnoreCase("myisam_data_pointer_size"))
	   						{
	   						 size="默认指针大小的值";
	   						}
	   						if(size.equalsIgnoreCase("myisam_max_sort_file_size"))
	   						{
	   						 size="重建MyISAM索引时，允许MySQL使用的临时文件的最大空间大小";
	   						}
	   						if(size.equalsIgnoreCase("myisam_recover_options"))
	   						{
	   						 size="myisam-recover选项的值";
	   						}
	   						if(size.equalsIgnoreCase("myisam_repair_threads"))
	   						{
	   						 size="如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引";
	   						}
	   						if(size.equalsIgnoreCase("myisam_sort_buffer_size"))
	   						{
	   						 size="在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序MyISAM索引分配的缓冲区";
	   						}
	   						if(size.equalsIgnoreCase("myisam_stats_method"))
	   						{
	   						 size="MyISAM表搜集关于索引值分发的统计信息时服务器如何处理NULL值";
	   						}
	   						if(size.equalsIgnoreCase("named_pipe"))
	   						{
	   						 size="明服务器是否支持命名管道连接";
	   						}
	   						if(size.equalsIgnoreCase("net_buffer_length"))
	   						{
	   						 size="在查询之间将通信缓冲区重设为该值";
	   						}
	   						if(size.equalsIgnoreCase("net_read_timeout"))
	   						{
	   						 size="中断读前等待连接的其它数据的秒数";
	   						}
	   						if(size.equalsIgnoreCase("net_retry_count"))
	   						{
	   						 size="表示某个通信端口的读操作中断了，在放弃前重试多次";
	   						}
	   						if(size.equalsIgnoreCase("net_write_timeout"))
	   						{
	   						 size="中断写之前等待块写入连接的秒数";
	   						}
	   						if(size.equalsIgnoreCase("new"))
	   						{
	   						 size="表示在MySQL 4.0中使用该变量来打开4.1中的一些行为，并用于向后兼容性";
	   						}
	   						if(size.equalsIgnoreCase("old_passwords"))
	   						{
	   						 size="是否服务器应为MySQL用户账户使用pre-4.1-style密码性";
	   						}
	   						if(size.equalsIgnoreCase("open_files_limit"))
	   						{
	   						 size="操作系统允许mysqld打开的文件的数量";
	   						}
	   						if(size.equalsIgnoreCase("optimizer_prune_level"))
	   						{
	   						 size="在查询优化从优化器搜索空间裁减低希望局部计划中使用的控制方法 0表示禁用方法";
	   						}
	   						if(size.equalsIgnoreCase("optimizer_search_depth"))
	   						{
	   						 size="查询优化器进行的搜索的最大深度";
	   						}
	   						if(size.equalsIgnoreCase("pid_file"))
	   						{
	   						 size="进程ID (PID)文件的路径名";
	   						}
	   						if(size.equalsIgnoreCase("prepared_stmt_count"))
	   						{
	   						 size="prepared_stmt_count";
	   						}
	   						if(size.equalsIgnoreCase("port"))
	   						{
	   						 size="服务器帧听TCP/IP连接所用端口";
	   						}
	   						if(size.equalsIgnoreCase("preload_buffer_size"))
	   						{
	   						 size="重载索引时分配的缓冲区大小";
	   						}
	   						if(size.equalsIgnoreCase("protocol_version"))
	   						{
	   						 size="MySQL服务器使用的客户端/服务器协议的版本";
	   						}
	   						if(size.equalsIgnoreCase("query_alloc_block_size"))
	   						{
	   						 size="为查询分析和执行过程中创建的对象分配的内存块大小";
	   						}
	   						if(size.equalsIgnoreCase("query_cache_limit"))
	   						{
	   						 size="不要缓存大于该值的结果";
	   						}
	   						if(size.equalsIgnoreCase("query_cache_min_res_unit"))
	   						{
	   						 size="查询缓存分配的最小块的大小(字节)";
	   						}
	   						if(size.equalsIgnoreCase("query_cache_size"))
	   						{
	   						 size="为缓存查询结果分配的内存的数量";
	   						}
	   						if(size.equalsIgnoreCase("query_cache_type"))
	   						{
	   						 size="设置查询缓存类型";
	   						}
	   						if(size.equalsIgnoreCase("query_cache_wlock_invalidate"))
	   						{
	   						 size="对表进行WRITE锁定的设置值";
	   						}
	   						if(size.equalsIgnoreCase("query_prealloc_size"))
	   						{
	   						 size="用于查询分析和执行的固定缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("range_alloc_block_size"))
	   						{
	   						 size="范围优化时分配的块的大小";
	   						}
	   						if(size.equalsIgnoreCase("read_buffer_size"))
	   						{
	   						 size="每个线程连续扫描时为扫描的每个表分配的缓冲区的大小(字节)";
	   						}
	   						if(size.equalsIgnoreCase("read_only"))
	   						{
	   						 size="变量对复制从服务器设置为ON时，服务器是否允许更新";
	   						}
	   						if(size.equalsIgnoreCase("read_only"))
	   						{
	   						 size="变量对复制从服务器设置为ON时，从服务器不允许更新";
	   						}
	   						if(size.equalsIgnoreCase("relay_log_purge"))
	   						{
	   						 size="当不再需要中继日志时禁用或启用自动清空中继日志";
	   						}
	   						if(size.equalsIgnoreCase("read_rnd_buffer_size"))
	   						{
	   						 size="当排序后按排序后的顺序读取行时，则通过该缓冲区读取行，避免搜索硬盘";
	   						}
	   						if(size.equalsIgnoreCase("secure_auth"))
	   						{
	   						 size="如果用--secure-auth选项启动了MySQL服务器，是否将阻塞有旧格式(4.1之前)密码的所有账户所发起的连接";
	   						}
	   						if(size.equalsIgnoreCase("shared_memory"))
	   						{
	   						 size="(只用于Windows)服务器是否允许共享内存连接";
	   						}
	   						if(size.equalsIgnoreCase("shared_memory_base_name"))
	   						{
	   						 size="(只用于Windows)说明服务器是否允许共享内存连接，并为共享内存设置识别符";
	   						}
	   						if(size.equalsIgnoreCase("server_id"))
	   						{
	   						 size="用于主复制服务器和从复制服务器";
	   						}
	   						if(size.equalsIgnoreCase("skip_external_locking"))
	   						{
	   						 size="mysqld是否使用外部锁定";
	   						}
	   						if(size.equalsIgnoreCase("skip_networking"))
	   						{
	   						 size="如果服务器只允许本地(非TCP/IP)连接";
	   						}
	   						if(size.equalsIgnoreCase("skip_show_database"))
	   						{
	   						 size="防止不具有SHOW DATABASES权限的人们使用SHOW DATABASES语句";
	   						}
	   						if(size.equalsIgnoreCase("slave_compressed_protocol"))
	   						{
	   						 size="如果主、从服务器均支持，确定是否使用从/主压缩协议";
	   						}
	   						if(size.equalsIgnoreCase("slave_load_tmpdir"))
	   						{
	   						 size="从服务器为复制LOAD DATA INFILE语句创建临时文件的目录名";
	   						}
	   						if(size.equalsIgnoreCase("slave_net_timeout"))
	   						{
	   						 size="放弃读操作前等待主/从连接的更多数据的等待秒数";
	   						}
	   						if(size.equalsIgnoreCase("slave_skip_errors"))
	   						{
	   						 size="从服务器应跳过(忽视)的复制错误";
	   						}
	   						if(size.equalsIgnoreCase("slave_transaction_retries"))
	   						{
	   						 size="复制从服务器SQL线程未能执行事务，在提示错误并停止前它自动重复slave_transaction_retries次";
	   						}
	   						if(size.equalsIgnoreCase("slow_launch_time"))
	   						{
	   						 size="如果创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
	   						}
	   						if(size.equalsIgnoreCase("sort_buffer_size"))
	   						{
	   						 size="每个排序线程分配的缓冲区的大小";
	   						}
	   						if(size.equalsIgnoreCase("sql_mode"))
	   						{
	   						 size="当前的服务器SQL模式，可以动态设置";
	   						}
	   						if(size.equalsIgnoreCase("storage_engine"))
	   						{
	   						 size="该变量是table_typeis的同义词。在MySQL 5.1中,首选storage_engine";
	   						}
	   						if(size.equalsIgnoreCase("sync_binlog"))
	   						{
	   						 size="如果为正，当每个sync_binlog'th写入该二进制日志后，MySQL服务器将它的二进制日志同步到硬盘上";
	   						}
	   						if(size.equalsIgnoreCase("sync_frm"))
	   						{
	   						 size="如果该变量设为1,当创建非临时表时它的.frm文件是否被同步到硬盘上";
	   						}
	   						if(size.equalsIgnoreCase("system_time_zone"))
	   						{
	   						 size="服务器系统时区";
	   						}
	   						if(size.equalsIgnoreCase("table_cache"))
	   						{
	   						 size="所有线程打开的表的数目";
	   						}
	   						if(size.equalsIgnoreCase("table_type"))
	   						{
	   						 size="默认表类型(存储引擎)";
	   						}
	   						if(size.equalsIgnoreCase("thread_cache_size"))
	   						{
	   						 size="服务器应缓存多少线程以便重新使用";
	   						}
	   						if(size.equalsIgnoreCase("thread_stack"))
	   						{
	   						 size="每个线程的堆栈大小";
	   						}
	   						if(size.equalsIgnoreCase("time_format"))
	   						{
	   						 size="该变量为使用";
	   						}
	   						if(size.equalsIgnoreCase("time_zone"))
	   						{
	   						 size="当前的时区";
	   						}
	   						if(size.equalsIgnoreCase("tmp_table_size"))
	   						{
	   						 size="如果内存内的临时表超过该值，MySQL自动将它转换为硬盘上的MyISAM表";
	   						}
	   						if(size.equalsIgnoreCase("tmpdir"))
	   						{
	   						 size="保存临时文件和临时表的目录";
	   						}
	   						if(size.equalsIgnoreCase("transaction_alloc_block_size"))
	   						{
	   						 size="为保存将保存到二进制日志中的事务的查询而分配的内存块的大小(字节)";
	   						}
	   						if(size.equalsIgnoreCase("transaction_prealloc_size"))
	   						{
	   						 size="transaction_alloc_blocks分配的固定缓冲区的大小（字节），在两次查询之间不会释放";
	   						}
	   						if(size.equalsIgnoreCase("tx_isolation"))
	   						{
	   						 size="默认事务隔离级别";
	   						}
	   						if(size.equalsIgnoreCase("updatable_views_with_limit"))
	   						{
	   						 size="该变量控制如果更新包含LIMIT子句，是否可以在当前表中使用不包含主关键字的视图进行更新";
	   						}
	   						if(size.equalsIgnoreCase("version"))
	   						{
	   						 size="服务器版本号";
	   						}
	   						if(size.equalsIgnoreCase("version_bdb"))
	   						{
	   						 size="BDB存储引擎版本";
	   						}
	   						if(size.equalsIgnoreCase("version_comment"))
	   						{
	   						 size="configure脚本有一个--with-comment选项，当构建MySQL时可以进行注释";
	   						}
	   						if(size.equalsIgnoreCase("version_compile_machine"))
	   						{
	   						 size="MySQL构建的机器或架构的类型";
	   						}
	   						if(size.equalsIgnoreCase("version_compile_os"))
	   						{
	   						 size="MySQL构建的操作系统的类型";
	   						}
	   						if(size.equalsIgnoreCase("wait_timeout"))
	   						{
	   						 size="服务器关闭非交互连接之前等待活动的秒数";
	   						}
							tmpLabel = new Label(0, row, String.valueOf(i+1), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, size, p_labelFormat);
							sheet.mergeCells(1,row,2,row); 
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, free, p_labelFormat);
							sheet.mergeCells(3,row,4,row); 
							sheet.addCell(tmpLabel);
							row++;	
	                     }
	   				 }      	
					
					//事 件 汇 报 
					row = row+2;
					tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
//					增加事件列表
					//增加事件列表
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					
					
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}
					
		
					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}


	public void createReport_dbping(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("数据库连通率使用统计报表", 0);
			List memlist = (List) reportHash.get("pinglist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "数据库连通率性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "数据库类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "数据库名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "应用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "不可达次数", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, (String) mlist.get(5),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_dbevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("数据库事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "数据库事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "数据库类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "数据库名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "应用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "服务不可用事件", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) mlist.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) mlist.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) mlist.get(2),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) mlist.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, (String) mlist.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	//jhl add
	
	//sqlserver event report 
	public void createReport_SQLServerevent(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("数据库事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			WritableFont labelFont = new WritableFont(WritableFont .createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "数据库事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "数据库类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "数据库名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "应用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "服务不可用事件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5 ,1 + "", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) memlist.get(0), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) memlist.get(1), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) memlist.get(1), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, "afunms", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 5, (String) memlist.get(2), p_labelFormat);
			sheet.addCell(tmpLabel);
			
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart().getChart(), impReport.getChart().getWidth(),impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	// ora event report
	public void createReportOra_event(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("数据库事件统计报表", 0);
			List memlist = (List) reportHash.get("eventlist");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "数据库事件统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "数据库类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "数据库名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "应用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "服务不可用事件", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			
					String ipaddress = (String) memlist.get(0);
					String typevo = (String) memlist.get(1);
					String dbname = (String) memlist.get(2);
					String pingvalue = memlist.get(3)+"";
					tmpLabel = new Label(0, 5 ,1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 , ipaddress, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 , typevo, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 , dbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 , dbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 , pingvalue, p_labelFormat);
					sheet.addCell(tmpLabel);
			

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	
	
	//ora event report
	//可用性报表
	public void createReportusa_ora(String filename){
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try{
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "可用性报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),p_labelFormat);
			sheet.addCell(tmpLabel);
			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),impReport.getChart().getHeight());
				} catch (IOException ioe) {
					}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		}catch(Exception e){
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
				} catch (Exception e) {
			}
		}
	}
	//可用行报表pdf
	public void createReportusa_oraPDF(String filename) throws DocumentException,IOException{
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light","UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "可用性报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString, contextFont1);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			PdfPTable aTable = new PdfPTable(4);
			float[] widths = { 220f, 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax"))); 
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("ping")));
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmin")));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/"+ newip+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
				document.add(img1);
			}
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
	}
	//可用性报表doc
	public void createReportusa_oraDoc(String filename) throws DocumentException,IOException{
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			//System.out.println("newi ========================"+newip);
			Paragraph title = new Paragraph(hostname + "可用性报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"+ "数据统计时间段:" + starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			Table aTable = new Table(4);
			float[] widths = { 220f, 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new Cell(new Phrase((String) maxping.get("pingmax"),contextFont));
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),contextFont));//HONGLI MODIFY   
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new Cell(new Phrase((String) maxping.get("ping"),contextFont));
			cell = new Cell(new Phrase((String) maxping.get("pingmin"),contextFont));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/"+ newip+ "ConnectUtilization" + ".png");
			document.add(aTable);
			document.add(img);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//可用性报表xls
	public void createReportusa_oraXls(String filename){
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "可用性报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),p_labelFormat);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingnow"),p_labelFormat);//HONGLI MODIFY
			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(2, 5, (String) maxping.get("ping"),p_labelFormat);
			tmpLabel = new Label(2, 5, (String) maxping.get("pingmin"),p_labelFormat);//HONGLI MODIFY
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),p_labelFormat);
			sheet.addCell(tmpLabel);
			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
//	//jhl end
//	public void createReport_ora(String filename) {
//		if (impReport.getTable() == null) {
//			fileName = null;
//			return;
//		}
//		WritableWorkbook wb = null;
//		try {
//			// fileName = ResourceCenter.getInstance().getSysPath() +
//			// "temp\\dhcnms_report.xls";
//			// fileName = CommonAppUtil.getAppName() +
//			// "/temp/hostnms_report.xls";
//			fileName = ResourceCenter.getInstance().getSysPath() + filename;
//			wb = Workbook.createWorkbook(new File(fileName));
//
//			String hostname = (String) reportHash.get("dbname");
//			String ip = (String) reportHash.get("ip");
//			String newip = doip(ip);
//			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
//			String Ping = (String) reportHash.get("Ping");
//			String starttime = (String) reportHash.get("starttime");
//			String totime = (String) reportHash.get("totime");
//
//			Hashtable maxping = (Hashtable) reportHash.get("ping");
//
//			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//
//			WritableFont labelFont = new WritableFont(WritableFont
//					.createFont("宋体"), 12, WritableFont.BOLD, false);
//			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
//
//			WritableCellFormat _labelFormat = new WritableCellFormat();
//			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
//
//			WritableCellFormat p_labelFormat = new WritableCellFormat();
//			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
//
//			WritableCellFormat b_labelFormat = new WritableCellFormat();
//			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
//
//			Label tmpLabel = null;
//			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
//			sheet.addCell(tmpLabel);
//
//			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
//			sheet.addCell(tmpLabel);
//
//			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
//					p_labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
//					p_labelFormat);
//			sheet.addCell(tmpLabel);
//
//			// 设置图片
//			File file = new File(ResourceCenter.getInstance().getSysPath()
//					+ "/resource/image/jfreechart/" + newip
//					+ "ConnectUtilization" + ".png");
//			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
//			// allRow = allRow+2;
//			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
//			// allRow = allRow+7;
//
//			tmpLabel = new Label(0, 14, "表空间信息", b_labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(1, 14, "序号", b_labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(2, 14, "文件名", b_labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(3, 14, "表空间", _labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(4, 14, "空间大小（MB）", _labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(5, 14, "空闲大小（MB）", _labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(6, 14, "空闲比例", _labelFormat);
//			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(7, 14, "文件状态", _labelFormat);
//			sheet.addCell(tmpLabel);
//			int row = 14;
//			// 表空间信息
//			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
//			for (int i = 0; i < tableinfo_v.size(); i++) {
//				Hashtable ht = (Hashtable) tableinfo_v.get(i);
//				String _filename = ht.get("file_name").toString();
//				String tablespace = ht.get("tablespace").toString();
//				String size = ht.get("size_mb").toString();
//				String free = ht.get("free_mb").toString();
//				String percent = ht.get("percent_free").toString();
//				String status = ht.get("status").toString();
//
//				row = row + (i);
//				tmpLabel = new Label(1, 15 + i, i + 1 + "", p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(2, 15 + i, _filename, p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(3, 15 + i, tablespace, p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(4, 15 + i, size, p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(5, 15 + i, free, p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(6, 15 + i, percent, p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(7, 15 + i, status, p_labelFormat);
//				sheet.addCell(tmpLabel);
//
//			}
//
//			if (impReport.getChart() != null) {
//				ByteArrayOutputStream baos = new ByteArrayOutputStream();
//				try {
//					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
//							.getChart(), impReport.getChart().getWidth(),
//							impReport.getChart().getHeight());
//				} catch (IOException ioe) {
//				}
//				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
//				sheet.addImage(wi);
//			}
//			wb.write();
//		} catch (Exception e) {
//			// SysLogger.error("Error in ExcelReport.createReport()",e);
//			e.printStackTrace();
//		} finally {
//			try {
//				if (wb != null)
//					wb.close();
//			} catch (Exception e) {
//			}
//		}
//	}
	
	
//	jhl end
	/**
	 * modify HONG  2010-10-27 
	 */
	public void createReport_ora(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "表空间信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "文件名", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "表空间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "空间大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 14, "空闲大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 14, "空闲比例", _labelFormat);
			sheet.addCell(tmpLabel);
			
			//HONGLI ADD START1
			tmpLabel = new Label(7, 14, "物理读", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 14, "物理块读", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 14, "物理写", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, 14, "物理块写", _labelFormat);
			sheet.addCell(tmpLabel);
			//HONGLI ADD END1
			
			//HONGLI MODIFY START1
			tmpLabel = new Label(11, 14, "文件状态", _labelFormat);
			//HONGLI MODIFY END1
			
			sheet.addCell(tmpLabel);
			int row = 14;
			// 表空间信息
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3

				row = row + (i);
				tmpLabel = new Label(1, 15 + i, i + 1 + "", p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 15 + i, _filename, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 15 + i, tablespace, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 15 + i, size, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, 15 + i, free, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, 15 + i, percent, p_labelFormat);
				sheet.addCell(tmpLabel);
				
				//HONGLI ADD START4
				tmpLabel = new Label(7, 15 + i, pyr, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(8, 15 + i, pbr, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(9, 15 + i, pyw, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(10, 15 + i, pbw, p_labelFormat);
				sheet.addCell(tmpLabel);
				//HONGLI ADD END4
				
				tmpLabel = new Label(11, 15 + i, status, p_labelFormat);
				sheet.addCell(tmpLabel);

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_db2(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String servername = (String) reportHash.get("servername");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");
			Hashtable returnhash = (Hashtable) reportHash.get("returnhash");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			// Hashtable returnhash = (Hashtable)reportHash.get("db2space");
			Enumeration dbs = returnhash.keys();
			// List retList = new ArrayList();
			int row = 15;
			int num = 0;
			List retList = new ArrayList();
			while (dbs.hasMoreElements()) {
				String obj = (String) dbs.nextElement();
				retList = (List) returnhash.get(obj);

				// row = row;
				tmpLabel = new Label(0, row - 1, "DB2数据库:" + obj + "(" + "IP:"
						+ ip + ")", _labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, row, "序号", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "库名称", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, "空间大小（MB）", _labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, "空闲大小（MB）", _labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, "空闲比例(%)", _labelFormat);
				sheet.addCell(tmpLabel);

				// String obj = (String)dbs.nextElement();
				// retList = (List)returnhash.get(obj);
				Hashtable tableinfo_v = (Hashtable) reportHash
						.get("tableinfo_v");

				String[] dbs1 = servername.split(",");

				/*
				 * for(int i=0;i<tableinfo_v.size();i++){ List list=
				 * (List)tableinfo_v.get(dbs1[i]); for(int k=0;k<list.size();k++){
				 * 
				 * row = row+1; Hashtable ht = (Hashtable)list.get(k); if(ht ==
				 * null)continue; String spacename = ""; if
				 * (ht.get("tablespace_name")!=null)spacename=ht.get("tablespace_name").toString();
				 * String size = "";
				 * if(ht.get("totalspac")!=null)size=ht.get("totalspac").toString();
				 * String free = "";
				 * if(ht.get("usablespac")!=null)free=ht.get("usablespac").toString();
				 * String percent = ""; if(ht.get("usableper")!=
				 * null)percent=ht.get("usableper").toString();
				 */
				for (int i = 0; i < retList.size(); i++) {
					row = row + 1;
					Hashtable ht = (Hashtable) retList.get(i);
					if (ht == null)
						continue;
					String spacename = "";
					if (ht.get("tablespace_name") != null)
						spacename = ht.get("tablespace_name").toString();
					String size = "";
					if (ht.get("totalspac") != null)
						size = ht.get("totalspac").toString();
					String free = "";
					if (ht.get("usablespac") != null)
						free = ht.get("usablespac").toString();
					String percent = "";
					if (ht.get("usableper") != null)
						percent = ht.get("usableper").toString();
					// row = row + (i);
					tmpLabel = new Label(0, row, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, spacename, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, size, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, free, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, percent, p_labelFormat);
					sheet.addCell(tmpLabel);
				}
				row = row + 2;
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// public void createReport_sql(String filename)
	// {
	// if(impReport.getTable()==null)
	// {
	// fileName = null;
	// return;
	// }
	// WritableWorkbook wb = null;
	// try
	// {
	// //fileName = ResourceCenter.getInstance().getSysPath() +
	// "temp\\dhcnms_report.xls";
	// //fileName = CommonAppUtil.getAppName() + "/temp/hostnms_report.xls";
	// fileName = ResourceCenter.getInstance().getSysPath() + filename;
	// wb = Workbook.createWorkbook(new File(fileName));
	//			
	// String hostname = (String)reportHash.get("dbname");
	// String ip = (String)reportHash.get("ip");
	// String newip = doip(ip);
	// WritableSheet sheet = wb.createSheet(hostname+"性能报表",0);
	// String Ping = (String)reportHash.get("Ping");
	// String starttime = (String)reportHash.get("starttime");
	// String totime = (String)reportHash.get("totime");
	//			
	// Hashtable maxping = (Hashtable)reportHash.get("ping");
	//			
	// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//						
	// WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"),
	// 12, WritableFont.BOLD, false);
	// WritableCellFormat labelFormat = new WritableCellFormat (labelFont);
	//			
	// WritableCellFormat _labelFormat = new WritableCellFormat ();
	// _labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	//			
	// WritableCellFormat p_labelFormat = new WritableCellFormat ();
	// p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	//			
	// WritableCellFormat b_labelFormat = new WritableCellFormat ();
	// b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	//			
	// Label tmpLabel = null;
	// tmpLabel = new Label(1, 0, hostname+"性能报表",labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime+" 至 "+totime);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(0, 4, "连通率",b_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// tmpLabel = new Label(1, 4, "最小连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 4, "平均连通率",_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// tmpLabel = new Label(1, 5, (String)maxping.get("pingmax"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 5,
	// (String)maxping.get("avgpingcon"),p_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// // 设置图片
	// File file = new
	// File(ResourceCenter.getInstance().getSysPath()+"/images/jfreechart/"+newip+"ConnectUtilization"+".png");
	// //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
	// //allRow = allRow+2;
	// sheet.addImage(new WritableImage(1,6,7,7,file));
	// //allRow = allRow+7;
	//		   
	// tmpLabel = new Label(0, 14, "序号",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, 14, "数据库",b_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, 14, "总大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, 14, "使用大小（MB）",_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, 14, "利用率",_labelFormat);
	// sheet.addCell(tmpLabel);
	//		    
	// int row = 14;
	// //数据库信息
	// Hashtable dbValue = (Hashtable)reportHash.get("tableinfo_v");
	// Hashtable alldatabase = new Hashtable();
	// if(dbValue.get("database") != null)
	// alldatabase = (Hashtable)dbValue.get("database");
	// Vector names = new Vector();
	// if(dbValue.get("names") != null)
	// names = (Vector)dbValue.get("names");
	//		    
	// if(alldatabase != null && alldatabase.size()>0){
	// if (names == null) names = new Vector();
	// for(int i=0;i<names.size();i++){
	// String key = (String)names.get(i);
	// if(alldatabase.get(key) == null)continue;
	// Hashtable data=(Hashtable)alldatabase.get(key);
	// String dbname = data.get("dbname").toString();
	// String size = data.get("size").toString();
	// String usedsize = "";
	// if (data.get("usedsize") != null){
	// usedsize= data.get("usedsize").toString();
	// }
	// String usedperc = "";
	// if(data.get("usedperc")!=null)
	// usedperc= data.get("usedperc").toString();
	// row = row + 1;
	// tmpLabel = new Label(0, row, i+1+"",p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(1, row, dbname,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(2, row, size,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(3, row, usedsize,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// tmpLabel = new Label(4, row, usedperc,p_labelFormat);
	// sheet.addCell(tmpLabel);
	// }
	// }
	//			
	// if(impReport.getChart()!=null){
	// ByteArrayOutputStream baos = new ByteArrayOutputStream();
	// try
	// {
	// ChartUtilities.writeChartAsPNG(baos,
	// impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight());
	// }
	// catch (IOException ioe){}
	// WritableImage wi = new WritableImage(2,10000 + 5, 8, 12,
	// baos.toByteArray());
	// sheet.addImage(wi);
	// }
	// wb.write();
	// }
	// catch(Exception e)
	// {
	// //SysLogger.error("Error in ExcelReport.createReport()",e);
	// e.printStackTrace();
	// }
	// finally
	// {
	// try
	// {
	// if(wb!= null) wb.close();
	// }
	// catch(Exception e){}
	// }
	// }

	public void createReport_syb(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "可使用大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "利用率", _labelFormat);
			sheet.addCell(tmpLabel);

			int row = 14;
			// 表空间信息
			SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
			if (sysbaseVO == null)
				sysbaseVO = new SybaseVO();
			List dbsizelist = (List) sysbaseVO.getDbInfo();
			if (dbsizelist != null && dbsizelist.size() > 0) {
				for (int i = 0; i < dbsizelist.size(); i++) {
					TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
					String dbname = tablesVO.getDb_name();
					String dbsize = tablesVO.getDb_size();
					String freesize = tablesVO.getDb_freesize();
					String userdperc = tablesVO.getDb_usedperc();
					row = row + 1;
					tmpLabel = new Label(0, 15 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 15 + i, dbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15 + i, dbsize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 15 + i, freesize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 15 + i, userdperc, p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_oraall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String dbname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(dbname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;
					Vector tableinfo_v = new Vector();
					if (report_has.get("tableinfo_v") != null)
						tableinfo_v = (Vector) report_has.get("tableinfo_v");
					// Hashtable CPU = (Hashtable)report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");

					Hashtable maxping = (Hashtable) report_has.get("ping");

					// SysLogger.info("?????????????????pingmax????????????="+maxping.get("pingmax"));
					// SysLogger.info("?????????????????avgpingcon????????????="+maxping.get("avgpingcon"));

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, dbname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 "
							+ totime);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);
					File file = null;
					try {
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/resource/image/jfreechart/"
								+ newip
								+ "ConnectUtilization" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						// allRow = allRow+2;
						sheet.addImage(new WritableImage(1, 6, 7, 7, file));
						// allRow = allRow+7;
					} catch (Exception ex) {
						ex.printStackTrace();
					}

					tmpLabel = new Label(0, 14, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "文件名", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "表空间", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 14, "空间大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 14, "空闲大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 14, "空闲比例", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 14, "文件状态", _labelFormat);
					sheet.addCell(tmpLabel);
					int row = 14;
					// 表空间信息
					// Vector tableinfo_v =
					// (Vector)reportHash.get("tableinfo_v");
					for (int i = 0; i < tableinfo_v.size(); i++) {
						Hashtable ht = (Hashtable) tableinfo_v.get(i);
						String _filename = ht.get("file_name").toString();
						String tablespace = ht.get("tablespace").toString();
						String size = ht.get("size_mb").toString();
						String free = ht.get("free_mb").toString();
						String percent = ht.get("percent_free").toString();
						String status = ht.get("status").toString();

						row = row + (i);
						tmpLabel = new Label(0, 15 + i, i + 1 + "",
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, 15 + i, _filename,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, 15 + i, tablespace,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, 15 + i, size, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, 15 + i, free, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, 15 + i, percent, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(6, 15 + i, status, p_labelFormat);
						sheet.addCell(tmpLabel);

					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_oraall2(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreport_has = new Hashtable();
			allreport_has = reportHash; 
			if (allreport_has != null && allreport_has.size() > 0) {
				Iterator keys = allreport_has.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) 
				{
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreport_has.get(ip);
					String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
					String[] sysItemch1={"共享池","大型池","缓冲区高速缓存","Java池"};
					String[] sysItem2={"aggregate_PGA_target_parameter","total_PGA_allocated","maximum_PGA_allocated"};
					String[] sysItemch2={"总计PGA目标","分配的当前PGA","分配的最大PGA"};
					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					String typename = (String) report_has.get("typename");
					String runstr = (String) report_has.get("runstr");
					String grade = (String) report_has.get("grade");
					String pingnow = (String) report_has.get("pingnow");
					String pingmin = (String) report_has.get("pingmin");
					String pingconavg = (String) report_has.get("pingconavg");
					DBVo vo = (DBVo) report_has.get("vo");
					String buffercache = "0";//缓冲区命中率 
					String dictionarycache = "0";//数据字典命中率 
					String librarycache = "0";//库缓存命中率 
					String pctmemorysorts = "0";//内存中的排序 
					String pctbufgets = "0";//最浪费内存的前10个语句占全部内存读取量的比例
					String opencurstr = "0";//打开的游标数 
					Hashtable memPerfValue = (Hashtable)report_has.get("memPerfValue"); 
					Hashtable memValue = (Hashtable)report_has.get("memValue");
					Hashtable cursors = (Hashtable)report_has.get("cursors");
					if(cursors == null){
						cursors = new Hashtable();
					}
					if(memPerfValue == null)memPerfValue = new Hashtable();
					if(memPerfValue!=null){
						if(memPerfValue.containsKey("buffercache") &&  memPerfValue.get("buffercache") != null){
							buffercache = (String)memPerfValue.get("buffercache")+"%";
						}
						if(memPerfValue.containsKey("dictionarycache") &&  memPerfValue.get("dictionarycache") != null){
							dictionarycache = (String)memPerfValue.get("dictionarycache")+"%";
						}
						if(memPerfValue.containsKey("librarycache") &&  memPerfValue.get("librarycache") != null){
							librarycache = (String)memPerfValue.get("librarycache")+"%";	
						}		
						if(memPerfValue.containsKey("pctmemorysorts") &&  memPerfValue.get("pctmemorysorts") != null){
							pctmemorysorts = (String)memPerfValue.get("pctmemorysorts")+"%";
						}
						if(memPerfValue.containsKey("pctbufgets") &&  memPerfValue.get("pctbufgets") != null){
							pctbufgets = (String)memPerfValue.get("pctbufgets")+"%";
						}
						if(cursors.containsKey("opencur") &&  cursors.get("opencur") != null){
							opencurstr = (String)cursors.get("opencur");
						}
					}

					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "综合报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					
					//数据库ip信息
					tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "IP", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "类型", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, vo.getDbName(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, ip,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, typename,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, runstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5, grade,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					
					
					//连通率
					tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 8, pingnow+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 8, pingmin+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 8, pingconavg+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 9, 7, 7, file));
					// allRow = allRow+7;
					int row = 17;
					
//					数据库信息
					tmpLabel = new Label(0, row, "连 接 信 息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "缓冲区命中率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "数据字典命中率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "库缓存命中率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "内存中的排序", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "最浪费内存的前10个语句占全部内存读取量的比例", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "打开的游标数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, buffercache,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, dictionarycache,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, librarycache,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, pctmemorysorts,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, pctbufgets,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, opencurstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					

					
//					添加内存配置信息等
					row = row+2;
					tmpLabel = new Label(0, row, "内存配置信息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row,sysItemch2[0], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row,sysItemch2[1], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row,sysItemch2[2], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row,sysItemch1[0], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row,sysItemch1[1], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row,sysItemch1[2], b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row,sysItemch1[3], b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, memValue.get(sysItem2[0])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, memValue.get(sysItem2[1])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, memValue.get(sysItem2[2])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, memValue.get(sysItem1[0])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, memValue.get(sysItem1[1])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, memValue.get(sysItem1[2])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, memValue.get(sysItem1[3])+"MB",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//表空间信息
					row = row + 2;
					tmpLabel = new Label(0, row, "表空间信息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "文件名", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "表空间", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "空间大小（MB）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "空闲大小（MB）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "空闲比例", b_labelFormat);
					sheet.addCell(tmpLabel);
					
					//HONGLI ADD START1
					tmpLabel = new Label(6, row, "物理读", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, "物理块读", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, "物理写", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row, "物理块写", b_labelFormat);
					sheet.addCell(tmpLabel);
					//HONGLI ADD END1
					
					//HONGLI MODIFY START1
					tmpLabel = new Label(10, row, "文件状态", b_labelFormat);
					//HONGLI MODIFY END1
					
					sheet.addCell(tmpLabel);
				
					// 表空间信息
					row = row + 2;
					Vector tableinfo_v = (Vector) report_has.get("tableinfo_v");
					
					//HONGLI ADD START2
					Hashtable dbio = (Hashtable)report_has.get("dbio");
					//HONGLI ADD END2
					
					for (int i = 0; i < tableinfo_v.size(); i++) {
						Hashtable ht = (Hashtable) tableinfo_v.get(i);
						String _filename = ht.get("file_name").toString();
						String tablespace = ht.get("tablespace").toString();
						String size = ht.get("size_mb").toString();
						String free = ht.get("free_mb").toString();
						String percent = ht.get("percent_free").toString();
						String status = ht.get("status").toString();
						
						//HONGLI ADD START3
						String pyr = "";
						String pbr = "";
						String pyw = "";
						String pbw = "";
						if(dbio.containsKey(_filename)){
							Hashtable iodetail = (Hashtable)dbio.get(_filename);
							if(iodetail != null && iodetail.size()>0){
								pyr = (String)iodetail.get("pyr");
								pbr = (String)iodetail.get("pbr");
								pyw = (String)iodetail.get("pyw");
								pbw = (String)iodetail.get("pbw");
							}
						}
						//HONGLI ADD END3

						
						tmpLabel = new Label(0, row, String.valueOf(i+1), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, _filename, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, tablespace, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, size, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, free, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, percent, p_labelFormat);
						sheet.addCell(tmpLabel);
						
						//HONGLI ADD START4
						tmpLabel = new Label(6, row, pyr, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(7, row, pbr, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(8, row, pyw, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(9, row, pbw, p_labelFormat);
						sheet.addCell(tmpLabel);
						//HONGLI ADD END4
						
						tmpLabel = new Label(10, row, status, p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;

					}
//					事 件 汇 报 
					row = row+2;
					tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//增加事件列表
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}

					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_db2all(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String dbname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(dbname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;

					// Hashtable CPU = (Hashtable)report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");

					// Calendar colTime = (Calendar)report_has.get("time");
					// Date cc = colTime.getTime();
					// Hashtable Memory = (Hashtable)report_has.get("Memory");
					// Hashtable Disk = (Hashtable)report_has.get("Disk");

					// Hashtable memMaxHash =
					// (Hashtable)report_has.get("memmaxhash");
					// Hashtable memAvgHash =
					// (Hashtable)report_has.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, dbname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 "
							+ totime);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);
					File file = null;
					try {
						// 设置图片
						file = new File(ResourceCenter.getInstance().getSysPath()
								+ "/resource/image/jfreechart/" + newip
								+ "ConnectUtilization" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						// allRow = allRow+2;
						sheet.addImage(new WritableImage(1, 6, 7, 7, file));
						// allRow = allRow+7;
					} catch (Exception ex) {
						ex.printStackTrace();
					}

					Hashtable returnhash = new Hashtable();
					if (report_has.get("db2space") != null)
						returnhash = (Hashtable) report_has.get("db2space");
					Enumeration dbs = returnhash.keys();
					List retList = new ArrayList();
					int row = 14;
					while (dbs.hasMoreElements()) {
						row = row + 1;
						tmpLabel = new Label(0, row, "序号", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, "库名称", b_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, "空间大小（MB）", _labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, "空闲大小（MB）", _labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, "空闲比例(%)", _labelFormat);
						sheet.addCell(tmpLabel);

						String obj = (String) dbs.nextElement();
						retList = (List) returnhash.get(obj);

						for (int i = 0; i < retList.size(); i++) {
							row = row + 1;
							Hashtable ht = (Hashtable) retList.get(i);
							if (ht == null)
								continue;
							String spacename = "";
							if (ht.get("tablespace_name") != null)
								spacename = ht.get("tablespace_name")
										.toString();
							String size = "";
							if (ht.get("totalspac") != null)
								size = ht.get("totalspac").toString();
							String free = "";
							if (ht.get("usablespac") != null)
								free = ht.get("usablespac").toString();
							String percent = "";
							if (ht.get("usableper") != null)
								percent = ht.get("usableper").toString();
							row = row + (i);
							tmpLabel = new Label(0, row, i + 1 + "",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, spacename,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, size, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, free, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, percent, p_labelFormat);
							sheet.addCell(tmpLabel);

						}
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_db2all2(String filename) {  
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					Hashtable mems = (Hashtable)report_has.get("mems");//内存信息
					Hashtable sysValue = (Hashtable)report_has.get("sysValue");//系统信息
					String typename = (String) report_has.get("typename");
					String runstr = (String) report_has.get("runstr");
					String grade = (String) report_has.get("grade");
					String pingnow = (String) report_has.get("pingnow");
					String pingmin = (String) report_has.get("pingmin");
					String pingconavg = (String) report_has.get("pingconavg");
					DBVo vo = (DBVo) report_has.get("vo");
					Hashtable conn = (Hashtable)report_has.get("conn");//连接信息
					if(conn == null)conn = new Hashtable();	
					Hashtable poolInfo = (Hashtable)report_has.get("poolInfo");//缓存信息
					if(poolInfo == null)poolInfo = new Hashtable();	
					Hashtable log = (Hashtable)report_has.get("log");//日志
					if(log == null)log = new Hashtable();	
					Hashtable spaceInfo = (Hashtable)report_has.get("spaceInfo");//表空间
					if(spaceInfo == null)spaceInfo = new Hashtable();	
					String[] sysDbStatus={"活动","正在静默","静默模式","前滚"};
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
					
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					
					//数据库ip信息
					tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "IP", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "类型", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, vo.getDbName(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, ip,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, typename,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, runstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5, grade,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					
					
					//连通率
					tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 8, pingnow+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 8, pingmin+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 8, pingconavg+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 9, 7, 7, file));
					// allRow = allRow+7;
					
//					表 空 间信息
					tmpLabel = new Label(0, 16, "表空间", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 17, " ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 17, "表空间", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 17, "空间大小（MB） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 17, "空闲大小（MB）  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 17, "空闲比例 （%）", b_labelFormat);
					sheet.addCell(tmpLabel);
					List toolsdb = (ArrayList)spaceInfo.get("toolsdb");
					int row = 18;
					if(toolsdb != null && toolsdb.size()>0){

						for(int i=0;i<toolsdb.size();i++){
							Hashtable tempSpace = new Hashtable();
							tempSpace = (Hashtable)toolsdb.get(i);
							 String tablespace_name = (String)tempSpace.get("tablespace_name");
						 	String totalspac = (String)tempSpace.get("totalspac");
						 	String usablespac = (String)tempSpace.get("usablespac");
						 	String usableper = (String)tempSpace.get("usableper");
						 	
						 	if(usableper == null || "0".equals(totalspac.trim())){
						 		usableper = "100";
						 	}
							tmpLabel = new Label(0, row, (i+1)+"",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tablespace_name,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, totalspac,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, usablespac,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, usableper,
									p_labelFormat);
							sheet.addCell(tmpLabel);

							row++;
						}
					}
					

					row = row+2;
//					连 接 信 息
					tmpLabel = new Label(0, row, "连 接 信 息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row,"", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row,"数据库名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row,"数据库路径", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row,"数据库状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row,"最后备份时间 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row,"连接总数（个） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row,"最大连接数（个） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row,"当前连接数（个） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row,"失败的SQL数（个） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row,"成功的SQL数（个）", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					Enumeration dbs = conn.keys();
					Hashtable<String,Object> allhash = new Hashtable();
					List poolList = new ArrayList();
					while(dbs.hasMoreElements()){								
						String obj = (String)dbs.nextElement();
						List connList = (List)conn.get(obj);

					for(int i=0;i<connList.size();i++){
						Hashtable ht = (Hashtable)connList.get(i);
						String db_name = ht.get("db_name").toString();
						String db_path = ht.get("db_path").toString();
						String db_status = ht.get("db_status").toString();
							String sqlm_elm_last_backup = ht.get("sqlm_elm_last_backup").toString();
							String total_cons = ht.get("total_cons").toString();
							String connections_top = ht.get("connections_top").toString();
							String appls_cur_cons = ht.get("appls_cur_cons").toString();
							String failedsql = ht.get("failedsql").toString();
							String commitsql = ht.get("commitsql").toString();
							
							tmpLabel = new Label(0, row, (i+1)+"",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, db_name,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, db_path,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, sysDbStatus[Integer.parseInt(db_status)],
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, sqlm_elm_last_backup,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, total_cons,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, connections_top,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, appls_cur_cons,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(8, row, failedsql,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(9, row, commitsql,
									p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					
					
					//缓 存 信 息
					row = row + 2;
					tmpLabel = new Label(0, row, "缓 存 信 息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "缓冲池名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "数据命中率 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "索引读取命中率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "缓存读取命中率 ", b_labelFormat);
					sheet.addCell(tmpLabel); 
					tmpLabel = new Label(5, row, "异步读取比率 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "直接读写数据库比率 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					Enumeration dbs2 = poolInfo.keys();
					Hashtable<String,Object> allhash2 = new Hashtable();
					List poolList2 = new ArrayList();
					while(dbs2.hasMoreElements()){								
						String obj = (String)dbs2.nextElement();
						allhash = (Hashtable)poolInfo.get(obj);
						poolList = (List)allhash.get("poolValue");
						List lockList = (List)allhash.get("lockValue");
						List readList = (List)allhash.get("readValue");
							List writeList = (List)allhash.get("writeValue");
						for(int i=0;i<poolList.size();i++){
							Hashtable ht = (Hashtable)poolList.get(i);
							String bp_name = ht.get("bp_name").toString();
							String data_hit_ratio = ht.get("data_hit_ratio").toString();
							String index_hit_ratio = ht.get("index_hit_ratio").toString();
							String BP_hit_ratio = ht.get("BP_hit_ratio").toString();
							String Async_read_pct = ht.get("Async_read_pct").toString();
							String Direct_RW_Ratio = ht.get("Direct_RW_Ratio").toString();
					
							tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, bp_name, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, data_hit_ratio, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, index_hit_ratio, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, BP_hit_ratio, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, Async_read_pct, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, Direct_RW_Ratio, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					
//					锁 信 息
					row = row + 2;
					tmpLabel = new Label(0, row, "锁 信 息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "读行数  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "查询行数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "锁等待数  ", b_labelFormat);
					sheet.addCell(tmpLabel); 
					tmpLabel = new Label(5, row, "锁等待时间  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "死锁数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, "升级锁  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, "总排序  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row, "总排序时间   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					Enumeration dbs3 = poolInfo.keys();
					Hashtable<String,Object> allhash3 = new Hashtable();
					List poolList3 = new ArrayList();
					while(dbs3.hasMoreElements()){								
						String obj = (String)dbs3.nextElement();
						allhash3 = (Hashtable)poolInfo.get(obj);
						poolList3 = (List)allhash3.get("poolValue");
						//System.out.println("poolList size === "+poolList.size());
						List lockList = (List)allhash3.get("lockValue");
						List readList = (List)allhash3.get("readValue");
							List writeList = (List)allhash3.get("writeValue");
						for(int i=0;i<lockList.size();i++){
							Hashtable ht = (Hashtable)lockList.get(i);
							String db_name = ht.get("db_name").toString();
							String rows_read = ht.get("rows_read").toString();
							String rows_selected = ht.get("rows_selected").toString();
							String lock_waits = ht.get("lock_waits").toString();
							String lock_wait_time = ht.get("lock_wait_time").toString();
							String deadlocks = ht.get("deadlocks").toString();
							String lock_escals = ht.get("lock_escals").toString();
							String total_sorts = ht.get("total_sorts").toString();
							String total_sort_time = ht.get("total_sort_time").toString();
							tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, db_name, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, rows_read, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, rows_selected, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, lock_waits, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, lock_wait_time, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, deadlocks, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, lock_escals, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(8, row, total_sorts, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(9, row, total_sort_time, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					
//					日志 信 息
					row = row + 2;
					tmpLabel = new Label(0, row, "日 志 信 息", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "数据库名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "已使用大小(Mb)   ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "空闲大小(Mb)  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "使用率(%)  ", b_labelFormat);
					sheet.addCell(tmpLabel); 
					tmpLabel = new Label(5, row, "最大使用大小(Mb) ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "最大使用大小/秒  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					Enumeration dbs4 =  log.keys();       
					Hashtable<String,Object> allhash4 = new Hashtable();
					List poolList4 = new ArrayList();
					while(dbs4.hasMoreElements()){								
						String obj = (String)dbs4.nextElement();
						List logList = (List)log.get(obj);
						for(int i=0;i<logList.size();i++){
							Hashtable ht = (Hashtable)logList.get(i);
							String logused = ht.get("logused").toString();
							String logspacefree = ht.get("logspacefree").toString();
							String pctused = ht.get("pctused").toString();
							String maxlogused = ht.get("maxlogused").toString();
							String maxsecused = ht.get("maxsecused").toString();
							tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, obj, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, logused, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, logspacefree, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, pctused, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, maxlogused, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, maxsecused, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					

//					读频率最高的10张表 
					row = row+2;
					tmpLabel = new Label(0, row, "读频率最高的10张表 ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "模式  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "表名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "读行数", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "写行数 ", b_labelFormat);
					sheet.addCell(tmpLabel); 
					tmpLabel = new Label(5, row, "溢出访问 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "页重组数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					Enumeration dbs5 = poolInfo.keys();
					Hashtable<String,Object> allhash5 = new Hashtable();
					List poolList5 = new ArrayList();
					String obj = null;
					Hashtable allhash6 = null;  
					List lockList = null;
					List readList = null;
					List writeList = null;
					while(dbs5.hasMoreElements()){								
						obj = (String)dbs5.nextElement();
						allhash6 = (Hashtable)poolInfo.get(obj); 
						poolList = (List)allhash6.get("poolValue");
						//System.out.println("poolList size === "+poolList.size());
						lockList = (List)allhash6.get("lockValue");
						readList = (List)allhash6.get("readValue");
						    writeList = (List)allhash6.get("writeValue");
					}
					if(readList != null && readList.size()>0){
						for(int i=0;i<readList.size();i++){
							Hashtable ht = (Hashtable)readList.get(i);
							String tbschema = ht.get("tbschema").toString();
							String tbname = ht.get("tbname").toString();
							String rows_read = ht.get("rows_read").toString();
							String rows_written = ht.get("rows_written").toString();
							String overflow_accesses = ht.get("overflow_accesses").toString();
							String page_reorgs = ht.get("page_reorgs").toString();
							tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tbschema, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, tbname, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, rows_read, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, rows_written, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, overflow_accesses, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, page_reorgs, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					

//					写频率最高的10张表 
					row = row+2;
					tmpLabel = new Label(0, row, "写频率最高的10张表 ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "模式  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "表名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "读行数", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "写行数 ", b_labelFormat);
					sheet.addCell(tmpLabel); 
					tmpLabel = new Label(5, row, "溢出访问 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, "页重组数 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					if(writeList != null && writeList.size()>0){
						for(int i=0;i<writeList.size();i++){
							Hashtable ht = (Hashtable)writeList.get(i);
							String tbschema = ht.get("tbschema").toString();
							String tbname = ht.get("tbname").toString();
							String rows_read = ht.get("rows_read").toString();
							String rows_written = ht.get("rows_written").toString();
							String overflow_accesses = ht.get("overflow_accesses").toString();
							String page_reorgs = ht.get("page_reorgs").toString();
							tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, tbschema, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, tbname, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, rows_read, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, rows_written, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, overflow_accesses, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, page_reorgs, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
					}
					
					
					//事 件 汇 报 
					row = row+2;
					tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//增加事件列表
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}

					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_sqlall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String dbname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(dbname + "性能日报表",
							sheetNum);
					sheetNum = sheetNum + 1;
					Hashtable dbValue = new Hashtable();
					// Vector tableinfo_v = new Vector();
					if (report_has.get("dbValue") != null)
						dbValue = (Hashtable) report_has.get("dbValue");
					// Hashtable CPU = (Hashtable)report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");

					// Calendar colTime = (Calendar)report_has.get("time");
					// Date cc = colTime.getTime();
					// Hashtable Memory = (Hashtable)report_has.get("Memory");
					// Hashtable Disk = (Hashtable)report_has.get("Disk");

					// Hashtable memMaxHash =
					// (Hashtable)report_has.get("memmaxhash");
					// Hashtable memAvgHash =
					// (Hashtable)report_has.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(
							labelFont);
					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, dbname + "性能日报表", labelFormat);
					sheet.addCell(tmpLabel);
					String reporttime = (String) report_has.get("reporttime");
					if (reporttime == null || reporttime.trim().length() == 0) {
						tmpLabel = new Label(0, 1, "报表日期:"
								+ impReport.getTimeStamp());
					} else {
						tmpLabel = new Label(0, 1, "报表日期:" + reporttime);
					}

					sheet.addCell(tmpLabel);
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 "
							+ totime);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
					sheet.addCell(tmpLabel);

					tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, (String) maxping
							.get("avgpingcon"), p_labelFormat);
					sheet.addCell(tmpLabel);
					File file = null;
					try {
						// 设置图片
						file = new File(ResourceCenter.getInstance()
								.getSysPath()
								+ "/images/jfreechart/"
								+ newip
								+ "ConnectUtilization" + ".png");
						// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
						// allRow = allRow+2;
						sheet.addImage(new WritableImage(1, 6, 7, 7, file));
						// allRow = allRow+7;
					} catch (Exception ex) {
						ex.printStackTrace();
					}

					// 表空间信息
					tmpLabel = new Label(0, 14, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 14, "数据库", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 14, "总大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 14, "使用大小（MB）", _labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 14, "利用率", _labelFormat);
					sheet.addCell(tmpLabel);

					int row = 14;
					// 数据库信息
					// Hashtable dbValue = (Hashtable)reportHash.get("dbValue");
					Hashtable alldatabase = new Hashtable();
					if (reportHash.get("database") != null)
						alldatabase = (Hashtable) dbValue.get("database");
					Vector names = new Vector();
					if (dbValue.get("names") != null)
						names = (Vector) dbValue.get("names");

					if (alldatabase != null && alldatabase.size() > 0) {
						if (names == null)
							names = new Vector();
						for (int i = 0; i < names.size(); i++) {
							String key = (String) names.get(i);
							if (alldatabase.get(key) == null)
								continue;
							Hashtable data = (Hashtable) alldatabase.get(key);
							String _dbname = data.get("dbname").toString();
							String size = data.get("size").toString();
							String usedsize = "";
							if (data.get("usedsize") != null) {
								usedsize = data.get("usedsize").toString();
							}
							String usedperc = "";
							if (data.get("usedperc") != null)
								usedperc = data.get("usedperc").toString();
							row = row + 1;
							tmpLabel = new Label(0, row, i + 1 + "",
									p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, _dbname, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, size, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, usedperc,
									p_labelFormat);
							sheet.addCell(tmpLabel);
						}
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_sqlall2(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			Hashtable allreporthash = new Hashtable();
			allreporthash = reportHash;
			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				int sheetNum = 0;
				while (keys.hasNext()) {
					ip = keys.next().toString();
					String newip = doip(ip);
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("dbname");
					WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
					String Ping = (String) report_has.get("Ping");
					String starttime = (String) report_has.get("starttime");
					String totime = (String) report_has.get("totime");
					Hashtable mems = (Hashtable)report_has.get("mems");//内存信息
					Hashtable sysValue = (Hashtable)report_has.get("sysValue");//系统信息
					String typename = (String) report_has.get("typename");
					String runstr = (String) report_has.get("runstr");
					String grade = (String) report_has.get("grade");
					String pingnow = (String) report_has.get("pingnow");
					String pingmin = (String) report_has.get("pingmin");
					String pingconavg = (String) report_has.get("pingconavg");
					DBVo vo = (DBVo) report_has.get("vo");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

					WritableFont labelFont = new WritableFont(WritableFont
							.createFont("宋体"), 12, WritableFont.BOLD, false);
					WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

					WritableCellFormat _labelFormat = new WritableCellFormat();
					_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

					WritableCellFormat p_labelFormat = new WritableCellFormat();
					p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

					WritableCellFormat b_labelFormat = new WritableCellFormat();
					b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

					Label tmpLabel = null;
					tmpLabel = new Label(1, 0, hostname + "综合报表", labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
					sheet.addCell(tmpLabel);
					
					//数据库ip信息
					tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 4, "IP", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 4, "类型", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 5, vo.getDbName(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5, ip,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5, typename,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5, runstr,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5, grade,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					
					
					//连通率
					tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 8, pingnow+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 8, pingmin+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 8, pingconavg+"%",
							p_labelFormat);
					sheet.addCell(tmpLabel);

					// 设置图片
					File file = new File(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip
							+ "ConnectUtilization" + ".png");
					// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
					// allRow = allRow+2;
					sheet.addImage(new WritableImage(1, 9, 7, 7, file));
					// allRow = allRow+7;
					
//					数据库信息
					tmpLabel = new Label(0, 16, "内存总数", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 16, "内存优化", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 16, "连接内存", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 16, "SQL缓冲池", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 16, "锁定内存", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 17, (String)mems.get("totalMemory"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 17, (String)mems.get("optMemory"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 17, (String)mems.get("conMemory"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 17, (String)mems.get("sqlMem"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 17, (String)mems.get("lockMem"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					

					
//					系统信息等
					tmpLabel = new Label(0, 19,"补丁包", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 19,"集成安全性模式", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 19,"单用户模式", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 19,"在故障转移群集中配置服务器实例", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(0, 20, (String)sysValue.get("productlevel"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 20, (String)sysValue.get("IsIntegratedSecurityOnly"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 20, (String)sysValue.get("IsSingleUser"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 20, (String)sysValue.get("IsClustered"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//参数指标信息
					tmpLabel = new Label(0, 22, "序号", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 22, "数据库", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 22, "总大小(MB)", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 22, "使用大小(MB)", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 22, "利用率(%)", b_labelFormat);
					sheet.addCell(tmpLabel);
					
					int row = 22;
					// 数据库信息
					Hashtable dbValue = (Hashtable) report_has.get("tableinfo_v");
					Hashtable alldatabase = new Hashtable();
					if (dbValue.get("database") != null)
						alldatabase = (Hashtable) dbValue.get("database");
					Vector names = new Vector();
					if (dbValue.get("names") != null)
						names = (Vector) dbValue.get("names");

					if (alldatabase != null && alldatabase.size() > 0) {
						if (names == null)
							names = new Vector();
						for (int i = 0; i < names.size(); i++) {
							String key = (String) names.get(i);
							if (alldatabase.get(key) == null)
								continue;
							Hashtable data = (Hashtable) alldatabase.get(key);
							String dbname = data.get("dbname").toString();
							String size = data.get("size").toString();
							String usedsize = "";
							if (data.get("usedsize") != null) {
								usedsize = data.get("usedsize").toString();
							}
							String usedperc = "";
							if (data.get("usedperc") != null)
								usedperc = data.get("usedperc").toString();
							row = row + 1;
							tmpLabel = new Label(0, row, i + "", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, dbname, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, size, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, usedsize, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, usedperc, p_labelFormat);
							sheet.addCell(tmpLabel);
						}
					}
					//事 件 汇 报 
					row = row+2;
					tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, (String)report_has.get("downnum"),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, report_has.get("count")+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					
					//增加事件列表
					WritableCellFormat red_labelFormat = new WritableCellFormat();
					WritableCellFormat orange_labelFormat = new WritableCellFormat();
					WritableCellFormat yellow_labelFormat = new WritableCellFormat();
					
					
					red_labelFormat.setBackground(jxl.format.Colour.RED);
					orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
					yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
					
					row = row+2;
					tmpLabel = new Label(0, row, "事件列表", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "登记人", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					int index = 0;
				  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
				  	List list = (ArrayList)report_has.get("list");
				  	if(list != null && list.size()>0){
					  	for(int i=0;i<list.size();i++){
					 	index++;
					  	EventList eventlist = (EventList)list.get(i);
					  	Date cc = eventlist.getRecordtime().getTime();
					  	Integer eventid = eventlist.getId();
					  	String eventlocation = eventlist.getEventlocation();
					  	String content = eventlist.getContent();
					  	String level = String.valueOf(eventlist.getLevel1());
					  	String status = String.valueOf(eventlist.getManagesign());
					  	String s = status;
						String showlevel = null;
					  	String act="处理报告";
					  	if("1".equals(level)){
					  		showlevel="普通事件";
					  	}
					  	if("2".equals(level)){
					  		showlevel="严重事件";
					  	}else{
						    showlevel="紧急告警";
						}
					   	  	if("0".equals(status)){
					  		status = "未处理";
					  	}
					  	if("1".equals(status)){
					  		status = "处理中";  	
					  	}
					  	if("2".equals(status)){
					  	  	status = "处理完成";
					  	}
					  	String rptman = eventlist.getReportman();
					  	String rtime1 = _sdf.format(cc);


					  	tmpLabel = new Label(0, row, String.valueOf(index),
								p_labelFormat);
						sheet.addCell(tmpLabel);
					  	if("3".equals(level)){
							tmpLabel = new Label(1, row, showlevel,
									red_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else if("2".equals(level)){
					  		tmpLabel = new Label(1, row, showlevel,
					  				orange_labelFormat);
							sheet.addCell(tmpLabel);
					  	}else {
					  		tmpLabel = new Label(1, row, showlevel,
					  				yellow_labelFormat);
							sheet.addCell(tmpLabel);
					  	}
					  	tmpLabel = new Label(2, row, content,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, rtime1,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, rptman,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, status,
								p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
					  	}
				  	}

					if (impReport.getChart() != null) {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						try {
							ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
									.getChart(), impReport.getChart().getWidth(),
									impReport.getChart().getHeight());
						} catch (IOException ioe) {
						}
						WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
						sheet.addImage(wi);
					}
				}
				wb.write();
			}

		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// zhushouzhi综合报表word打印形式
	public void createReport_networkDoc(String file) throws DocumentException,
			IOException {
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String Ping = (String) reportHash.get("Ping");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Vector netifVector = (Vector) reportHash.get("netifVector");
		Hashtable portconfigHash = (Hashtable) reportHash.get("portconfigHash");
		List reportports = (List) reportHash.get("reportports");
		Vector iprouterVector = (Vector) reportHash.get("iprouterVector");

		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");
		String hostname = (String) reportHash.get("equipname");
		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)", "当前状态",
				"出口流速", "入口流速" };
		String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型", "路由协议",
				"子网掩码" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization",
				"INodeUsedSize", "INodeUtilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用", "i-node利用率" };
		String[] iproutertype = { "", "", "", "direct(3)", "indirect(4)" };
		String[] iprouterproto = { "", "other(1)", "local(2)", "netmgmt(3)",
				"icmp(4)", "egp(5)", "ggp(6)", "hello(7)", "rip(8)",
				"is-is(9)", "es-is(10)", "ciscoIgrp(11)", "bbnSpfIgp(12)",
				"ospf(13)", "bgp(14)" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);

		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据采集时间:" + sdf.format(cc);

		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		// 设置 Table 表格
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax") + "%");
		aTable.addCell((String) maxping.get("avgpingcon") + "%");
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);
		// document.add(new Paragraph("\n"));
		// document.close();
		Table aTable1 = new Table(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidth(100); // 占页面宽度 90%
		aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable1.setAutoFillEmptyCells(true); // 自动填满
		aTable1.setBorderWidth(1); // 边框宽度
		aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable1.setSpacing(0);// 即单元格之间的间距
		aTable1.setBorder(2);// 边框
		aTable1.endHeaders();

		aTable1.addCell("CPU利用率");
		aTable1.addCell("当前利用率");
		aTable1.addCell("最大利用率");
		aTable1.addCell("平均利用率");
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell((String) CPU.get("cpu") + "%");
		aTable1.addCell((String) CPU.get("cpumax") + "%");
		aTable1.addCell((String) CPU.get("avgcpu") + "%");

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.MIDDLE);// 设置图片显示位置
		document.add(aTable1);
		document.add(img1);

		if (netifVector != null && netifVector.size() > 0) {
			Table aTable2 = new Table(8);
			float[] width2 = { 300f, 220f, 220f, 180f, 300f, 180f, 220f, 220f };
			aTable2.setWidths(width2);
			aTable2.setWidth(100); // 占页面宽度 100%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			aTable2.endHeaders();
			aTable2.addCell("端口使用情况");
			// 端口的标题
			// allRow = allRow;
			for (int i = 0; i < netIfItemch.length; i++) {
				Cell cell = new Cell(netIfItemch[i]);
				aTable2.addCell(cell);
			}
			// 写端口
			for (int i = 0; i < netifVector.size(); i++) {
				aTable2.addCell("");
				String[] strs = (String[]) netifVector.get(i);
				String ifname = strs[1];
				String index = strs[0];
				for (int j = 0; j < strs.length; j++) {

					if (j == 1) {

						String linkuse = "";
						if (portconfigHash != null && portconfigHash.size() > 0) {
							if (portconfigHash.get(ip + ":" + index) != null)
								linkuse = (String) portconfigHash.get(ip + ":"
										+ index);
						}

						Cell cell1 = new Cell(strs[j]);
						aTable2.addCell(cell1);
						Cell cell2 = new Cell(linkuse);
						aTable2.addCell(cell2);

					} else if (j > 1) {
						Cell cell3 = new Cell(strs[j]);
						aTable2.addCell(cell3);

					} else {
						Cell cell4 = new Cell(strs[j]);
						aTable2.addCell(cell4);
					}
				}// end 写端口

			}
			document.add(aTable2);
		}
		if (iprouterVector != null && iprouterVector.size() > 0) {
			Table aTable3 = new Table(7);
			float[] width2 = { 240f, 200f, 300f, 300f, 220f, 180f, 300f };
			aTable3.setWidths(width2);
			aTable3.setWidth(100); // 占页面宽度 100%
			aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable3.setAutoFillEmptyCells(true); // 自动填满
			aTable3.setBorderWidth(1); // 边框宽度
			aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable3.setSpacing(0);// 即单元格之间的间距
			aTable3.setBorder(2);// 边框
			aTable3.endHeaders();
			aTable3.addCell("路由表信息");
			// 标题
			// allRow = allRow+1;
			for (int i = 0; i < ipRouterItemch.length; i++) {
				Cell cell = new Cell(ipRouterItemch[i]);
				aTable3.addCell(cell);

			}

			// 写路由表信息

			for (int i = 0; i < iprouterVector.size(); i++) {
				aTable3.addCell("");
				/* allRow = allRow + 1; */

				IpRouter iprouter = (IpRouter) iprouterVector.get(i);
				Cell cell = new Cell(iprouter.getIfindex());
				aTable3.addCell(cell);
				Cell cell1 = new Cell(iprouter.getDest());
				aTable3.addCell(cell1);
				Cell cell2 = new Cell(iprouter.getNexthop());
				aTable3.addCell(cell2);
				Cell cell3 = new Cell(iproutertype[Integer.parseInt(iprouter
						.getType().longValue()
						+ "")]);
				aTable3.addCell(cell3);
				Cell cell4 = new Cell(iprouterproto[Integer.parseInt(iprouter
						.getProto().longValue()
						+ "")]);
				aTable3.addCell(cell4);
				Cell cell5 = new Cell(iprouter.getMask());
				aTable3.addCell(cell5);
			}
			document.add(aTable3);
		}
		// 路由表doc添加成功

		if (reportports != null && reportports.size() > 0) {
			// 显示该端口的流速图形

			// aTable4.addCell("路由表信息");
			for (int i = 0; i < reportports.size(); i++) {
				Table aTable4 = new Table(2);
				float[] width2 = { 300f, 300f };
				aTable4.setWidths(width2);
				aTable4.setWidth(100); // 占页面宽度 100%
				aTable4.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable4.setAutoFillEmptyCells(true); // 自动填满
				aTable4.setBorderWidth(1); // 边框宽度
				aTable4.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable4.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable4.setSpacing(0);// 即单元格之间的间距
				aTable4.setBorder(2);// 边框
				aTable4.endHeaders();
				// SysLogger.info(reportports.get(i).getClass()+"=============================================");
				com.afunms.config.model.Portconfig portconfig = (com.afunms.config.model.Portconfig) reportports
						.get(i);
				/*
				 * tmpLabel = new Label(0, allRow, "第" +
				 * portconfig.getPortindex() + "(" + portconfig.getName() +
				 * ")端口", b_labelFormat);
				 * 
				 * sheet.addCell(tmpLabel);
				 */
				Cell cell = new Cell("第" + portconfig.getPortindex() + "("
						+ portconfig.getName() + ")端口");
				aTable4.addCell(cell);
				if (portconfig.getLinkuse() == null)
					portconfig.setLinkuse("");
				Cell cell1 = new Cell("应用:" + portconfig.getLinkuse());
				aTable4.addCell(cell1);
				document.add(aTable4);
				// 设置图片
				Image img2 = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ portconfig.getPortindex() + "ifspeed_day.png");
				img2.setAbsolutePosition(0, 0);
				img2.setAlignment(Image.LEFT);// 设置图片显示位置
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				img2.scalePercent(67);
				document.add(img2);
			}
		}// 出口流速图片
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			/*
			 * WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
			 * .toByteArray());
			 */
			Image img2 = Image.getInstance(baos.toByteArray());
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			img.scalePercent(67);
			document.add(img2);
		}

		document.close();
	}

	// zhushouzhi之上

	// zhushouzhi-------------------------star
	public void createReport_hostNewDoc(String file) throws DocumentException,
			IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		if (CPU == null)
			CPU = new Hashtable();
		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "0.0%";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		int cpuvalue = ((Integer) reportHash.get("cpuvalue")).intValue();

		int memvalue = ((Integer) reportHash.get("memvalue")).intValue();
		int diskvalue = ((Integer) reportHash.get("diskvalue")).intValue();
		int pingvalue = ((Integer) reportHash.get("pingvalue")).intValue();

		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "平均CPU" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(avgcpu, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最大CPU", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(cpumax, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String avgvalue = "0.0%";
		cell = new Cell(new Phrase("\n" + "平均?却胬?用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (memAvgHash.get("PhysicalMemory") != null) {

			avgvalue = (String) memAvgHash.get("PhysicalMemory");
			cell = new Cell(new Phrase(avgvalue, contextFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		} else {
			cell = new Cell(new Phrase(avgvalue, contextFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		}
		cell = new Cell(new Phrase("最大内存利用率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String value = "0.0%";
		if (memMaxHash.get("PhysicalMemory") != null) {

			value = (String) memMaxHash.get("PhysicalMemory");
			cell = new Cell(new Phrase(value, contextFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		} else {
			cell = new Cell(new Phrase(value, contextFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		}

		// end 写内存

		// end 写内存 }
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "CPU事件" + cpuvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "内存事件" + memvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + pingvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "磁盘事件" + diskvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String strcpu = "";
		String strmem = "";
		String strping = "";
		String strdisk = "";
		if (cpuvalue > 0) {
			strcpu = "    2   在该段时间内，设备发生" + cpuvalue + "次CPU越值时间，需要管理员确定该事件。"
					+ "\n" + "\n";
		} else {
			strcpu = "    2   在该段时间内，CPU运行正常，未出现利用率过大情况。" + " \n" + "\n";
		}
		if (memvalue > 0) {
			strmem = "    3   发生" + memvalue + "次内存超越阀值事件，提醒管理员注意设备内存情况。"
					+ "\n" + "\n";
		} else {
			strmem = "    3   该段时间内，设备内存运行正常，未出现内存利用率过大情况。" + "\n" + "\n";
		}
		if (pingvalue > 0) {
			strping = "    4   发生" + pingvalue + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    4   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		if (diskvalue > 0) {

			strdisk = "    5   发生" + diskvalue + "磁盘利用率事件，请管理员注意检查服务器磁盘使用状况。";
		} else {
			strdisk = "    5   该段时间内，磁盘利用率正常，使用情况良好。";
		}

		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strcpu + strmem + strping + strdisk + "\n"
				+ "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// zhushouzhi---------------------end
	// -------------------------------------------------------------------------
	// zhushouzhi-------------------------star
	public void createReport_hostNewPDF(String file) throws DocumentException,
			IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		if (CPU == null)
			CPU = new Hashtable();
		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "0.0%";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		int cpuvalue = ((Integer) reportHash.get("cpuvalue")).intValue();
		int memvalue = ((Integer) reportHash.get("memvalue")).intValue();
		int diskvalue = ((Integer) reportHash.get("diskvalue")).intValue();
		int pingvalue = ((Integer) reportHash.get("pingvalue")).intValue();

		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);

		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont1 = new Font(bfChinese, 10, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "平均CPU" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(avgcpu));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最大CPU", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(cpumax));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String avgvalue = "0.0%";
		cell = new Cell(new Phrase("\n" + "平均?却胬?用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (memAvgHash.get("PhysicalMemory") != null) {

			avgvalue = (String) memAvgHash.get("PhysicalMemory");
			cell = new Cell(new Phrase(avgvalue));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		} else {
			cell = new Cell(new Phrase(avgvalue));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		}
		cell = new Cell(new Phrase("最大内存利用率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String value = "0.0%";
		if (memMaxHash.get("PhysicalMemory") != null) {

			value = (String) memMaxHash.get("PhysicalMemory");
			cell = new Cell(new Phrase(value));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		} else {
			cell = new Cell(new Phrase(value));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		}

		// end 写内存

		// end 写内存 }
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "CPU事件" + cpuvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "内存事件" + memvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + pingvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "磁盘事件" + diskvalue + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String strcpu = "";
		String strmem = "";
		String strping = "";
		String strdisk = "";
		if (cpuvalue > 0) {
			strcpu = "    2   在该段时间内，设备发生" + cpuvalue + "次CPU越值时间，需要管理员确定该事件。"
					+ "\n" + "\n";
		} else {
			strcpu = "    2   在该段时间内，CPU运行正常，未出现利用率过大情况。" + " \n" + "\n";
		}
		if (memvalue > 0) {
			strmem = "    3   发生" + memvalue + "次内存超越阀值事件，提醒管理员注意设备内存情况。"
					+ "\n" + "\n";
		} else {
			strmem = "    3   该段时间内，设备内存运行正常，未出现内存利用率过大情况。" + "\n" + "\n";
		}
		if (pingvalue > 0) {
			strping = "    4   发生" + pingvalue + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    4   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		if (diskvalue > 0) {

			strdisk = "    5   发生" + diskvalue + "磁盘利用率事件，请管理员注意检查服务器磁盘使用状况。";
		} else {
			strdisk = "    5   该段时间内，磁盘利用率正常，使用情况良好。";
		}

		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strcpu + strmem + strping + strdisk + "\n"
				+ "\n" + "\n", contextFont)

		);
		/*
		 * cell = new Cell(new Phrase(" 1 在该段时间内，运行状况稳定，概述设备处于稳定运行状态。" + " \n" +
		 * "\n" + " 2 在该段时间内，设备发生" + cpuvalue + "次CPU越值时间，需要管理员确定该事件。" + "\n" +
		 * "\n" + " 3 发生"+memvalue+"次内存超越阀值事件，提醒管理员确认该设备内存是否能让机器运行通畅。" + "\n" +
		 * "\n" + " 4 发生"+pingvalue+"次服务器连通率事件，提醒管理员注意观察设备的连通状况。" + "\n" +
		 * "\n"+" 5 发生"+diskvalue+"磁盘利用率事件，请管理员注意检查服务器磁盘使用状况。" + "\n" + "\n"+
		 * "\n",contextFont) );
		 */
		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// zhushouzhi---------------------end
	// -----------------------------------------------------------------------------
	// 创建主机doc报表
	public void createReport_hostDoc(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);

		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		Table aTable1 = new Table(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidth(100); // 占页面宽度 90%
		aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable1.setAutoFillEmptyCells(true); // 自动填满
		aTable1.setBorderWidth(1); // 边框宽度
		aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable1.setSpacing(0);// 即单元格之间的间距
		aTable1.setBorder(2);// 边框
		aTable1.endHeaders();

		aTable1.addCell("CPU利用率");
		aTable1.addCell("当前利用率");
		aTable1.addCell("最大利用率");
		aTable1.addCell("平均利用率");
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell(cpu + "%");
		aTable1.addCell(cpumax + "%");
		aTable1.addCell(avgcpu + "%");

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.MIDDLE);// 设置图片显示位置
		document.add(aTable1);
		document.add(img1);

		if (Memory != null && Memory.size() > 0) {
			Table aTable2 = new Table(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidth(100); // 占页面宽度 90%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			aTable2.endHeaders();
			aTable2.addCell("内存使用情况");
			aTable2.addCell("内存名");
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				Cell cell = new Cell(memoryItemch[i]);
				aTable2.addCell(cell);
			}
			// 写内存
			for (int i = 0; i < Memory.size(); i++) {
				aTable2.addCell("");
				Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
				String name = (String) mhash.get("name");
				Cell cell1 = new Cell(name);
				aTable2.addCell(cell1);
				for (int j = 0; j < memoryItem.length; j++) {
					String value = "";
					if (mhash.get(memoryItem[j]) != null) {
						value = (String) mhash.get(memoryItem[j]);
					}
					Cell cell2 = new Cell(value);
					aTable2.addCell(cell2);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					Cell cell3 = new Cell(value);
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					aTable2.addCell(avgvalue);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable2);
			document.add(img2);
		} else {
			Table aTable2 = new Table(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidth(100); // 占页面宽度 90%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			aTable2.endHeaders();
			aTable2.addCell("内存使用情况");
			aTable2.addCell("内存名");
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				Cell cell = new Cell(memoryItemch[i]);
				aTable2.addCell(cell);
			}
			// 写内存
			String[] names = null;
			HostNodeDao dao = new HostNodeDao();
			HostNode node = (HostNode) dao.findByCondition("ip_address", ip)
					.get(0);
			// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
			if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
				names = new String[] { "PhysicalMemory", "VirtualMemory" };
			} else {
				names = new String[] { "PhysicalMemory", "SwapMemory" };
			}
			for (int i = 0; i < names.length; i++) {
				String name = names[i];
				aTable2.addCell("");
				Cell cell = new Cell(names[i]);
				aTable2.addCell(cell);

				for (int j = 0; j < memoryItem.length; j++) {
					// 因为当前没有瞬间值和利用率
					String value = "";
					Cell cell1 = new Cell(value);
					aTable2.addCell(cell1);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					Cell cell2 = new Cell(value);
					aTable2.addCell(cell2);
				} else {
					Cell cell3 = new Cell(value);
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					Cell cell4 = new Cell(avgvalue);
					aTable2.addCell(cell4);
				} else {
					Cell cell5 = new Cell(avgvalue);
					aTable2.addCell(cell5);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable2);
			document.add(img2);

		}
		Table aTable3 = new Table(5);
		float[] widthss1 = { 220f, 440f, 150f, 150f, 220f };
		aTable3.setWidths(widthss1);
		aTable3.setWidth(100); // 占页面宽度 90%
		aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable3.setAutoFillEmptyCells(true); // 自动填满
		aTable3.setBorderWidth(1); // 边框宽度
		aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable3.setSpacing(0);// 即单元格之间的间距
		aTable3.setBorder(2);// 边框
		aTable3.endHeaders();
		if (Disk != null && Disk.size() > 0) {
			aTable3.addCell("磁盘使用情况");
			aTable3.addCell("磁盘名");

			for (int i = 0; i < diskItemch.length; i++) {
				Cell cell = new Cell(diskItemch[i]);
				aTable3.addCell(cell);
			}
			// 写磁盘

			for (int i = 0; i < Disk.size(); i++) {
				aTable3.addCell("");
				Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
				String name = (String) diskhash.get("name");
				Cell cell = new Cell(name);
				aTable3.addCell(cell);
				for (int j = 0; j < diskItem.length; j++) {
					String value = "";
					if (diskhash.get(diskItem[j]) != null) {
						value = (String) diskhash.get(diskItem[j]);
					}
					Cell cell1 = new Cell(value);
					// System.out.println(value+"================value===============");
					aTable3.addCell(cell1);
				}
			}// end 写磁盘
			// 设置图片
			Image img3 = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/" + newip + "disk" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable3);
			document.add(img3);

		}
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置

			document.add(img3);
		}
		document.close();
	}
	public void createReport_pingDoc(String file) throws DocumentException,IOException 
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);
		document.close();
	}
	public void createReport_capacityDoc(String file) throws DocumentException,IOException 
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");

		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		Table aTable1 = new Table(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidth(100); // 占页面宽度 90%
		aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable1.setAutoFillEmptyCells(true); // 自动填满
		aTable1.setBorderWidth(1); // 边框宽度
		aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable1.setSpacing(0);// 即单元格之间的间距
		aTable1.setBorder(2);// 边框
		aTable1.endHeaders();

		aTable1.addCell("CPU利用率");
		aTable1.addCell("当前利用率");
		aTable1.addCell("最大利用率");
		aTable1.addCell("平均利用率");
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell(cpu + "%");
		aTable1.addCell(cpumax + "%");
		aTable1.addCell(avgcpu + "%");

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.MIDDLE);// 设置图片显示位置
		document.add(aTable1);
		document.add(img1);

		if (Memory != null && Memory.size() > 0) {
			Table aTable2 = new Table(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidth(100); // 占页面宽度 90%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			aTable2.endHeaders();
			aTable2.addCell("内存使用情况");
			aTable2.addCell("内存名");
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				Cell cell = new Cell(memoryItemch[i]);
				aTable2.addCell(cell);
			}
			// 写内存
			for (int i = 0; i < Memory.size(); i++) {
				aTable2.addCell("");
				Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
				String name = (String) mhash.get("name");
				Cell cell1 = new Cell(name);
				aTable2.addCell(cell1);
				for (int j = 0; j < memoryItem.length; j++) {
					String value = "";
					if (mhash.get(memoryItem[j]) != null) {
						value = (String) mhash.get(memoryItem[j]);
					}
					Cell cell2 = new Cell(value);
					aTable2.addCell(cell2);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					Cell cell3 = new Cell(value);
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					aTable2.addCell(avgvalue);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable2);
			document.add(img2);
		} else {
			Table aTable2 = new Table(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidth(100); // 占页面宽度 90%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			aTable2.endHeaders();
			aTable2.addCell("内存使用情况");
			aTable2.addCell("内存名");
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				Cell cell = new Cell(memoryItemch[i]);
				aTable2.addCell(cell);
			}
			// 写内存
			String[] names = null;
			HostNodeDao dao = new HostNodeDao();
			HostNode node = (HostNode) dao.findByCondition("ip_address", ip)
					.get(0);
			// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
			if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
				names = new String[] { "PhysicalMemory", "VirtualMemory" };
			} else {
				names = new String[] { "PhysicalMemory", "SwapMemory" };
			}
			for (int i = 0; i < names.length; i++) {
				String name = names[i];
				aTable2.addCell("");
				Cell cell = new Cell(names[i]);
				aTable2.addCell(cell);

				for (int j = 0; j < memoryItem.length; j++) {
					// 因为当前没有瞬间值和利用率
					String value = "";
					Cell cell1 = new Cell(value);
					aTable2.addCell(cell1);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					Cell cell2 = new Cell(value);
					aTable2.addCell(cell2);
				} else {
					Cell cell3 = new Cell(value);
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					Cell cell4 = new Cell(avgvalue);
					aTable2.addCell(cell4);
				} else {
					Cell cell5 = new Cell(avgvalue);
					aTable2.addCell(cell5);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable2);
			document.add(img2);

		}
		
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置

			document.add(img3);
		}
		document.close();
	}
	public void createReport_diskDoc(String file) throws DocumentException,IOException 
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		

		
		Table aTable3 = new Table(5);
		float[] widthss1 = { 220f, 440f, 150f, 150f, 220f };
		aTable3.setWidths(widthss1);
		aTable3.setWidth(100); // 占页面宽度 90%
		aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable3.setAutoFillEmptyCells(true); // 自动填满
		aTable3.setBorderWidth(1); // 边框宽度
		aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable3.setSpacing(0);// 即单元格之间的间距
		aTable3.setBorder(2);// 边框
		aTable3.endHeaders();
		if (Disk != null && Disk.size() > 0) {
			aTable3.addCell("磁盘使用情况");
			aTable3.addCell("磁盘名");

			for (int i = 0; i < diskItemch.length; i++) {
				Cell cell = new Cell(diskItemch[i]);
				aTable3.addCell(cell);
			}
			// 写磁盘

			for (int i = 0; i < Disk.size(); i++) {
				aTable3.addCell("");
				Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
				String name = (String) diskhash.get("name");
				Cell cell = new Cell(name);
				aTable3.addCell(cell);
				for (int j = 0; j < diskItem.length; j++) {
					String value = "";
					if (diskhash.get(diskItem[j]) != null) {
						value = (String) diskhash.get(diskItem[j]);
					}
					Cell cell1 = new Cell(value);
					// System.out.println(value+"================value===============");
					aTable3.addCell(cell1);
				}
			}// end 写磁盘
			// 设置图片
			Image img3 = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/" + newip + "disk" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(aTable3);
			document.add(img3);

		}
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置

			document.add(img3);
		}
		document.close();
	}
	public void createReport_analyseDoc(String file) throws DocumentException,IOException
	{
		
	}
	
	
	

	// zhushouzhi之上为创建doc报表
	// ---------------------------------------------------------------------------------
	// 创建主机PDF报表
	public void createReport_hostPDF(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);

		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Phrase("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");

		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(75);
		document.add(aTable);
		document.add(img);

		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		PdfPTable aTable1 = new PdfPTable(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidthPercentage(100);

		aTable1.addCell(new Phrase("CPU利用率", contextFont));
		aTable1.addCell(new Phrase("当前利用率", contextFont));
		aTable1.addCell(new Phrase("最大利用率", contextFont));
		aTable1.addCell(new Phrase("平均利用率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell(cpu + "%");
		aTable1.addCell(cpumax);
		aTable1.addCell(avgcpu);

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		img.setAlignment(Image.MIDDLE);// 设置图片显示位置
		img1.scalePercent(75);
		document.add(aTable1);
		document.add(img1);

		if (Memory != null && Memory.size() > 0) {
			PdfPTable aTable2 = new PdfPTable(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidthPercentage(100);
			aTable2.addCell(new Phrase("平均利用率", contextFont));
			aTable2.addCell(new Phrase("内存名", contextFont));
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(memoryItemch[i],
						contextFont));
				aTable2.addCell(cell);
			}
			// 写内存
			for (int i = 0; i < Memory.size(); i++) {
				aTable2.addCell("");
				Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
				String name = (String) mhash.get("name");
				PdfPCell cell1 = new PdfPCell(new Phrase(name));
				aTable2.addCell(cell1);
				for (int j = 0; j < memoryItem.length; j++) {
					String value = "";
					if (mhash.get(memoryItem[j]) != null) {
						value = (String) mhash.get(memoryItem[j]);
					}
					PdfPCell cell2 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell2);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					PdfPCell cell3 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					aTable2.addCell(new Phrase(avgvalue));
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img2.scalePercent(75);
			document.add(aTable2);
			document.add(img2);
		} else {
			PdfPTable aTable2 = new PdfPTable(6);

			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidthPercentage(100);
			/*
			 * aTable2.setWidth(100); // 占页面宽度 90%
			 * aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			 * aTable2.setAutoFillEmptyCells(true); // 自动填满
			 * aTable2.setBorderWidth(1); // 边框宽度 aTable2.setBorderColor(new
			 * Color(0, 125, 255)); // 边框颜色 aTable2.setPadding(2);//
			 * 衬距，看效果就知道什么意思了 aTable2.setSpacing(0);// 即单元格之间的间距
			 * aTable2.setBorder(2);// 边框 aTable2.endHeaders();
			 */
			aTable2.addCell(new Phrase("平均利用率", contextFont));
			aTable2.addCell(new Phrase("内存名", contextFont));
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(memoryItemch[i],
						contextFont));
				aTable2.addCell(cell);
			}
			// 写内存
			String[] names = null;
			HostNodeDao dao = new HostNodeDao();
			HostNode node = (HostNode) dao.findByCondition("ip_address", ip)
					.get(0);
			// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
			if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
				names = new String[] { "PhysicalMemory", "VirtualMemory" };
			} else {
				names = new String[] { "PhysicalMemory", "SwapMemory" };
			}
			for (int i = 0; i < names.length; i++) {
				String name = names[i];
				aTable2.addCell("");
				PdfPCell cell = new PdfPCell(new Phrase(names[i]));
				aTable2.addCell(cell);

				for (int j = 0; j < memoryItem.length; j++) {
					// 因为当前没有瞬间值和利用率
					String value = "";
					PdfPCell cell1 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell1);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					PdfPCell cell2 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell2);
				} else {
					PdfPCell cell3 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					PdfPCell cell4 = new PdfPCell(new Phrase(avgvalue));
					aTable2.addCell(cell4);
				} else {
					PdfPCell cell5 = new PdfPCell(new Phrase(avgvalue));
					aTable2.addCell(cell5);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img2.scalePercent(75);
			document.add(aTable2);
			document.add(img2);

		}
		PdfPTable aTable3 = new PdfPTable(5);
		float[] widthss1 = { 220f, 440f, 150f, 150f, 220f };
		aTable3.setWidths(widthss1);
		aTable3.setWidthPercentage(100);
		if (Disk != null && Disk.size() > 0) {
			aTable3.addCell(new Phrase("磁盘使用情况", contextFont));
			aTable3.addCell(new Phrase("磁盘名", contextFont));

			for (int i = 0; i < diskItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(diskItemch[i],
						contextFont));
				aTable3.addCell(cell);
			}
			// 写磁盘

			for (int i = 0; i < Disk.size(); i++) {
				aTable3.addCell("");
				Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
				String name = (String) diskhash.get("name");
				PdfPCell cell = new PdfPCell(new Phrase(name));
				aTable3.addCell(cell);
				for (int j = 0; j < diskItem.length; j++) {
					String value = "";
					if (diskhash.get(diskItem[j]) != null) {
						value = (String) diskhash.get(diskItem[j]);
					}
					PdfPCell cell1 = new PdfPCell(new Phrase(value));
					aTable3.addCell(cell1);
				}
			}// end 写磁盘
			// 设置图片

			Image img3 = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/" + newip + "disk" + ".png");
			img3.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img3.scalePercent(78);
			document.add(aTable3);
			// document.add(new Paragraph("\n"));
			document.add(img3);

		}
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img3.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img3.scalePercent(76);
			document.add(new Paragraph("\n"));
			// document.add(aTable3);
			document.add(img3);
		}
		document.close();
	}
	public void createReport_pingPDF(String file) throws DocumentException,IOException
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);

		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Phrase("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");

		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(75);
		document.add(aTable);
		document.add(img);
		document.close();
	}
	public void createReport_capacityPDF(String file) throws DocumentException,IOException
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);

		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Phrase("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		

		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");
		PdfPTable aTable1 = new PdfPTable(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidthPercentage(100);

		aTable1.addCell(new Phrase("CPU利用率", contextFont));
		aTable1.addCell(new Phrase("当前利用率", contextFont));
		aTable1.addCell(new Phrase("最大利用率", contextFont));
		aTable1.addCell(new Phrase("平均利用率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell(cpu + "%");
		aTable1.addCell(cpumax);
		aTable1.addCell(avgcpu);

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		//img.setAlignment(Image.MIDDLE);// 设置图片显示位置
		img1.scalePercent(75);
		document.add(aTable1);
		document.add(img1);

		if (Memory != null && Memory.size() > 0) {
			PdfPTable aTable2 = new PdfPTable(6);
			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidthPercentage(100);
			aTable2.addCell(new Phrase("平均利用率", contextFont));
			aTable2.addCell(new Phrase("内存名", contextFont));
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(memoryItemch[i],
						contextFont));
				aTable2.addCell(cell);
			}
			// 写内存
			for (int i = 0; i < Memory.size(); i++) {
				aTable2.addCell("");
				Hashtable mhash = (Hashtable) (Memory.get(new Integer(i)));
				String name = (String) mhash.get("name");
				PdfPCell cell1 = new PdfPCell(new Phrase(name));
				aTable2.addCell(cell1);
				for (int j = 0; j < memoryItem.length; j++) {
					String value = "";
					if (mhash.get(memoryItem[j]) != null) {
						value = (String) mhash.get(memoryItem[j]);
					}
					PdfPCell cell2 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell2);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					PdfPCell cell3 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					aTable2.addCell(new Phrase(avgvalue));
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			//img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img2.scalePercent(75);
			document.add(aTable2);
			document.add(img2);
		} else {
			PdfPTable aTable2 = new PdfPTable(6);

			float[] widthss = { 220f, 300f, 220f, 220f, 220f, 220f };
			aTable2.setWidths(widthss);
			aTable2.setWidthPercentage(100);
			/*
			 * aTable2.setWidth(100); // 占页面宽度 90%
			 * aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			 * aTable2.setAutoFillEmptyCells(true); // 自动填满
			 * aTable2.setBorderWidth(1); // 边框宽度 aTable2.setBorderColor(new
			 * Color(0, 125, 255)); // 边框颜色 aTable2.setPadding(2);//
			 * 衬距，看效果就知道什么意思了 aTable2.setSpacing(0);// 即单元格之间的间距
			 * aTable2.setBorder(2);// 边框 aTable2.endHeaders();
			 */
			aTable2.addCell(new Phrase("平均利用率", contextFont));
			aTable2.addCell(new Phrase("内存名", contextFont));
			// 内存的标题

			for (int i = 0; i < memoryItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(memoryItemch[i],
						contextFont));
				aTable2.addCell(cell);
			}
			// 写内存
			String[] names = null;
			HostNodeDao dao = new HostNodeDao();
			HostNode node = (HostNode) dao.findByCondition("ip_address", ip)
					.get(0);
			// Monitoriplist monitor = monitorManager.getByIpaddress(ip);
			if (node.getSysOid().startsWith("1.3.6.1.4.1.311")) {
				names = new String[] { "PhysicalMemory", "VirtualMemory" };
			} else {
				names = new String[] { "PhysicalMemory", "SwapMemory" };
			}
			for (int i = 0; i < names.length; i++) {
				String name = names[i];
				aTable2.addCell("");
				PdfPCell cell = new PdfPCell(new Phrase(names[i]));
				aTable2.addCell(cell);

				for (int j = 0; j < memoryItem.length; j++) {
					// 因为当前没有瞬间值和利用率
					String value = "";
					PdfPCell cell1 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell1);
				}
				String value = "";
				if (memMaxHash.get(name) != null) {
					value = (String) memMaxHash.get(name);
					PdfPCell cell2 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell2);
				} else {
					PdfPCell cell3 = new PdfPCell(new Phrase(value));
					aTable2.addCell(cell3);
				}
				String avgvalue = "";
				if (memAvgHash.get(name) != null) {
					avgvalue = (String) memAvgHash.get(name);
					PdfPCell cell4 = new PdfPCell(new Phrase(avgvalue));
					aTable2.addCell(cell4);
				} else {
					PdfPCell cell5 = new PdfPCell(new Phrase(avgvalue));
					aTable2.addCell(cell5);
				}

			} // end 写内存
			// 设置图片
			Image img2 = Image
					.getInstance(ResourceCenter.getInstance().getSysPath()
							+ "/resource/image/jfreechart/" + newip + "memory"
							+ ".png");
			//img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img2.scalePercent(75);
			document.add(aTable2);
			document.add(img2);

		}
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img3.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img3.scalePercent(76);
			document.add(new Paragraph("\n"));
			// document.add(aTable3);
			document.add(img3);
		}
		document.close();
	}
	public void createReport_diskPDF(String file) throws DocumentException,IOException 
	{
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");

		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);

		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Phrase("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };

		PdfPTable aTable3 = new PdfPTable(5);
		float[] widthss1 = { 220f, 440f, 150f, 150f, 220f };
		aTable3.setWidths(widthss1);
		aTable3.setWidthPercentage(100);
		if (Disk != null && Disk.size() > 0) {
			aTable3.addCell(new Phrase("磁盘使用情况", contextFont));
			aTable3.addCell(new Phrase("磁盘名", contextFont));

			for (int i = 0; i < diskItemch.length; i++) {
				PdfPCell cell = new PdfPCell(new Phrase(diskItemch[i],
						contextFont));
				aTable3.addCell(cell);
			}
			// 写磁盘

			for (int i = 0; i < Disk.size(); i++) {
				aTable3.addCell("");
				Hashtable diskhash = (Hashtable) (Disk.get(new Integer(i)));
				String name = (String) diskhash.get("name");
				PdfPCell cell = new PdfPCell(new Phrase(name));
				aTable3.addCell(cell);
				for (int j = 0; j < diskItem.length; j++) {
					String value = "";
					if (diskhash.get(diskItem[j]) != null) {
						value = (String) diskhash.get(diskItem[j]);
					}
					PdfPCell cell1 = new PdfPCell(new Phrase(value));
					aTable3.addCell(cell1);
				}
			}// end 写磁盘
			// 设置图片

			Image img3 = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/" + newip + "disk" + ".png");
			img3.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img3.scalePercent(78);
			document.add(aTable3);
			// document.add(new Paragraph("\n"));
			document.add(img3);

		}
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			Image img3 = Image.getInstance(baos.toByteArray());
			img3.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img3.scalePercent(76);
			document.add(new Paragraph("\n"));
			// document.add(aTable3);
			document.add(img3);
		}
		document.close();
	}

	// zhushouzhi之上为创建pdfs报表
	// -------------------------------------------------------------------------

	// zhushouzhi------------------------------------------------start
	public void createReport_networkNewDoc(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		if (CPU == null)
			CPU = new Hashtable();
		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");

		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String equipnameNetDoc = (String) reportHash.get("equipnameNetDoc");
		String startdate = (String) reportHash.get("startdate");
		String todate = (String) reportHash.get("todate");
		String starttime = (String) reportHash.get("starttime");
		String avginput = (String) reportHash.get("avginput");
		String avgoutput = (String) reportHash.get("avgoutput");
		String maxinput = (String) reportHash.get("maxinput");
		String maxoutput = (String) reportHash.get("maxoutput");

		int updownvalue = ((Integer) reportHash.get("updownvalue")).intValue();

		int utilvalue = ((Integer) reportHash.get("utilvalue")).intValue();
		int pingvalue = ((Integer) reportHash.get("pingvalue")).intValue();
		int cpuvalue = ((Integer) reportHash.get("cpuvalue")).intValue();

		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.BOLD);
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		/* cell.setVerticalAlignment(Element.ALIGN_CENTER); */
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", contextFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(equipnameNetDoc, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", contextFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("设备类型", contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				contextFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "平均CPU" + "\n", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(avgcpu, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最大CPU", contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(cpumax, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "平均流速(KB/S)" + "\n", contextFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("入口：" + avginput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("最大流速(KB/S)", contextFont));
		cell.setColspan(2);
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("入口：" + maxinput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("出口：" + avgoutput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("出口：" + maxoutput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				contextFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率" + pingvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "CPU事件" + cpuvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "端口状态改变" + updownvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "流速事件" + utilvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", contextFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String strcpu = "";
		String strutil = "";
		String strping = "";
		String strupdown = "";
		if (cpuvalue > 0) {
			strcpu = "    2   在该段时间内，设备发生" + cpuvalue + "次CPU越值时间，需要管理员确定该事件。"
					+ "\n" + "\n";
		} else {
			strcpu = "    2   在该段时间内，CPU运行正常，未出现利用率过大情况。" + " \n" + "\n";
		}
		if (utilvalue > 0) {
			strutil = "3   发生" + utilvalue
					+ "次流速超越阀值事件，提醒管理员确认该设备下联业务是否有变动或有其他异常情况发生。" + "\n" + "\n";
		} else {
			strutil = "    3   该段时间内，设备流速正常，未出现流速异常情况。" + "\n" + "\n";
		}
		if (updownvalue > 0) {
			strupdown = "    4   发生" + updownvalue
					+ "次端口状态改变事件，提醒管理员注意观察设备的稳定性。" + "\n" + "\n";
		} else {
			strupdown = "    4   该段时间内，未出现端口改变状况，设备运行较平稳。" + "\n" + "\n";
		}
		if (pingvalue > 0) {

			strping = "    5   发生" + pingvalue + "次连通率事件，提醒管理员注意网络设备的连通状况。";
		} else {
			strping = "    5   该段时间内，设备连通良好，未出现断开异常。";
		}

		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strcpu + strutil + strupdown + strping + "\n"
				+ "\n" + "\n", contextFont1)

		);

		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();
	}

	// ----------------------------------------------
	// zhushouzhi------------------------------------------------start
	public void createReport_networkNewPdf(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		if (CPU == null)
			CPU = new Hashtable();
		String cpu = "";
		if (CPU.get("cpu") != null)
			cpu = (String) CPU.get("cpu");
		String cpumax = "";
		if (CPU.get("cpumax") != null)
			cpumax = (String) CPU.get("cpumax");
		String avgcpu = "";
		if (CPU.get("avgcpu") != null)
			avgcpu = (String) CPU.get("avgcpu");

		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String equipnameNetDoc = (String) reportHash.get("equipnameNetDoc");
		String startdate = (String) reportHash.get("startdate");
		String todate = (String) reportHash.get("todate");
		String starttime = (String) reportHash.get("starttime");
		String avginput = (String) reportHash.get("avginput");
		String avgoutput = (String) reportHash.get("avgoutput");
		String maxinput = (String) reportHash.get("maxinput");
		String maxoutput = (String) reportHash.get("maxoutput");

		int updownvalue = ((Integer) reportHash.get("updownvalue")).intValue();

		int utilvalue = ((Integer) reportHash.get("utilvalue")).intValue();
		int pingvalue = ((Integer) reportHash.get("pingvalue")).intValue();
		int cpuvalue = ((Integer) reportHash.get("cpuvalue")).intValue();

		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);

		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont2 = new Font(bfChinese, 10, Font.NORMAL);
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		aTable.setWidths(widths);
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		/* cell.setVerticalAlignment(Element.ALIGN_CENTER); */
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont2));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(equipnameNetDoc, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "平均CPU" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(avgcpu, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最大CPU", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(cpumax, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "平均流速(KB/S)" + "\n", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("入口：" + avginput.replace(".0", ""),
				contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("最大流速(KB/S)", titleFont));
		cell.setColspan(2);
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("入口：" + maxinput.replace(".0", ""),
				contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("出口：" + avgoutput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("出口：" + maxoutput.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率" + pingvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "CPU事件" + cpuvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "端口状态改变" + updownvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "流速事件" + utilvalue + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String strcpu = "";
		String strutil = "";
		String strping = "";
		String strupdown = "";
		if (cpuvalue > 0) {
			strcpu = "    2   在该段时间内，设备发生" + cpuvalue + "次CPU越值时间，需要管理员确定该事件。"
					+ "\n" + "\n";
		} else {
			strcpu = "    2   在该段时间内，CPU运行正常，未出现利用率过大情况。" + " \n" + "\n";
		}
		if (utilvalue > 0) {
			strutil = "3   发生" + utilvalue
					+ "次流速超越阀值事件，提醒管理员确认该设备下联业务是否有变动或有其他异常情况发生。" + "\n" + "\n";
		} else {
			strutil = "    3   该段时间内，设备流速正常，未出现流速异常情况。" + "\n" + "\n";
		}
		if (updownvalue > 0) {
			strupdown = "    4   发生" + updownvalue
					+ "次端口状态改变事件，提醒管理员注意观察设备的稳定性。" + "\n" + "\n";
		} else {
			strupdown = "    4   该段时间内，未出现端口改变状况，设备运行较平稳。" + "\n" + "\n";
		}
		if (pingvalue > 0) {

			strping = "    5   发生" + pingvalue + "次连通率事件，提醒管理员注意网络设备的连通状况。";
		} else {
			strping = "    5   该段时间内，设备连通良好，未出现断开异常。";
		}

		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strcpu + strutil + strupdown + strping + "\n"
				+ "\n" + "\n", contextFont)

		);

		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();
	}

	// zhushouzhi之上-----------------------end
	// --------------------------------------------------------------------
	// zhushouzhi综合报表PDF打印形式
	public void createReport_networkPDF(String file) throws DocumentException,
			IOException {
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		String Ping = (String) reportHash.get("Ping");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Vector netifVector = (Vector) reportHash.get("netifVector");
		Hashtable portconfigHash = (Hashtable) reportHash.get("portconfigHash");
		List reportports = (List) reportHash.get("reportports");
		Vector iprouterVector = (Vector) reportHash.get("iprouterVector");

		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");
		String hostname = (String) reportHash.get("equipname");
		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)(KB/S)", "当前状态",
				"出口流速(KB/S)", "入口流速(KB/S)" };
		String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型", "路由协议",
				"子网掩码" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization",
				"INodeUsedSize", "INodeUtilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用", "i-node利用率" };
		String[] iproutertype = { "", "", "", "direct(3)", "indirect(4)" };
		String[] iprouterproto = { "", "other(1)", "local(2)", "netmgmt(3)",
				"icmp(4)", "egp(5)", "ggp(6)", "hello(7)", "rip(8)",
				"is-is(9)", "es-is(10)", "ciscoIgrp(11)", "bbnSpfIgp(12)",
				"ospf(13)", "bgp(14)" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		BaseFont bfChinese1 = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);

		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据采集时间:" + sdf.format(cc);

		Paragraph context = new Paragraph(
				new Phrase(contextString, contextFont));
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Paragraph("\n"));
		// 设置 Table 表格
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		// PdfPTable pdfPTable = new PdfPTable(aTable);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "ConnectUtilization"
				+ ".png");
		// img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(76);
		document.add(aTable);
		document.add(img);
		document.add(new Paragraph("\n"));

		// document.add(new Paragraph("\n"));
		// document.close();
		PdfPTable aTable1 = new PdfPTable(4);
		float[] width = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(width);
		aTable1.setWidthPercentage(100);
		aTable1.addCell(new Phrase("CPU利用率", contextFont));
		aTable1.addCell(new Phrase("当前利用率", contextFont));
		aTable1.addCell(new Phrase("最大利用率", contextFont));
		aTable1.addCell(new Phrase("平均利用率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");

		aTable1.addCell((String) CPU.get("cpu") + "%");
		aTable1.addCell((String) CPU.get("cpumax") + "%");
		aTable1.addCell((String) CPU.get("avgcpu") + "%");

		Image img1 = Image.getInstance(ResourceCenter.getInstance()
				.getSysPath()
				+ "/resource/image/jfreechart/" + newip + "cpu" + ".png");
		// img.setAbsolutePosition(0, 0);
		img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		img1.scalePercent(76);
		document.add(aTable1);
		document.add(img1);
		document.add(new Paragraph("\n"));
		if (netifVector != null && netifVector.size() > 0) {
			PdfPTable aTable2 = new PdfPTable(8);
			float[] width2 = { 300f, 220f, 220f, 180f, 300f, 180f, 220f, 220f };
			aTable2.setWidths(width2);
			aTable2.setWidthPercentage(100);
			aTable2.setHeaderRows(1);

			aTable2.addCell(new Phrase("端口使用情况", contextFont));
			// 端口的标题
			// allRow = allRow;
			for (int i = 0; i < netIfItemch.length; i++) {
				// Cell cell = new Cell();
				aTable2.addCell(new Paragraph(netIfItemch[i], contextFont));
			}
			// 写端口
			for (int i = 0; i < netifVector.size(); i++) {
				aTable2.addCell(" ");
				String[] strs = (String[]) netifVector.get(i);
				String ifname = strs[1];
				String index = strs[0];
				for (int j = 0; j < strs.length; j++) {

					if (j == 1) {

						String linkuse = "";
						if (portconfigHash != null && portconfigHash.size() > 0) {
							if (portconfigHash.get(ip + ":" + index) != null)
								linkuse = (String) portconfigHash.get(ip + ":"
										+ index);
						}
						PdfPCell cell1 = new PdfPCell(new Phrase(strs[j]));
						aTable2.addCell(cell1);
						PdfPCell cell2 = new PdfPCell(new Phrase(linkuse));
						aTable2.addCell(cell2);

					} else if (j > 1) {
						PdfPCell cell3 = new PdfPCell(new Phrase(strs[j]
								.replace("KB/秒", "")));
						aTable2.addCell(cell3);

					} else {
						PdfPCell cell4 = new PdfPCell(new Phrase(strs[j]
								.replace("KB/秒", "")));
						aTable2.addCell(cell4);
					}
				}// end 写端口

			}
			document.add(aTable2);
			document.add(new Paragraph("\n"));
		}
		if (iprouterVector != null && iprouterVector.size() > 0) {
			PdfPTable aTable3 = new PdfPTable(7);
			float[] width2 = { 240f, 170f, 310f, 300f, 220f, 180f, 330f };
			aTable3.setWidths(width2);
			aTable3.setWidthPercentage(100);
			aTable3.setHeaderRows(1);
			aTable3.addCell(new Phrase("路由表信息", contextFont));
			// 标题
			// allRow = allRow+1;
			for (int i = 0; i < ipRouterItemch.length; i++) {
				aTable3.addCell(new Phrase(ipRouterItemch[i], contextFont));

			}

			// 写路由表信息

			for (int i = 0; i < iprouterVector.size(); i++) {
				aTable3.addCell("         ");

				IpRouter iprouter = (IpRouter) iprouterVector.get(i);
				aTable3.addCell(iprouter.getIfindex());
				aTable3.addCell(iprouter.getDest());
				aTable3.addCell(iprouter.getNexthop());
				aTable3.addCell(iproutertype[Integer.parseInt(iprouter
						.getType().longValue()
						+ "")]);
				aTable3.addCell(iprouterproto[Integer.parseInt(iprouter
						.getProto().longValue()
						+ "")]);
				aTable3.addCell(iprouter.getMask());
			}
			document.add(aTable3);
			document.add(new Paragraph("\n"));
		}
		// 路由表doc添加成功

		if (reportports != null && reportports.size() > 0) {
			// 显示该端口的流速图形

			// aTable4.addCell("路由表信息");
			for (int i = 0; i < reportports.size(); i++) {
				PdfPTable aTable4 = new PdfPTable(2);
				float[] width2 = { 600f, 300f };
				aTable4.setWidths(width2);
				aTable4.setWidthPercentage(100);
				com.afunms.config.model.Portconfig portconfig = (com.afunms.config.model.Portconfig) reportports
						.get(i);

				Phrase phrase = new Phrase("第", contextFont);
				Phrase phrase1 = new Phrase(portconfig.getPortindex() + "("
						+ portconfig.getName() + ")");
				Phrase phrase2 = new Phrase("端口", contextFont);
				aTable4.addCell(new Phrase("第" + portconfig.getPortindex()
						+ "(" + portconfig.getName() + ")端口", contextFont));
				// aTable4.addCell(new Phrase(phrase++ portconfig.getPortindex()
				// + "("+ portconfig.getName() +phrase2));
				if (portconfig.getLinkuse() == null)
					portconfig.setLinkuse("");
				/*
				 * Cell cell1 = new Cell(new Phrase("应用:"+
				 * portconfig.getLinkuse(),contextFont));
				 */
				aTable4.addCell(new Phrase("应用:" + portconfig.getLinkuse(),
						contextFont));
				document.add(aTable4);
				// 设置图片
				Image img2 = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ portconfig.getPortindex() + "ifspeed_day.png");
				// img2.setAbsolutePosition(0, 0);
				img2.setAlignment(Image.LEFT);// 设置图片显示位置
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				img2.scalePercent(67);
				document.add(img2);

			}
		}// 出口流速图片
		if (impReport.getChart() != null) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			try {
				ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
						.getChart(), impReport.getChart().getWidth(), impReport
						.getChart().getHeight());
			} catch (IOException ioe) {
			}
			WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
					.toByteArray());
			Image img2 = Image.getInstance(baos.toByteArray());
			// img.setAbsolutePosition(0, 0);
			img2.setAlignment(Image.LEFT);// 设置图片显示位置
			img2.scalePercent(67);
			document.add(img2);
		}

		document.close();
	}

	// ------------------------------------------
	public void createReport_networkchoce(String starttime, String totime,
			String file, String username, String positionname)
			throws DocumentException, IOException {

		Hashtable allreporthash = new Hashtable();
		allreporthash = reportHash;
		/*
		 * String starttime = (String) reportHash.get("starttime"); String
		 * totime = (String) reportHash.get("totime");
		 */

		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont1 = new Font(bfChinese, 14, Font.BOLD);
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + file;
			Table aTable = new Table(15);
			float[] widths = { 60f, 60f, 50f, 50f, 50f, 50f, 50f, 50f, 50f,
					50f, 50f, 50f, 50f, 50f, 50f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框

			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("网络设备决策支持报表", titleFont1));
			cell.setColspan(15);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("时间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// cell = new Cell("");
			cell = new Cell("从" + starttime + "至" + totime);
			cell.setColspan(14);
			aTable.addCell(cell);
			cell = new Cell(new Phrase("管理员", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(username, contextFont));

			cell.setColspan(3);

			aTable.addCell(cell);
			cell = new Cell(new Phrase("部门", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(positionname, contextFont));

			cell.setColspan(3);
			aTable.addCell(cell);
			cell = new Cell(new Phrase("运行评价", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("优、良、差");
			cell.setColspan(4);
			aTable.addCell(cell);
			cell = new Cell(new Phrase("网" + "\n" + "络" + "\n" + "设" + "\n"
					+ "备", titleFont));
			cell.setRowspan(3 + allreporthash.size());
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("IP", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("别名", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("用途", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("CPU(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("物理内存", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("流速(KB/S)", titleFont));
			cell.setColspan(4);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("事件(个)", titleFont));
			cell.setColspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平" + "\n" + "均", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最" + "\n" + "大", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平" + "\n" + "均", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最" + "\n" + "大", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("上联", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("下联", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("普通", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("严重", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("紧急", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("平均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			fileName = ResourceCenter.getInstance().getSysPath() + file;

			if (allreporthash != null && allreporthash.size() > 0) {
				Iterator keys = allreporthash.keySet().iterator();
				String ip = "";
				while (keys.hasNext()) {
					ip = keys.next().toString();
					Hashtable report_has = (Hashtable) allreporthash.get(ip);
					String hostname = (String) report_has.get("equipname");
					// WritableSheet sheet = wb.createSheet(hostname+"性能日报表",
					// sheetNum);

					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					// Hashtable maxping = (Hashtable)
					// report_has.get("maxping");
					String newip = doip(ip);
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();
					Vector netifVector = (Vector) report_has.get("netifVector");
					Hashtable portconfigHash = (Hashtable) report_has
							.get("portconfigHash");
					List reportports = (List) report_has.get("reportports");
					Vector iprouterVector = (Vector) report_has
							.get("iprouterVector");

					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)",
							"当前状态", "出口流速", "入口流速" };
					String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型",
							"路由协议", "子网掩码" };
					String[] memoryItem = { "Capability", "Utilization" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization",
							"INodeUsedSize", "INodeUtilization" };
					String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用",
							"i-node利用率" };
					String[] iproutertype = { "", "", "", "direct(3)",
							"indirect(4)" };
					String[] iprouterproto = { "", "other(1)", "local(2)",
							"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)",
							"hello(7)", "rip(8)", "is-is(9)", "es-is(10)",
							"ciscoIgrp(11)", "bbnSpfIgp(12)", "ospf(13)",
							"bgp(14)" };
					String avginput = (String) report_has.get("avginput");
					String avgoutput = (String) report_has.get("avgoutput");
					String maxinput = (String) report_has.get("maxinput");
					String maxoutput = (String) report_has.get("maxoutput");

					String levelone = (String) report_has.get("levelone");
					String levletwo = (String) report_has.get("levletwo");
					String levelthree = (String) report_has.get("levelthree");
					/*
					 * String starttime = (String)report_has.get("starttime");
					 * String totime = (String)report_has.get("totime");
					 */
					cell = new Cell(ip);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(hostname);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell("");
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell((String) CPU.get("avgcpu"));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell((String) CPU.get("cpumax"));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell("");
					aTable.addCell(cell);
					cell = new Cell("");
					aTable.addCell(cell);
					cell = new Cell(avgoutput.replace(".0", ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(maxoutput.replace(".0", ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(avginput.replace(".0", ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(maxinput.replace(".0", ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(levelone);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(levletwo);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(levelthree);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					/*
					 * cell = (Cell)aTable.getElement(1, 1); cell.add(new
					 * Phrase("从"+starttime+"至"+totime,contextFont));
					 */
				}
			}

			cell = new Cell(new Phrase("业务分析", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			cell.setColspan(15);
			aTable.addCell(cell);
			cell = new Cell("\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n"
					+ "\n" + "\n" + "\n" + "\n" + "\n");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			cell.setColspan(15);
			aTable.addCell(cell);
			document.add(aTable);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	
	// zhushouzhi之上

	// zhushouzhi--------------------------------host-choce
	public void createReport_hostchoce(String starttime, String totime,
			String file, String username, String positionname)
			throws DocumentException, IOException {
		Hashtable allreporthash = new Hashtable();
		allreporthash = reportHash;
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont1 = new Font(bfChinese, 14, Font.BOLD);
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont1 = new Font(bfChinese, 14, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);

		fileName = ResourceCenter.getInstance().getSysPath() + file;
		Table aTable = new Table(13);
		float[] widths = { 60f, 100f, 30f, 30f, 30f, 30f, 30f, 30f, 50f, 50f,
				30f, 30f, 30f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("服务器决策支持报表", titleFont1));
		cell.setColspan(13);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("时间", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// cell = new Cell("");
		cell = new Cell(new Phrase("从" + starttime + "至" + totime, contextFont));
		cell.setColspan(12);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("管理员", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// cell = new Cell(new Phrase(username,contextFont));
		cell = new Cell(new Phrase(username, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(4);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("部门", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// cell = new Cell(new Phrase(positionname,contextFont));
		cell = new Cell(new Phrase(positionname, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(6);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服" + "\n" + "务" + "\n" + "器", titleFont));
		cell.setRowspan(2 + allreporthash.size());
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("连通率(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("CPU(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("物理内存", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("磁盘TOP", titleFont));
		cell.setColspan(2);
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("事件(个)", titleFont));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("平" + "\n" + "均", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最" + "\n" + "小", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("平" + "\n" + "均", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最" + "\n" + "大", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平" + "\n" + "均", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最" + "\n" + "大", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("普" + "\n" + "通", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("严" + "\n" + "重", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("紧" + "\n" + "急", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		java.text.NumberFormat formate = java.text.NumberFormat
				.getNumberInstance();
		formate.setMaximumFractionDigits(0);//
		fileName = ResourceCenter.getInstance().getSysPath() + file;
		if (allreporthash != null && allreporthash.size() > 0) {
			Iterator keys = allreporthash.keySet().iterator();
			String ip = "";
			int sheetNum = 0;
			while (keys.hasNext()) {

				ip = keys.next().toString();
				String newip = doip(ip);
				Hashtable report_has = (Hashtable) allreporthash.get(ip);
				String hostname = (String) report_has.get("equipname");
				Hashtable CPU = (Hashtable) report_has.get("CPU");
				String Ping = (String) report_has.get("Ping");
				Calendar colTime = (Calendar) report_has.get("time");
				Date cc = colTime.getTime();
				Hashtable Memory = (Hashtable) report_has.get("Memory");
				Hashtable Disk = (Hashtable) report_has.get("Disk");

				Hashtable memMaxHash = (Hashtable) report_has.get("memmaxhash");
				Hashtable memAvgHash = (Hashtable) report_has.get("memavghash");
				Hashtable maxping = (Hashtable) report_has.get("ping");

				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd HH:mm:ss");

				String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
				String[] memoryItem = { "Capability", "c" };
				String[] diskItem = { "AllSize", "UsedSize", "Utilization",
						"Utilizationvalue" };
				String[] diskItemch = { "总容量", "已用容量", "利用率" };

				String levelone = (String) report_has.get("levelone");
				String levletwo = (String) report_has.get("levletwo");
				String levelthree = (String) report_has.get("levelthree");
				cell = new Cell(new Phrase(ip, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				// =======
				String string1 = ((String) maxping.get("pingmax")).replace("%",
						"");
				String string2 = ((String) maxping.get("avgpingcon")).replace(
						"%", "");
				// formate.format(Double.valueOf(string1));
				// System.out.println(formate.format(Double.valueOf(string))+"@@@@@@@0000000000");
				cell = new Cell(new Phrase(formate.format(Double
						.valueOf(string1)), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(formate.format(Double
						.valueOf(string2)), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				String cpu = "";
				if (CPU.get("cpu") != null)
					cpu = (String) CPU.get("cpu");
				String cpumax = "";
				if (CPU.get("cpumax") != null)
					cpumax = (String) CPU.get("cpumax");
				String avgcpu = "";
				if (CPU.get("avgcpu") != null)
					avgcpu = (String) CPU.get("avgcpu");
				String string3 = avgcpu.replace("%", "");
				String string4 = cpumax.replace("%", "");

				cell = new Cell(new Phrase(formate.format(Double
						.valueOf(string3)), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(formate.format(Double
						.valueOf(string4)), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				String avgvalue = "0.0%";
				if (memAvgHash.get("PhysicalMemory") != null) {

					avgvalue = (String) memAvgHash.get("PhysicalMemory");
					String string5 = avgvalue.replace("%", "");
					cell = new Cell(new Phrase(formate.format(Double
							.valueOf(string5)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				} else {
					String string5 = avgvalue.replace("%", "");
					cell = new Cell(new Phrase(formate.format(Double
							.valueOf(string5)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				}
				String value = "0.0%";
				if (memMaxHash.get("PhysicalMemory") != null) {

					value = (String) memMaxHash.get("PhysicalMemory");
					String string6 = value.replace("%", "");
					cell = new Cell(new Phrase(formate.format(Double
							.valueOf(string6)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				} else {
					String string6 = value.replace("%", "");
					cell = new Cell(new Phrase(formate.format(Double
							.valueOf(string6)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				}
				String value1 = "0";
				String name = "";
				String Utilization = "";
				if (Disk != null && Disk.size() > 0) {
					for (int i = 0; i < Disk.size(); i++) {
						Hashtable diskhash = (Hashtable) (Disk.get(new Integer(
								i)));
						if (diskhash.get(diskItem[3]) != null) {
							if (value1.compareTo((String) diskhash
									.get(diskItem[3])) < 0) {
								value1 = (String) diskhash.get(diskItem[3]);
								name = (String) diskhash.get("name");
								Utilization = (String) diskhash
										.get(diskItem[2]);
							}
						}
					}
					cell = new Cell(name + "  " + Utilization);
					cell.setColspan(2);
					aTable.addCell(cell);

				} else {
					cell = new Cell("---");
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				}
				cell = new Cell(new Phrase(levelone, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(levletwo, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(levelthree, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
		}

		cell = new Cell(new Phrase("业务分析", titleFont));
		cell.setColspan(13);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell("");
		cell.setColspan(12);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// ==============================ora
	public void createReport_oraDoc(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			
			//HONGLI MODIFY START1
			Table aTable1 = new Table(12);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f ,220f ,220f ,220f ,220f };
			//HONGLI MODIFY END1
			
			
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框

			cell = new Cell(new Phrase("表空间信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("文件名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD START1
			cell = new Cell(new Phrase("物理读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理块读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理块写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD END1 
			
			
			cell = new Cell(new Phrase("文件状态", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 表空间信息
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			int row = 0;
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3

				aTable1.addCell("");
				row = i + 1;
				String rowStr = "" + row;
				cell = new Cell(new Phrase(rowStr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(_filename, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(tablespace, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(size, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(free, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(percent, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				
				//HONGLI ADD START4
				cell = new Cell(new Phrase(pyr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pbr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pyw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pbw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				//HONGLI ADD END4
				
				cell = new Cell(new Phrase(status, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}

	}
	
	/**
	 * @author HONGLI 打印oracle综合性能word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportOracleCldDoc(String filename) throws DocumentException,
		IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			Table dbTable = new Table(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidth(100); // 占页面宽度 90%
			dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			dbTable.setAutoFillEmptyCells(true); // 自动填满
			dbTable.setBorderWidth(1); // 边框宽度
			dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
			dbTable.setSpacing(0);// 即单元格之间的间距
			dbTable.setBorder(2);// 边框
			dbTable.endHeaders();
			Cell dbCell = null;
			dbCell = new Cell(new Phrase("数据库名称", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase("IP", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase("类型", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase("当前状态", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase("运行评价", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase(ip,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase(typename,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase(runstr,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new Cell(new Phrase(grade,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			
			
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(pingnow+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(pingmin+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(pingconavg+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			document.add(dbTable);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			
			
			//添加数据库信息表  缓冲区命中率等
			Table dbInfoTable = new Table(6);
			float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
			dbInfoTable.setWidths(dbInfoWidths);
			dbInfoTable.setWidth(100); // 占页面宽度 90%
			dbInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			dbInfoTable.setAutoFillEmptyCells(true); // 自动填满
			dbInfoTable.setBorderWidth(1); // 边框宽度
			dbInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			dbInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
			dbInfoTable.setSpacing(0);// 即单元格之间的间距
			dbInfoTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("数据库信息",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			String buffercache = "0";//缓冲区命中率 
			String dictionarycache = "0";//数据字典命中率 
			String librarycache = "0";//库缓存命中率 
			String pctmemorysorts = "0";//内存中的排序 
			String pctbufgets = "0";//最浪费内存的前10个语句占全部内存读取量的比例
			String opencurstr = "0";//打开的游标数 
			Hashtable memPerfValue = (Hashtable)reportHash.get("memPerfValue"); 
			Hashtable memValue = (Hashtable)reportHash.get("memValue");
			Hashtable cursors = (Hashtable)reportHash.get("cursors");
			if(cursors == null){
				cursors = new Hashtable();
			}
			if(memPerfValue == null)memPerfValue = new Hashtable();
			if(memPerfValue!=null){
				if(memPerfValue.containsKey("buffercache") &&  memPerfValue.get("buffercache") != null){
					buffercache = (String)memPerfValue.get("buffercache")+"%";
				}
				if(memPerfValue.containsKey("dictionarycache") &&  memPerfValue.get("dictionarycache") != null){
					dictionarycache = (String)memPerfValue.get("dictionarycache")+"%";
				}
				if(memPerfValue.containsKey("librarycache") &&  memPerfValue.get("librarycache") != null){
					librarycache = (String)memPerfValue.get("librarycache")+"%";	
				}		
				if(memPerfValue.containsKey("pctmemorysorts") &&  memPerfValue.get("pctmemorysorts") != null){
					pctmemorysorts = (String)memPerfValue.get("pctmemorysorts")+"%";
				}
				if(memPerfValue.containsKey("pctbufgets") &&  memPerfValue.get("pctbufgets") != null){
					pctbufgets = (String)memPerfValue.get("pctbufgets")+"%";
				}
				if(cursors.containsKey("opencur") &&  cursors.get("opencur") != null){
					opencurstr = (String)cursors.get("opencur");
				}
			}
			cell = new Cell(new Phrase("缓冲区命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase("数据字典命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase("库缓存命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase("内存中的排序", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase("最浪费内存的前10个语句占全部内存读取量的比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase("打开的游标数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(buffercache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(dictionarycache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(librarycache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(pctmemorysorts, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(pctbufgets, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new Cell(new Phrase(opencurstr, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			document.add(dbInfoTable);
			
			//添加内存配置信息等
			String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
			String[] sysItemch1={"共享池","大型池","缓冲区高速缓存","Java池"};
			String[] sysItem2={"aggregate_PGA_target_parameter","total_PGA_allocated","maximum_PGA_allocated"};
			String[] sysItemch2={"总计PGA目标","分配的当前PGA","分配的最大PGA"};
			Table ncTable = new Table(7);
			float[] ncWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			//HONGLI MODIFY END1
			ncTable.setWidths(ncWidths);
			ncTable.setWidth(100); // 占页面宽度 90%
			ncTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			ncTable.setAutoFillEmptyCells(true); // 自动填满
			ncTable.setBorderWidth(1); // 边框宽度
			ncTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			ncTable.setPadding(2);// 衬距，看效果就知道什么意思了
			ncTable.setSpacing(0);// 即单元格之间的间距
			ncTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("内存配置信息",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch2[0], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch2[1], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch2[2], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch1[0], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch1[1], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch1[2], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(sysItemch1[3], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem2[0])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem2[1])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem2[2])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem1[0])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem1[1])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem1[2])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new Cell(new Phrase(memValue.get(sysItem1[3])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			document.add(ncTable);
			
			//HONGLI MODIFY START1  表空间信息等
			Table aTable1 = new Table(11);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f ,220f ,220f ,220f ,220f };
			//HONGLI MODIFY END1
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框
			cell = new Cell(new Phrase("表空间信息",
					titleFont));
			cell.setColspan(11);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("文件名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD START1
			cell = new Cell(new Phrase("物理读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理块读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("物理块写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD END1 
			
			
			cell = new Cell(new Phrase("文件状态", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
			// 表空间信息
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			int row = 0;
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3
		
				row = i + 1;
				String rowStr = "" + row;
				cell = new Cell(new Phrase(rowStr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(_filename, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(tablespace, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(size, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(free, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(percent, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				
				//HONGLI ADD START4
				cell = new Cell(new Phrase(pyr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pbr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pyw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(pbw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				//HONGLI ADD END4
				
				cell = new Cell(new Phrase(status, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
		
			}
			document.add(aTable1);
			
//			事 件 汇 报 
			Table evenInfoTable = new Table(2);
			float[] evenInfoWidths = { 220f, 220f};
			evenInfoTable.setWidths(evenInfoWidths);
			evenInfoTable.setWidth(100); // 占页面宽度 90%
			evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
			evenInfoTable.setBorderWidth(1); // 边框宽度
			evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
			evenInfoTable.setSpacing(0);// 即单元格之间的间距
			evenInfoTable.setBorder(2);// 边框
			String downnum = (String)reportHash.get("downnum");
			String count = String.valueOf(reportHash.get("count"));
			cell = new Cell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			evenInfoTable.addCell(cell);
			cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			evenInfoTable.addCell(cell);
			cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			evenInfoTable.addCell(cell);
			cell = new Cell(new Phrase(downnum, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			evenInfoTable.addCell(cell);
			cell = new Cell(new Phrase(count, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			evenInfoTable.addCell(cell);
			document.add(evenInfoTable);
			
			addEventListToDoc(document, titleFont, contextFont);
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}

}
	
	
	
	/**
	 * @author HONGLI 打印oracle综合性能pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportOracleCldPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			PdfPTable dbTable = new PdfPTable(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidthPercentage(100);
			PdfPCell dbCell = null;
			dbCell = new PdfPCell(new Phrase("数据库名称", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("IP", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("类型", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("当前状态", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("运行评价", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(ip,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(typename,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(runstr,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(grade,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			
			
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingnow+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingmin+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingconavg+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
//			img.setAbsolutePosition(0, 0);
			img.scalePercent(76);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(dbTable);
			document.add(new Paragraph("\n"));
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			
			
			//添加数据库信息表  缓冲区命中率等
			PdfPTable dbInfoTable = new PdfPTable(6);
			float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
			dbInfoTable.setWidths(dbInfoWidths);
			dbInfoTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库信息",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			String buffercache = "0";//缓冲区命中率 
			String dictionarycache = "0";//数据字典命中率 
			String librarycache = "0";//库缓存命中率 
			String pctmemorysorts = "0";//内存中的排序 
			String pctbufgets = "0";//最浪费内存的前10个语句占全部内存读取量的比例
			String opencurstr = "0";//打开的游标数 
			Hashtable memPerfValue = (Hashtable)reportHash.get("memPerfValue"); 
			Hashtable memValue = (Hashtable)reportHash.get("memValue");
			Hashtable cursors = (Hashtable)reportHash.get("cursors");
			if(cursors == null){
				cursors = new Hashtable();
			}
			if(memPerfValue == null)memPerfValue = new Hashtable();
			if(memPerfValue!=null){
				if(memPerfValue.containsKey("buffercache") &&  memPerfValue.get("buffercache") != null){
					buffercache = (String)memPerfValue.get("buffercache")+"%";
				}
				if(memPerfValue.containsKey("dictionarycache") &&  memPerfValue.get("dictionarycache") != null){
					dictionarycache = (String)memPerfValue.get("dictionarycache")+"%";
				}
				if(memPerfValue.containsKey("librarycache") &&  memPerfValue.get("librarycache") != null){
					librarycache = (String)memPerfValue.get("librarycache")+"%";	
				}		
				if(memPerfValue.containsKey("pctmemorysorts") &&  memPerfValue.get("pctmemorysorts") != null){
					pctmemorysorts = (String)memPerfValue.get("pctmemorysorts")+"%";
				}
				if(memPerfValue.containsKey("pctbufgets") &&  memPerfValue.get("pctbufgets") != null){
					pctbufgets = (String)memPerfValue.get("pctbufgets")+"%";
				}
				if(cursors.containsKey("opencur") &&  cursors.get("opencur") != null){
					opencurstr = (String)cursors.get("opencur");
				}
			}
			cell = new PdfPCell(new Phrase("缓冲区命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据字典命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库缓存命中率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("内存中的排序", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最浪费内存的前10个语句占全部内存读取量的比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("打开的游标数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(buffercache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(dictionarycache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(librarycache, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pctmemorysorts, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pctbufgets, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase(opencurstr, contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			document.add(dbInfoTable);
			document.add(new Paragraph("\n"));
			
			//添加内存配置信息等
			String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
			String[] sysItemch1={"共享池","大型池","缓冲区高速缓存","Java池"};
			String[] sysItem2={"aggregate_PGA_target_parameter","total_PGA_allocated","maximum_PGA_allocated"};
			String[] sysItemch2={"总计PGA目标","分配的当前PGA","分配的最大PGA"};
			PdfPTable ncTable = new PdfPTable(7);
			float[] ncWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			//HONGLI MODIFY END1
			ncTable.setWidths(ncWidths);
			ncTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("内存配置信息",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch2[0], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch2[1], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch2[2], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch1[0], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch1[1], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch1[2], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysItemch1[3], titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem2[0])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem2[1])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem2[2])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem1[0])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem1[1])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem1[2])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase(memValue.get(sysItem1[3])+"MB", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			document.add(ncTable);
			document.add(new Paragraph("\n"));
			
			//HONGLI MODIFY START1  表空间信息等
			PdfPTable aTable1 = new PdfPTable(11);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f ,220f ,220f ,220f  };
			//HONGLI MODIFY END1
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("表空间信息",
					titleFont));
			cell.setColspan(11);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("文件名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD START1
			cell = new PdfPCell(new Phrase("物理读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理块读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理块写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD END1 
			
			
			cell = new PdfPCell(new Phrase("文件状态", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
			// 表空间信息
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			int row = 0;
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3
		
				row = i + 1;
				String rowStr = "" + row;
				cell = new PdfPCell(new Phrase(rowStr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(_filename, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(tablespace, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(size, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(free, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(percent, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				
				//HONGLI ADD START4
				cell = new PdfPCell(new Phrase(pyr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pbr, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pyw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pbw, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				//HONGLI ADD END4
				
				cell = new PdfPCell(new Phrase(status, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
		
			}
			document.add(aTable1);
			
//			添加事件汇报信息等
			document.add(new Paragraph("\n"));
			PdfPTable eventTable = new PdfPTable(2);
			float[] eventWidths = { 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			document.add(eventTable);
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.add(new Paragraph("\n"));
			//添加事件列表
			addEventLisToPdf(document);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}


	}
	
	/**
	 * @author HONGLI 打印oracle综合性能excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportOracleCldExcel(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName)); 
			
			
			String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
			String[] sysItemch1={"共享池","大型池","缓冲区高速缓存","Java池"};
			String[] sysItem2={"aggregate_PGA_target_parameter","total_PGA_allocated","maximum_PGA_allocated"};
			String[] sysItemch2={"总计PGA目标","分配的当前PGA","分配的最大PGA"};
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			String buffercache = "0";//缓冲区命中率 
			String dictionarycache = "0";//数据字典命中率 
			String librarycache = "0";//库缓存命中率 
			String pctmemorysorts = "0";//内存中的排序 
			String pctbufgets = "0";//最浪费内存的前10个语句占全部内存读取量的比例
			String opencurstr = "0";//打开的游标数 
			Hashtable memPerfValue = (Hashtable)reportHash.get("memPerfValue"); 
			Hashtable memValue = (Hashtable)reportHash.get("memValue");
			Hashtable cursors = (Hashtable)reportHash.get("cursors");
			if(cursors == null){
				cursors = new Hashtable();
			}
			if(memPerfValue == null)memPerfValue = new Hashtable();
			if(memPerfValue!=null){
				if(memPerfValue.containsKey("buffercache") &&  memPerfValue.get("buffercache") != null){
					buffercache = (String)memPerfValue.get("buffercache")+"%";
				}
				if(memPerfValue.containsKey("dictionarycache") &&  memPerfValue.get("dictionarycache") != null){
					dictionarycache = (String)memPerfValue.get("dictionarycache")+"%";
				}
				if(memPerfValue.containsKey("librarycache") &&  memPerfValue.get("librarycache") != null){
					librarycache = (String)memPerfValue.get("librarycache")+"%";	
				}		
				if(memPerfValue.containsKey("pctmemorysorts") &&  memPerfValue.get("pctmemorysorts") != null){
					pctmemorysorts = (String)memPerfValue.get("pctmemorysorts")+"%";
				}
				if(memPerfValue.containsKey("pctbufgets") &&  memPerfValue.get("pctbufgets") != null){
					pctbufgets = (String)memPerfValue.get("pctbufgets")+"%";
				}
				if(cursors.containsKey("opencur") &&  cursors.get("opencur") != null){
					opencurstr = (String)cursors.get("opencur");
				}
			}

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			
			//数据库ip信息
			tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "类型", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5, vo.getDbName(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, ip,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, typename,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, runstr,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, grade,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			
			
			
			//连通率
			tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 8, pingnow+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 8, pingmin+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 8, pingconavg+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 9, 7, 7, file));
			// allRow = allRow+7;
			int row = 17;
			
//			数据库信息
			tmpLabel = new Label(0, row, "连 接 信 息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "缓冲区命中率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "数据字典命中率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "库缓存命中率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "内存中的排序", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "最浪费内存的前10个语句占全部内存读取量的比例", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "打开的游标数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, buffercache,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, dictionarycache,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, librarycache,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, pctmemorysorts,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, pctbufgets,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, opencurstr,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			

			
//			添加内存配置信息等
			row = row+2;
			tmpLabel = new Label(0, row, "内存配置信息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row,sysItemch2[0], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row,sysItemch2[1], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row,sysItemch2[2], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row,sysItemch1[0], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row,sysItemch1[1], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row,sysItemch1[2], b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row,sysItemch1[3], b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, memValue.get(sysItem2[0])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, memValue.get(sysItem2[1])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, memValue.get(sysItem2[2])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, memValue.get(sysItem1[0])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, memValue.get(sysItem1[1])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, memValue.get(sysItem1[2])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, memValue.get(sysItem1[3])+"MB",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//表空间信息
			row = row + 2;
			tmpLabel = new Label(0, row, "表空间信息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "文件名", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "表空间", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "空间大小（MB）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "空闲大小（MB）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "空闲比例", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			//HONGLI ADD START1
			tmpLabel = new Label(6, row, "物理读", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "物理块读", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row, "物理写", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row, "物理块写", b_labelFormat);
			sheet.addCell(tmpLabel);
			//HONGLI ADD END1
			
			//HONGLI MODIFY START1
			tmpLabel = new Label(10, row, "文件状态", b_labelFormat);
			//HONGLI MODIFY END1
			
			sheet.addCell(tmpLabel);
		
			// 表空间信息
			row = row + 2;
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3

				
				tmpLabel = new Label(0, row, String.valueOf(i+1), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, _filename, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, tablespace, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, size, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, free, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, percent, p_labelFormat);
				sheet.addCell(tmpLabel);
				
				//HONGLI ADD START4
				tmpLabel = new Label(6, row, pyr, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(7, row, pbr, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(8, row, pyw, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(9, row, pbw, p_labelFormat);
				sheet.addCell(tmpLabel);
				//HONGLI ADD END4
				
				tmpLabel = new Label(10, row, status, p_labelFormat);
				sheet.addCell(tmpLabel);
				row++;

			}
//			事 件 汇 报 
			row = row+2;
			tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, reportHash.get("count")+"",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//增加事件列表
			addEventListToExcel(sheet, row);

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

//	// --------------zhushouzhi orapdf----------------------------------------
//	public void createReport_oraPDF(String filename) throws DocumentException,
//			IOException {
//		if (impReport.getTable() == null) {
//			fileName = null;
//			return;
//		}
//		try {
//			// 设置纸张大小
//			Document document = new Document(PageSize.A4);
//			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
//			PdfWriter.getInstance(document, new FileOutputStream(filename));
//			document.open();
//			// 设置中文字体
//			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
//					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
//
//			// 标题字体风格
//			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
//			// 正文字体风格
//			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
//			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
//			String hostname = (String) reportHash.get("dbname");
//			String ip = (String) reportHash.get("ip");
//			String newip = doip(ip);
//			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
//			// 设置标题格式对齐方式
//			title.setAlignment(Element.ALIGN_CENTER);
//			// title.setFont(titleFont);
//			document.add(title);
//			String Ping = (String) reportHash.get("Ping");
//			String starttime = (String) reportHash.get("starttime");
//			String totime = (String) reportHash.get("totime");
//
//			Hashtable maxping = (Hashtable) reportHash.get("ping");
//
//			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//
//			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
//					+ "数据统计时间段:" + starttime + " 至 " + totime;
//
//			Paragraph context = new Paragraph(contextString, contextFont1);
//			// 正文格式左对齐
//			context.setAlignment(Element.ALIGN_LEFT);
//			// context.setFont(contextFont);
//			// 离上一段落（标题）空的行数
//			context.setSpacingBefore(5);
//			// 设置第一行空的列数
//			context.setFirstLineIndent(5);
//			document.add(context);
//			document.add(new Paragraph("\n"));
//			/*
//			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
//			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
//			 * starttime + " 至 " + totime);
//			 */
//			PdfPTable aTable = new PdfPTable(3);
//			float[] widths = { 220f, 220f, 220f };
//			aTable.setWidths(widths);
//			aTable.setWidthPercentage(100);
//			PdfPCell cell = null;
//			cell = new PdfPCell(new Phrase("连通率", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase(""));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable.addCell(cell);
//
//			// 设置图片
//			Image img = Image.getInstance(ResourceCenter.getInstance()
//					.getSysPath()
//					+ "/resource/image/jfreechart/"
//					+ newip
//					+ "ConnectUtilization" + ".png");
//			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
//			img.scalePercent(76);
//			document.add(aTable);
//			document.add(img);
//			document.add(new Paragraph("\n"));
//			PdfPTable aTable1 = new PdfPTable(8);
//			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
//			aTable1.setWidths(width);
//			aTable1.setWidthPercentage(100);
//			aTable1.setHeaderRows(1);
//			cell = new PdfPCell(new Phrase("表空间信息", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("序号", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("文件名", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("表空间", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("空间大小（MB）", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("空闲大小（MB）", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("空闲比例", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			cell = new PdfPCell(new Phrase("文件状态", titleFont));
//			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//			aTable1.addCell(cell);
//			// aTable1.endHeaders();
//
//			// 表空间信息
//			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
//			int row = 0;
//			for (int i = 0; i < tableinfo_v.size(); i++) {
//				Hashtable ht = (Hashtable) tableinfo_v.get(i);
//				String _filename = ht.get("file_name").toString();
//				String tablespace = ht.get("tablespace").toString();
//				String size = ht.get("size_mb").toString();
//				String free = ht.get("free_mb").toString();
//				String percent = ht.get("percent_free").toString();
//				String status = ht.get("status").toString();
//
//				aTable1.addCell(new Phrase(""));
//				row = i + 1;
//				String rowStr = "" + row;
//				cell = new PdfPCell(new Phrase(rowStr));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(_filename));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(tablespace));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(size));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(free));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(percent));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//				cell = new PdfPCell(new Phrase(status));
//				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//				aTable1.addCell(cell);
//
//			}
//
//			if (impReport.getChart() != null) {
//				ByteArrayOutputStream baos = new ByteArrayOutputStream();
//				try {
//					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
//							.getChart(), impReport.getChart().getWidth(),
//							impReport.getChart().getHeight());
//				} catch (IOException ioe) {
//				}
//				Image img1 = Image.getInstance(baos.toByteArray());
//				img1.setAbsolutePosition(0, 0);
//				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
//
//				document.add(img1);
//			}
//
//			document.add(aTable1);
//			document.close();
//		} catch (Exception e) {
//			// SysLogger.error("Error in ExcelReport.createReport()",e);
//			e.printStackTrace();
//		}
//
//	}
	
//	 --------------zhushouzhi orapdf----------------------------------------
	/**
	 * MODIFY HONGLI 2010-10-27
	 */
	public void createReport_oraPDF(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);

			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont1);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			//HONGLI MODIFY START1
			PdfPTable aTable1 = new PdfPTable(12);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f , 220f , 220f , 220f , 220f };
			//HONGLI MODIFY END1
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			aTable1.setHeaderRows(1);
			cell = new PdfPCell(new Phrase("表空间信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("文件名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲比例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD START1
			cell = new PdfPCell(new Phrase("物理读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理块读", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("物理块写", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//HONGLI ADD END1
			cell = new PdfPCell(new Phrase("文件状态", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 表空间信息
			Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
			
			//HONGLI ADD START2
			Hashtable dbio = (Hashtable)reportHash.get("dbio");
			//HONGLI ADD END2
			
			int row = 0;
			for (int i = 0; i < tableinfo_v.size(); i++) {
				Hashtable ht = (Hashtable) tableinfo_v.get(i);
				String _filename = ht.get("file_name").toString();
				String tablespace = ht.get("tablespace").toString();
				String size = ht.get("size_mb").toString();
				String free = ht.get("free_mb").toString();
				String percent = ht.get("percent_free").toString();
				String status = ht.get("status").toString();
				
				//HONGLI ADD START3
				String pyr = "";
				String pbr = "";
				String pyw = "";
				String pbw = "";
				if(dbio.containsKey(_filename)){
					Hashtable iodetail = (Hashtable)dbio.get(_filename);
					if(iodetail != null && iodetail.size()>0){
						pyr = (String)iodetail.get("pyr");
						pbr = (String)iodetail.get("pbr");
						pyw = (String)iodetail.get("pyw");
						pbw = (String)iodetail.get("pbw");
					}
				}
				//HONGLI ADD END3

				aTable1.addCell(new Phrase(""));
				row = i + 1;
				String rowStr = "" + row;
				cell = new PdfPCell(new Phrase(rowStr));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(_filename));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(tablespace));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(size));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(free));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(percent));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				//HONGLI ADD START4
				cell = new PdfPCell(new Phrase(pyr));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pbr));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pyw));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase(pbw));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				//HONGLI ADD END4
				cell = new PdfPCell(new Phrase(status));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);

			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}

	}

	// -------------------------------end----------------------------------
	// zhushouzhi-----------------db ora业务分析
	public void createReport_oraNewDoc(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
//		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
//				"java pool" };
		String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("SGA(MB)", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("共享池", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 获得SGA信息
		String valueall = "---";
		String valuebig = "---";
		String valuebuffer = "---";
		String valuejava = "---";
		if (oramem != null) {

			if (oramem.get(sysItem1[0]) != null) {
				valueall = (String) oramem.get(sysItem1[0]);
			}
			if (oramem.get(sysItem1[1]) != null) {
				valuebig = (String) oramem.get(sysItem1[1]);
			}
			if (oramem.get(sysItem1[2]) != null) {
				valuebuffer = (String) oramem.get(sysItem1[2]);
			}
			if (oramem.get(sysItem1[3]) != null) {
				valuejava = (String) oramem.get(sysItem1[3]);
			}
		}
		// SGA END

		cell = new Cell(new Phrase(valueall, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("大型池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuebig, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲区高速缓存", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuebuffer, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Java池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuejava, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("PGA(MB)", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String[] sysItem2 = { "aggregate_PGA_target_parameter",
				"total_PGA_allocated", "maximum_PGA_allocated",
				"cache_hit_percentage", "bytes_processed",
				"extra_bytes_read/written", "recompute_count_(total)" };
		String valuepgaall = "---";
		String valuepganow = "---";
		String valuepgabig = "---";
		if (oramem != null) {

			if (oramem.get(sysItem2[0]) != null) {
				valuepgaall = (String) oramem.get(sysItem2[0]);
			}
			if (oramem.get(sysItem2[1]) != null) {
				valuepganow = (String) oramem.get(sysItem2[1]);
			}
			if (oramem.get(sysItem2[2]) != null) {
				valuepgabig = (String) oramem.get(sysItem2[2]);
			}
		}

		cell = new Cell(new Phrase("总计PGA目标", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		if (!"---".equals(valuepgaall)) {
			valuepgaall = CEIString.round(Double.valueOf(valuepgaall.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepgaall, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("当前配置PGA", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (!"---".equals(valuepganow)) {
			valuepganow = CEIString.round(Double.valueOf(valuepganow.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepganow, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("分配最大PGA", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (!"---".equals(valuepgabig)) {
			valuepgabig = CEIString.round(Double.valueOf(valuepgabig.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepgabig, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 写表空间
		Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
		OraspaceconfigDao oraspaceconfigDao = new OraspaceconfigDao();
		List list = null;
		try {
			list = oraspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			oraspaceconfigDao.close();
		}
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(2 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("表空间名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("空间大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("空闲比例(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("文件状态", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 表空间参数指标====

		int row = 0;
		for (int i = 0; i < tableinfo_v.size(); i++) {
			Hashtable ht = (Hashtable) tableinfo_v.get(i);
			String tablespace = ht.get("tablespace").toString();
			for (int j = 0; j < list.size(); j++) {
				Oraspaceconfig vo1 = (Oraspaceconfig) list.get(j);
				if (vo1.getSpacename().equals(tablespace)) {
					String size = ht.get("size_mb").toString();
					String percent = ht.get("percent_free").toString();
					String status = ht.get("status").toString();

					cell = new Cell(new Phrase(tablespace, contextFont1));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(size, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(percent, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(status, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					row = row + 1;
				}
			}
		}
		// ===============end

		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "表空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连通状况良好，未出现宕机事件。";

		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// zhushouzhi-----------------------db 业务分析end
	public void createReport_oraNewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
//		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
//				"java pool" };
		String[] sysItem1={"shared_pool","large_pool","DEFAULT_buffer_cache","java_pool"};
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 10, Font.NORMAL);
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("SGA(MB)", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("共享池", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 获得SGA信息
		String valueall = "---";
		String valuebig = "---";
		String valuebuffer = "---";
		String valuejava = "---";
		if (oramem != null) {

			if (oramem.get(sysItem1[0]) != null) {
				valueall = (String) oramem.get(sysItem1[0]);
			}
			if (oramem.get(sysItem1[1]) != null) {
				valuebig = (String) oramem.get(sysItem1[1]);
			}
			if (oramem.get(sysItem1[2]) != null) {
				valuebuffer = (String) oramem.get(sysItem1[2]);
			}
			if (oramem.get(sysItem1[3]) != null) {
				valuejava = (String) oramem.get(sysItem1[3]);
			}
		}
		// SGA END

		cell = new Cell(new Phrase(valueall));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("大型池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuebig));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲区高速缓存", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuebuffer));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Java池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(valuejava));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("PGA(MB)", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String[] sysItem2 = { "aggregate_PGA_target_parameter",
				"total_PGA_allocated", "maximum_PGA_allocated",
				"cache_hit_percentage", "bytes_processed",
				"extra_bytes_read/written", "recompute_count_(total)" };
		String valuepgaall = "---";
		String valuepganow = "---";
		String valuepgabig = "---";
		if (oramem != null) {

			if (oramem.get(sysItem2[0]) != null) {
				valuepgaall = (String) oramem.get(sysItem2[0]);
			}
			if (oramem.get(sysItem2[1]) != null) {
				valuepganow = (String) oramem.get(sysItem2[1]);
			}
			if (oramem.get(sysItem2[2]) != null) {
				valuepgabig = (String) oramem.get(sysItem2[2]);
			}
		}

		cell = new Cell(new Phrase("总计PGA目标", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		if (!"---".equals(valuepgaall)) {
			valuepgaall = CEIString.round(Double.valueOf(valuepgaall.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepgaall));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("当前配置PGA", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (!"---".equals(valuepganow)) {
			valuepganow = CEIString.round(Double.valueOf(valuepganow.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepganow));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("分配最大PGA", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (!"---".equals(valuepgabig)) {
			valuepgabig = CEIString.round(Double.valueOf(valuepgabig.replace(
					"MB", "")), 2)
					+ "";
		}
		cell = new Cell(new Phrase(valuepgabig));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 写表空间
		Vector tableinfo_v = (Vector) reportHash.get("tableinfo_v");
		OraspaceconfigDao oraspaceconfigDao = new OraspaceconfigDao();
		List list = null;
		try {
			list = oraspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			oraspaceconfigDao.close();
		}
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(2 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("表空间名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("空间大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("空闲比例(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("文件状态", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 表空间参数指标====

		int row = 0;
		for (int i = 0; i < tableinfo_v.size(); i++) {
			Hashtable ht = (Hashtable) tableinfo_v.get(i);
			String tablespace = ht.get("tablespace").toString();
			for (int j = 0; j < list.size(); j++) {
				Oraspaceconfig vo1 = (Oraspaceconfig) list.get(j);
				if (vo1.getSpacename().equals(tablespace)) {
					String size = ht.get("size_mb").toString();
					String percent = ht.get("percent_free").toString();
					String status = ht.get("status").toString();

					cell = new Cell(new Phrase(tablespace));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(size));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(percent));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(status));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					row = row + 1;
				}
			}
		}
		// ===============end
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "表空间超过阀值事件" + count + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连通状况良好，未出现宕机事件。";

		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont));
		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// ---------------sql execl---------------------
	public void createReport_sql(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "数据库", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "总大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "使用大小（MB）", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "利用率", _labelFormat);
			sheet.addCell(tmpLabel);
			int row = 14;
			
			// 数据库信息
			Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
			Hashtable alldatabase = new Hashtable();
			if (dbValue.get("database") != null)
				alldatabase = (Hashtable) dbValue.get("database");
			Vector names = new Vector();
			if (dbValue.get("names") != null)
				names = (Vector) dbValue.get("names");

			if (alldatabase != null && alldatabase.size() > 0) {
				if (names == null)
					names = new Vector();
				for (int i = 0; i < names.size(); i++) {
					String key = (String) names.get(i);
					if (alldatabase.get(key) == null)
						continue;
					Hashtable data = (Hashtable) alldatabase.get(key);
					String dbname = data.get("dbname").toString();
					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();
					row = row + 1;
					tmpLabel = new Label(0, row, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, dbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, size, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, usedsize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, usedperc, p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// zhushouzhi--------------sql doc报表

	public void createReport_sqlDoc(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片

			document.add(aTable);
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			document.add(img);

			document.add(new Paragraph("\n"));
			Table aTable1 = new Table(6);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框

			cell = new Cell(new Phrase("库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("数据库", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("总大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("使用大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 数据库信息
			Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
			Hashtable alldatabase = new Hashtable();
			if (dbValue.get("database") != null)
				alldatabase = (Hashtable) dbValue.get("database");
			Vector names = new Vector();
			if (dbValue.get("names") != null)
				names = (Vector) dbValue.get("names");

			if (alldatabase != null && alldatabase.size() > 0) {
				if (names == null)
					names = new Vector();
				int row = 1;
				for (int i = 0; i < names.size(); i++) {
					String key = (String) names.get(i);
					if (alldatabase.get(key) == null)
						continue;
					Hashtable data = (Hashtable) alldatabase.get(key);
					String dbname = data.get("dbname").toString();
					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();
					cell = new Cell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(row + "", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(dbname, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(size, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(usedsize, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(usedperc, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					row++;

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// end-----------------------sql
	// zhushouzhi------------------------ sql pdf
	public void createReport_sqlPDF(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);

			document.add(new Paragraph("\n"));
			PdfPTable aTable1 = new PdfPTable(6);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("总大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("使用大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 数据库信息
			Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
			Hashtable alldatabase = new Hashtable();
			if (dbValue.get("database") != null)
				alldatabase = (Hashtable) dbValue.get("database");
			Vector names = new Vector();
			if (dbValue.get("names") != null)
				names = (Vector) dbValue.get("names");

			if (alldatabase != null && alldatabase.size() > 0) {
				if (names == null)
					names = new Vector();
				int row = 1;
				for (int i = 0; i < names.size(); i++) {
					String key = (String) names.get(i);
					if (alldatabase.get(key) == null)
						continue;
					Hashtable data = (Hashtable) alldatabase.get(key);
					String dbname = data.get("dbname").toString();
					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();
					cell = new PdfPCell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(row + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(dbname));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(size));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usedsize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usedperc));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					row++;

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// zhushouzhi--------------------------end sql pdf综合报表
	
	// zhushouzhi-----------------db sql业务分析
	public void createReport_sqlNewDoc(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
		Hashtable sqlsys = (Hashtable) reportHash.get("sqlsys");
		String[] sysItem1 = { "shared_pool", "large_pool", "buffer_cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// mems
		Hashtable sqlValue = new Hashtable();
		if ((Hashtable) reportHash.get("sqlValue") != null)
			sqlValue = (Hashtable) reportHash.get("sqlValue");
		Hashtable memValue = new Hashtable();
		if (sqlValue.get("mems") != null)
			memValue = (Hashtable) sqlValue.get("mems");
		String totalMemory = "---";
		String sqlMem = "---";
		String optMemory = "---";
		String lockMem = "---";
		String conMemory = "---";
		if (memValue != null && memValue.size() > 0) {
			if (memValue.get("totalMemory") != null)
				totalMemory = (String) memValue.get("totalMemory");// total
			if (memValue.get("sqlMem") != null)
				sqlMem = (String) memValue.get("sqlMem");// sql缓存
			if (memValue.get("optMemory") != null)
				optMemory = (String) memValue.get("optMemory");// 内存优化
			if (memValue.get("lockMem") != null)
				lockMem = (String) memValue.get("lockMem");// 锁定内存
			if (memValue.get("conMemory") != null)
				conMemory = (String) memValue.get("conMemory");// 连接内存
		}
		cell = new Cell(new Phrase("内存(KB)", titleFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存总数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(totalMemory.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("SQL缓冲池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sqlMem.replace(".0", ""), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存优化", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(optMemory.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("锁定内存", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lockMem.replace(".0", ""), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("连接内存", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(conMemory.replace(".0", ""),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("补丁包", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String productlevel = "";
		if (sqlsys.get("productlevel") != null) {
			productlevel = (String) sqlsys.get("productlevel");
		}
		cell = new Cell(new Phrase(productlevel));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String IsSingleUser = "";
		if (sqlsys.get("IsSingleUser") != null) {
			IsSingleUser = (String) sqlsys.get("IsSingleUser");
		}
		cell = new Cell(new Phrase("单用户模式", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsSingleUser, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String IsIntegratedSecurityOnly = "";
		if (sqlsys.get("IsIntegratedSecurityOnly") != null) {
			IsIntegratedSecurityOnly = (String) sqlsys
					.get("IsIntegratedSecurityOnly");
		}

		cell = new Cell(new Phrase("集成安全性模式", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsIntegratedSecurityOnly, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String IsClustered = "";
		if (sqlsys.get("IsClustered") != null) {
			IsClustered = (String) sqlsys.get("IsClustered");
		}

		cell = new Cell(new Phrase("在故障转移群集中配置服务器实例", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsClustered, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 库名称
		Hashtable dbValue = (Hashtable) reportHash.get("dbValue");
		Hashtable alldatabase = new Hashtable();
		Hashtable alllogfile = new Hashtable();
		alldatabase = (Hashtable) dbValue.get("database");
		if (alldatabase == null)
			alldatabase = new Hashtable();
		alllogfile = (Hashtable) dbValue.get("logfile");
		if (alllogfile == null)
			alllogfile = new Hashtable();
		Vector names = (Vector) dbValue.get("names");

		/*
		 * OraspaceconfigDao oraspaceconfigDao = new OraspaceconfigDao(); List
		 * list = oraspaceconfigDao.getByIp(ip, 1);
		 */
		SqldbconfigDao sqldbconfigDao = new SqldbconfigDao();

		List list = null;
		try {
			list = sqldbconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sqldbconfigDao.close();
		}
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(2 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("库名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("利用率（%）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 表空间参数指标====
		// 库名称信息====

		int row = 0;
		for (int i = 0; i < names.size(); i++) {
			Hashtable ht = (Hashtable) dbValue.get(i);
			String key = (String) names.get(i);
			if (alldatabase.get(key) == null)
				continue;
			Hashtable data = (Hashtable) alldatabase.get(key);
			String dbname = data.get("dbname").toString();

			for (int j = 0; j < list.size(); j++) {
				Sqldbconfig vo1 = (Sqldbconfig) list.get(j);
				if (vo1.getDbname().equals(dbname)) {

					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();

					cell = new Cell(new Phrase(dbname, contextFont1));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(size, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(usedsize, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(usedperc, contextFont1));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					row = row + 1;
				}
			}
		}
		// ===============end

		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum))

		{
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}
	// zhushouzhi-----------------------db doc业务分析end
	
	// zhushouzhi-----------------db sql业务分析
	public void createReport_sqlNewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		Hashtable sqlsys = (Hashtable) reportHash.get("sqlsys");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont = new Font(bfChinese, 11, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// mems
		Hashtable sqlValue = new Hashtable();
		if ((Hashtable) reportHash.get("sqlValue") != null)
			sqlValue = (Hashtable) reportHash.get("sqlValue");
		Hashtable memValue = new Hashtable();
		if (sqlValue.get("mems") != null)
			memValue = (Hashtable) sqlValue.get("mems");
		String totalMemory = "---";
		String sqlMem = "---";
		String optMemory = "---";
		String lockMem = "---";
		String conMemory = "---";
		if (memValue != null && memValue.size() > 0) {
			if (memValue.get("totalMemory") != null)
				totalMemory = (String) memValue.get("totalMemory");// total
			if (memValue.get("sqlMem") != null)
				sqlMem = (String) memValue.get("sqlMem");// sql缓存
			if (memValue.get("optMemory") != null)
				optMemory = (String) memValue.get("optMemory");// 内存优化
			if (memValue.get("lockMem") != null)
				lockMem = (String) memValue.get("lockMem");// 锁定内存
			if (memValue.get("conMemory") != null)
				conMemory = (String) memValue.get("conMemory");// 连接内存
		}
		cell = new Cell(new Phrase("内存(KB)", titleFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存总数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(totalMemory.replace(".0", "")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("SQL缓冲池", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sqlMem.replace(".0", "")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存优化", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(optMemory.replace(".0", "")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("锁定内存", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lockMem.replace(".0", "")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("连接内存", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(conMemory.replace(".0", "")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("补丁包", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String productlevel = "";
		if (sqlsys.get("productlevel") != null) {
			productlevel = (String) sqlsys.get("productlevel");
		}
		String IsSingleUser = "";
		if (sqlsys.get("IsSingleUser") != null) {
			IsSingleUser = (String) sqlsys.get("IsSingleUser");
		}

		String IsIntegratedSecurityOnly = "";
		if (sqlsys.get("IsIntegratedSecurityOnly") != null) {
			IsIntegratedSecurityOnly = (String) sqlsys
					.get("IsIntegratedSecurityOnly");
		}
		String IsClustered = "";
		if (sqlsys.get("IsClustered") != null) {
			IsClustered = (String) sqlsys.get("IsClustered");
		}

		cell = new Cell(new Phrase(productlevel));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("单用户模式", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsSingleUser, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("集成安全性模式", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsIntegratedSecurityOnly, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("在故障转移群集中配置服务器实例", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(IsClustered, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 库名称
		Hashtable dbValue = (Hashtable) reportHash.get("dbValue");
		Hashtable alldatabase = new Hashtable();
		Hashtable alllogfile = new Hashtable();
		alldatabase = (Hashtable) dbValue.get("database");
		if (alldatabase == null)
			alldatabase = new Hashtable();
		alllogfile = (Hashtable) dbValue.get("logfile");
		if (alllogfile == null)
			alllogfile = new Hashtable();
		Vector names = (Vector) dbValue.get("names");

		SqldbconfigDao sqldbconfigDao = new SqldbconfigDao();

		List list = null;
		try {
			list = sqldbconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sqldbconfigDao.close();
		}

		// // List list = sqldbconfigDao.getByIp(ip, 1);
		// for (int i = 0; i < list.size(); i++) {
		//
		// }
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(2 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("库名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("利用率（%）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// 库名称信息====

		int row = 0;
		for (int i = 0; i < names.size(); i++) {
			Hashtable ht = (Hashtable) dbValue.get(i);
			String key = (String) names.get(i);
			if (alldatabase.get(key) == null)
				continue;
			Hashtable data = (Hashtable) alldatabase.get(key);
			String dbname = data.get("dbname").toString();

			for (int j = 0; j < list.size(); j++) {
				Sqldbconfig vo1 = (Sqldbconfig) list.get(j);
				if (vo1.getDbname().equals(dbname)) {

					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();

					cell = new Cell(new Phrase(dbname));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(size));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(usedsize));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(usedperc));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					row = row + 1;
				}
			}
		}
		// ===============end

		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum))

		{
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}
	// --------------------------------sybase------------------------------------
	// sybase--------------------doc report zhushouzhi
	public void createReport_sybDoc(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			Table aTable1 = new Table(6);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框

			cell = new Cell(new Phrase("库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("可用大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("可利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 数据库信息
			SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
			if (sysbaseVO == null)
				sysbaseVO = new SybaseVO();
			List dbsizelist = (List) sysbaseVO.getDbInfo();
			int row = 1;
			if (dbsizelist != null && dbsizelist.size() > 0) {
				for (int i = 0; i < dbsizelist.size(); i++) {

					TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
					String dbname = tablesVO.getDb_name();
					String dbsize = tablesVO.getDb_size();
					String freesize = tablesVO.getDb_freesize();
					String userdperc = tablesVO.getDb_usedperc();
					cell = new Cell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(row + "", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(dbname, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(dbsize, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(freesize, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(userdperc, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					row = row + 1;

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// ---------------------end doc report
	// zhushouzhi----------------------end sql doc报表
	public void createReport_sybPDF(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			PdfPTable aTable1 = new PdfPTable(6);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("可用大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 数据库信息
			SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
			if (sysbaseVO == null)
				sysbaseVO = new SybaseVO();
			List dbsizelist = (List) sysbaseVO.getDbInfo();
			int row = 1;
			if (dbsizelist != null && dbsizelist.size() > 0) {
				for (int i = 0; i < dbsizelist.size(); i++) {

					TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
					String dbname = tablesVO.getDb_name();
					String dbsize = tablesVO.getDb_size();
					String freesize = tablesVO.getDb_freesize();
					String userdperc = tablesVO.getDb_usedperc();
					cell = new PdfPCell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(row + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(dbname));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(dbsize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(freesize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(userdperc));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					row++;

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// ---------------------end pdf report
	// zhushouzhi------------------------ sybase pdf
	public void createReport_sybaseNewDoc(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总物理内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sysbaseVO.getTotal_physicalMemory(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总数据高速缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase(sysbaseVO.getTotal_dataCache(), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Metadata缓存(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getMetadata_cache(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储过程缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase(sysbaseVO.getProcedure_cache(), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总逻辑内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getTotal_logicalMemory(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据缓存匹配度(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getData_hitrate(), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储缓存匹配度(%)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getProcedure_hitrate(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sysbaseVO.getServerName(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getVersion(), contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// 写表空间

		SybspaceconfigDao sybspaceconfigDao = new SybspaceconfigDao();

		List list = null;
		try {
			list = sybspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sybspaceconfigDao.close();
		}

		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(8 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据库空闲时间(秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIdle(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("cpu工作时间(秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getCpu_busy(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("I/O工作时间(秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIo_busy(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IO利用率(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIo_busy_rate(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getSent_rate(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getReceived_rate(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getWrite_rate(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getRead_rate(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备个数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getDisk_count(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("活动锁个数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getLocks_count(), contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事务的个数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getXact_count(), contextFont1));
		cell.setColspan(6);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("库名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("可利用率（%）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// get dbspace message==================
		if (sysbaseVO == null)
			sysbaseVO = new SybaseVO();
		List dbsizelist = (List) sysbaseVO.getDbInfo();
		int row = 1;
		if (dbsizelist != null && dbsizelist.size() > 0) {
			for (int i = 0; i < dbsizelist.size(); i++) {

				TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
				String dbname = tablesVO.getDb_name();
				for (int j = 0; j < list.size(); j++) {
					Sybspaceconfig vo = (Sybspaceconfig) list.get(j);
					if (vo.getSpacename().equals(dbname)) {

						String dbsize = tablesVO.getDb_size();
						String freesize = tablesVO.getDb_freesize();
						String userdperc = tablesVO.getDb_usedperc();

						cell = new Cell(new Phrase(dbname, contextFont1));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(dbsize, contextFont1));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(freesize, contextFont1));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(userdperc, contextFont1));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
				}
			}
		}

		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if (!"0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		} else {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// zhushouzhi-----------------------db 业务分析end
	// -------------------------doc end
	// -----------------------业务分析 pdfreport
	// sybase===============pdf new ```zhushouzhi
	public void createReport_sybaseNewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont = new Font(bfChinese, 11, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总物理内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sysbaseVO.getTotal_physicalMemory(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总数据高速缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getTotal_dataCache()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Metadata缓存(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getMetadata_cache()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储过程缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getProcedure_cache()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总逻辑内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getTotal_logicalMemory(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据缓存匹配度(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getData_hitrate()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储缓存匹配度(%)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getProcedure_hitrate(),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sysbaseVO.getServerName()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getVersion()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// 写表空间

		SybspaceconfigDao sybspaceconfigDao = new SybspaceconfigDao();

		List list = null;
		try {
			list = sybspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sybspaceconfigDao.close();
		}

		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(8 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据库空闲时间(秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIdle()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("cpu工作时间(秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getCpu_busy()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("I/O工作时间(秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIo_busy()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IO利用率(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getIo_busy_rate()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getSent_rate()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getReceived_rate()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getWrite_rate()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getRead_rate()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备个数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getDisk_count()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("活动锁个数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getLocks_count()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事务的个数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(sysbaseVO.getXact_count()));
		cell.setColspan(6);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("库名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("可利用率（%）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// get dbspace message==================
		if (sysbaseVO == null)
			sysbaseVO = new SybaseVO();
		List dbsizelist = (List) sysbaseVO.getDbInfo();
		int row = 1;
		if (dbsizelist != null && dbsizelist.size() > 0) {
			for (int i = 0; i < dbsizelist.size(); i++) {

				TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
				String dbname = tablesVO.getDb_name();
				for (int j = 0; j < list.size(); j++) {
					Sybspaceconfig vo = (Sybspaceconfig) list.get(j);
					if (vo.getSpacename().equals(dbname)) {

						String dbsize = tablesVO.getDb_size();
						String freesize = tablesVO.getDb_freesize();
						String userdperc = tablesVO.getDb_usedperc();

						cell = new Cell(new Phrase(dbname));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(dbsize));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(freesize));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(userdperc));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
				}
			}
		}

		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if (!"0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		} else {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	/**
	 * mysql 运行分析报表doc格式打印
	 * @Author HONGLI 
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_mysqlNewDoc(String filename) 
		throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		DBVo vo = (DBVo) reportHash.get("vo");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;
		
		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据库性能信息", titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		Vector val=(Vector)reportHash.get("Val");
		String Max_used_connections = "";
		String Table_locks_immediate = "";
		String Table_locks_waited = "";
		String Key_read_requests = "";
		String Key_reads = "";

		String log_slow_queries = "";
		String Threads_connected = "";
		String Open_tables = "";
		String Opened_tables = "";
		if(val != null && val.size()>0){
    		for(int i=0;i<val.size();i++){
    			Hashtable return_value = (Hashtable)val.get(i);
    			if(return_value != null && return_value.size()>0){
    				String name=return_value.get("variable_name").toString();
    				String value=return_value.get("value").toString();
    				if(name.equalsIgnoreCase("Max_used_connections")){
//    					name="服务器相应的最大连接数";
    					Max_used_connections = value;
					}
					if(name.equalsIgnoreCase("Table_locks_immediate")){
//						name="立即获得的表的锁的次数";
						Table_locks_immediate = value;
					}
					if(name.equalsIgnoreCase("Table_locks_waited")){
//						name="不能立即获得的表的锁的次数";
						Table_locks_waited = value;
					}
					if(name.equalsIgnoreCase("Key_read_requests")){
//						name="从缓存读键的数据块的请求数";
						Key_read_requests = value;
					}
					if(name.equalsIgnoreCase("Key_reads")){
//						name="从硬盘读取键的数据块的次数";
						Key_reads = value;
					}
					if(name.equalsIgnoreCase("log_slow_queries")){
//						name="是否记录慢查询";
						log_slow_queries = value;
					}
					if(name.equalsIgnoreCase("Threads_connected")){
//						name="当前打开的连接的数量";
						Threads_connected = value;
					}
					if(name.equalsIgnoreCase("Open_tables")){
//						name="当前打开的表的数量";
						Open_tables = value;
					}
					if(name.equalsIgnoreCase("Opened_tables")){
//						name="已经打开的表的数量";
						Opened_tables = value;
					}
    			}
    		}
    	}
		cell = new Cell(new Phrase("服务器相应的最大连接数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase(Max_used_connections,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("立即获得的表的锁的次数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase(Table_locks_immediate, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("不能立即获得的表的锁的次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Table_locks_waited, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从缓存读键的数据块的请求数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase(Key_read_requests, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从硬盘读取键的数据块的次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Key_reads,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("是否记录慢查询", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(log_slow_queries, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前打开的连接的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_connected,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前打开的表的数量", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Open_tables,
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("已经打开的表的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Opened_tables,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("数据库状态信息 ", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
		String Threads_cached = "";
		String Innodb_buffer_pool_pages_total = "";
		String Threads_created = "";
		String Uptime = "";
		if(tableinfo_v != null){
			for(int i=0;i<tableinfo_v.size();i++){
				Hashtable ht = (Hashtable)tableinfo_v.get(i);
				
				String size = ht.get("variable_name").toString();
				String free = ht.get("value").toString();
				if(size.equalsIgnoreCase("Threads_cached")){
//					size="线程缓存内的线程的数量";
					Threads_cached = free;
				}
				if(size.equalsIgnoreCase("Innodb_buffer_pool_pages_total")){
//					size="缓冲池总大小（页数）";
					Innodb_buffer_pool_pages_total = free;
				}
				if(size.equalsIgnoreCase("Threads_created")){
//					size="创建用来处理连接的线程数";
					Threads_created = free;
				}  
				if(size.equalsIgnoreCase("Uptime")){
//					size="服务器已经运行的时间（单位:秒）";
					Uptime = free;
				}
			}
		}
		cell = new Cell(new Phrase("线程缓存内的线程的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_cached, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲池总大小（页数）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Innodb_buffer_pool_pages_total, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("创建用来处理连接的线程数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_created, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服务器已经运行的时间（单位:秒）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Uptime, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		// 写表空间
		
		SybspaceconfigDao sybspaceconfigDao = new SybspaceconfigDao();
		
		List list = null;
		try {
			list = sybspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sybspaceconfigDao.close();
		}
		
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
//		cell5.setRowspan(8 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
//		cell = new Cell(new Phrase("数据库空闲时间(秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIdle(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("cpu工作时间(秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getCpu_busy(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("I/O工作时间(秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIo_busy(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("IO利用率(%)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIo_busy_rate(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getSent_rate(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getReceived_rate(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getWrite_rate(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getRead_rate(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("设备个数", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getDisk_count(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("活动锁个数", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getLocks_count(), contextFont1));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("事务的个数", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getXact_count(), contextFont1));
//		cell.setColspan(6);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("库名称", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("总大小（MB）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("可利用率（%）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		// get dbspace message==================
//		if (sysbaseVO == null)  
//			sysbaseVO = new SybaseVO();
//		List dbsizelist = (List) sysbaseVO.getDbInfo();
//		int row = 1;
//		if (dbsizelist != null && dbsizelist.size() > 0) {
//			for (int i = 0; i < dbsizelist.size(); i++) {
//		
//				TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
//				String dbname = tablesVO.getDb_name();
//				for (int j = 0; j < list.size(); j++) {
//					Sybspaceconfig vo = (Sybspaceconfig) list.get(j);
//					if (vo.getSpacename().equals(dbname)) {
//		
//						String dbsize = tablesVO.getDb_size();
//						String freesize = tablesVO.getDb_freesize();
//						String userdperc = tablesVO.getDb_usedperc();
//		
//						cell = new Cell(new Phrase(dbname, contextFont1));
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(dbsize, contextFont1));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(freesize, contextFont1));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(userdperc, contextFont1));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//					}
//				}
//			}
//		}
//		
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		String pinglog = "";
		if (!"0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		} else {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);
		
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

}
	
	/**
	 * mysql运行分析报表 pdf格式打印  
	 * @author HONGLI  
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_mysqlNewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("hostnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		DBVo vo = (DBVo) reportHash.get("vo"); 
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont = new Font(bfChinese, 11, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;
		
		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据库性能信息", titleFont));
		cell.setRowspan(5);
		Vector val=(Vector)reportHash.get("Val");
		String Max_used_connections = "";
		String Table_locks_immediate = "";
		String Table_locks_waited = "";
		String Key_read_requests = "";
		String Key_reads = "";

		String log_slow_queries = "";
		String Threads_connected = "";
		String Open_tables = "";
		String Opened_tables = "";
		if(val != null && val.size()>0){
    		for(int i=0;i<val.size();i++){
    			Hashtable return_value = (Hashtable)val.get(i);
    			if(return_value != null && return_value.size()>0){
    				String name=return_value.get("variable_name").toString();
    				String value=return_value.get("value").toString();
    				if(name.equalsIgnoreCase("Max_used_connections")){
//    					name="服务器相应的最大连接数";
    					Max_used_connections = value;
					}
					if(name.equalsIgnoreCase("Table_locks_immediate")){
//						name="立即获得的表的锁的次数";
						Table_locks_immediate = value;
					}
					if(name.equalsIgnoreCase("Table_locks_waited")){
//						name="不能立即获得的表的锁的次数";
						Table_locks_waited = value;
					}
					if(name.equalsIgnoreCase("Key_read_requests")){
//						name="从缓存读键的数据块的请求数";
						Key_read_requests = value;
					}
					if(name.equalsIgnoreCase("Key_reads")){
//						name="从硬盘读取键的数据块的次数";
						Key_reads = value;
					}
					if(name.equalsIgnoreCase("log_slow_queries")){
//						name="是否记录慢查询";
						log_slow_queries = value;
					}
					if(name.equalsIgnoreCase("Threads_connected")){
//						name="当前打开的连接的数量";
						Threads_connected = value;
					}
					if(name.equalsIgnoreCase("Open_tables")){
//						name="当前打开的表的数量";
						Open_tables = value;
					}
					if(name.equalsIgnoreCase("Opened_tables")){
//						name="已经打开的表的数量";
						Opened_tables = value;
					}
    			}
    		}
    	}
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服务器响应的最大连接数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase(Max_used_connections,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("立即获得的表的锁的次数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Table_locks_immediate,
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("不能立即获得的表的锁的次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Table_locks_waited,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从缓存读键的数据块的请求数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Key_read_requests,
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从硬盘读取键的数据块的次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Key_reads,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("是否记录慢查询", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(log_slow_queries,
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前打开的连接的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_connected,
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前打开的表的数量", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Open_tables,
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("已经打开的表的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Opened_tables,
				contextFont1)); 
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据库状态信息", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
		String Threads_cached = "";
		String Innodb_buffer_pool_pages_total = "";
		String Threads_created = "";
		String Uptime = "";
		if(tableinfo_v != null){
			for(int i=0;i<tableinfo_v.size();i++){
				Hashtable ht = (Hashtable)tableinfo_v.get(i);
				
				String size = ht.get("variable_name").toString();
				String free = ht.get("value").toString();
				if(size.equalsIgnoreCase("Threads_cached")){
//					size="线程缓存内的线程的数量";
					Threads_cached = free;
				}
				if(size.equalsIgnoreCase("Innodb_buffer_pool_pages_total")){
//					size="缓冲池总大小（页数）";
					Innodb_buffer_pool_pages_total = free;
				}
				if(size.equalsIgnoreCase("Threads_created")){
//					size="创建用来处理连接的线程数";
					Threads_created = free;
				}  
				if(size.equalsIgnoreCase("Uptime")){
//					size="服务器已经运行的时间（单位:秒）";
					Uptime = free;
				}
			}
		}
		cell = new Cell(new Phrase("线程缓存内的线程的数量", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_cached));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲池总大小（页数）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_cached));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("创建用来处理连接的线程数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Threads_cached));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服务器已经运行的时间（单位:秒）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(Uptime));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase(""));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(""));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
//		// 写表空间
//		
//		SybspaceconfigDao sybspaceconfigDao = new SybspaceconfigDao();
//		
//		List list = null;
//		try {
//			list = sybspaceconfigDao.getByIp(ip, 1);
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			sybspaceconfigDao.close();
//		}
//		
		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(1);
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
//		cell = new Cell(new Phrase("数据库空闲时间(秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中  
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIdle()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("cpu工作时间(秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getCpu_busy()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("I/O工作时间(秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIo_busy()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("IO利用率(%)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getIo_busy_rate()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getSent_rate()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getReceived_rate()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getWrite_rate()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getRead_rate()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("设备个数", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getDisk_count()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("活动锁个数", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getLocks_count()));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("事务的个数", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase(sysbaseVO.getXact_count()));
//		cell.setColspan(6);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		
//		cell = new Cell(new Phrase("库名称", titleFont));
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("总大小（MB）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("使用大小（MB）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		cell = new Cell(new Phrase("可利用率（%）", titleFont));
//		cell.setColspan(2);
//		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//		aTable.addCell(cell);
//		// get dbspace message==================
//		if (sysbaseVO == null)
//			sysbaseVO = new SybaseVO();
//		List dbsizelist = (List) sysbaseVO.getDbInfo();
//		int row = 1;
//		if (dbsizelist != null && dbsizelist.size() > 0) {
//			for (int i = 0; i < dbsizelist.size(); i++) {
//		
//				TablesVO tablesVO = (TablesVO) dbsizelist.get(i);
//				String dbname = tablesVO.getDb_name();
//				for (int j = 0; j < list.size(); j++) {
//					Sybspaceconfig vo = (Sybspaceconfig) list.get(j);
//					if (vo.getSpacename().equals(dbname)) {
//		
//						String dbsize = tablesVO.getDb_size();
//						String freesize = tablesVO.getDb_freesize();
//						String userdperc = tablesVO.getDb_usedperc();
//		
//						cell = new Cell(new Phrase(dbname));
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(dbsize));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(freesize));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//						cell = new Cell(new Phrase(userdperc));
//						cell.setColspan(2);
//						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
//						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
//						aTable.addCell(cell);
//					}
//				}
//			}
//		}
//		
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		
		String pinglog = "";
		if (!"0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		} else {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);
		
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

}

	// create db2 report doc
	public void createReport_db2Doc(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String servername = (String) reportHash.get("servername");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");
			Hashtable returnhash = (Hashtable) reportHash.get("returnhash");

			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;

			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片

			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);

			document.add(aTable);
			document.add(img);

			document.add(new Paragraph("\n"));

			Enumeration dbs = returnhash.keys();
			// List retList = new ArrayList();
			List retList = new ArrayList();
			Paragraph context1 = null;
			Table aTable1 = null;
			while (dbs.hasMoreElements()) {
				aTable1 = new Table(6);
				float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
				aTable1.setWidths(width);
				aTable1.setWidth(100); // 占页面宽度 90%
				aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable1.setAutoFillEmptyCells(true); // 自动填满
				aTable1.setBorderWidth(1); // 边框宽度
				aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable1.setSpacing(0);// 即单元格之间的间距
				aTable1.setBorder(2);// 边框
				String obj = (String) dbs.nextElement();
				retList = (List) returnhash.get(obj);
				String contextString1 = "DB2数据库:" + obj + "(" + "IP:" + ip
						+ ")";

				context1 = new Paragraph(contextString1, contextFont);
				// 正文格式左对齐
				context1.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context1.setSpacingBefore(5);
				// 设置第一行空的列数
				context1.setFirstLineIndent(5);

				cell = new Cell(new Phrase("库信息", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("序号", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("库名称", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("空间大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("空闲比例(%)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				// aTable1.endHeaders();

				// 数据库信息
				/*
				 * Hashtable tableinfo_v = (Hashtable)
				 * reportHash.get("tableinfo_v");
				 * 
				 * String[] dbs1 = servername.split(","); for (int i = 0; i <
				 * tableinfo_v.size(); i++) { List list = (List)
				 * tableinfo_v.get(dbs1[i]); for (int k = 0; k < list.size();
				 * k++) {
				 * 
				 * row = row + 1; Hashtable ht = (Hashtable) list.get(k); if (ht ==
				 * null) continue; String spacename = ""; if
				 * (ht.get("tablespace_name") != null) spacename =
				 * ht.get("tablespace_name").toString(); String size = ""; if
				 * (ht.get("totalspac") != null) size =
				 * ht.get("totalspac").toString(); String free = ""; if
				 * (ht.get("usablespac") != null) free =
				 * ht.get("usablespac").toString(); String percent = "---"; if
				 * (ht.get("usableper") != null) percent =
				 * ht.get("usableper").toString();
				 */
				for (int i = 0; i < retList.size(); i++) {
					Hashtable ht = (Hashtable) retList.get(i);
					if (ht == null)
						continue;
					String spacename = "";
					if (ht.get("tablespace_name") != null)
						spacename = ht.get("tablespace_name").toString();
					String size = "";
					if (ht.get("totalspac") != null)
						size = ht.get("totalspac").toString();
					String free = "";
					if (ht.get("usablespac") != null)
						free = ht.get("usablespac").toString();
					String percent = "";
					if (ht.get("usableper") != null)
						percent = ht.get("usableper").toString();
					cell = new Cell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(i + 1 + "", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(spacename, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(size, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(free, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(percent, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);

				}
				document.add(context1);
				document.add(aTable1);
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}// end db2 report doc

	// db2 pdf report-------------------zhushouzhi
	public void createReport_db2PDF(String filename) throws DocumentException,
			IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String servername = (String) reportHash.get("servername");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable returnhash = (Hashtable) reportHash.get("returnhash");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont1);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */

			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			Enumeration dbs = returnhash.keys();
			List retList = new ArrayList();
			Paragraph context1 = null;
			PdfPTable aTable1 = null;

			while (dbs.hasMoreElements()) {

				aTable1 = new PdfPTable(6);
				float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
				aTable1.setWidths(width);
				aTable1.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase("库信息", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase("序号", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase("库名称", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase("空间大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase("空闲大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new PdfPCell(new Phrase("空闲比例(%)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				// aTable1.endHeaders();

				// 数据库信息
				String obj = (String) dbs.nextElement();
				retList = (List) returnhash.get(obj);
				String contextString1 = "DB2数据库:" + obj + "(" + "IP:" + ip
						+ ")";

				context1 = new Paragraph(contextString1, contextFont);
				// 正文格式左对齐
				context1.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context1.setSpacingBefore(5);
				// 设置第一行空的列数
				context1.setFirstLineIndent(5);
				int row = 1;
				for (int i = 0; i < retList.size(); i++) {
					Hashtable ht = (Hashtable) retList.get(i);
					if (ht == null)
						continue;
					String spacename = "";
					if (ht.get("tablespace_name") != null)
						spacename = ht.get("tablespace_name").toString();
					String size = "";
					if (ht.get("totalspac") != null)
						size = ht.get("totalspac").toString();
					String free = "";
					if (ht.get("usablespac") != null)
						free = ht.get("usablespac").toString();
					String percent = "";
					if (ht.get("usableper") != null)
						percent = ht.get("usableper").toString();
					cell = new PdfPCell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(i + 1 + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(spacename));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(size));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(free));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(percent));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);

				}
				document.add(context1);
				document.add(new Paragraph("\n"));
				document.add(aTable1);
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	// zhushouzhi-----------------db2 new doc 业务分析
	public void createReport_db2NewDoc(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		// 表空间参数指标====
		Hashtable returnhash = null;
		returnhash = (Hashtable) reportHash.get("returnhash");

		Hashtable db2sys = (Hashtable) reportHash.get("sqlsys");
		List retList = new ArrayList();
		Enumeration dbs = returnhash.keys();

		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "当前状态" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		while (dbs.hasMoreElements()) {
			String obj = (String) dbs.nextElement();
			returnhash = (Hashtable) db2sys.get(obj);
			cell = new Cell(new Phrase("\n" + "DB2数据库:" + obj + "配置和参数信息"
					+ "\n", titleFont));
			cell.setColspan(8);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n"
					+ "息", titleFont));
			cell.setRowspan(4);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("性能", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// jingcheng message

			if (db2sys == null)
				db2sys = new Hashtable();
			// Enumeration dbs = db2sys.keys();
			// Hashtable<String,Object> returnhash = new Hashtable();
			String rows_read = "---";
			String rows_selected = "---";
			String lock_waits = "---";
			String lock_wait_time = "---";
			String deadlocks = "---";
			String lock_escals = "---";
			String host_name = "---";
			String prod_release = "";

			if (returnhash != null) {
				rows_read = (String) returnhash.get("rows_read");
				rows_selected = (String) returnhash.get("rows_selected");
				lock_waits = (String) returnhash.get("lock_waits");
				lock_wait_time = (String) returnhash.get("lock_wait_time");
				deadlocks = (String) returnhash.get("deadlocks");
				lock_escals = (String) returnhash.get("lock_escals");
				host_name = (String) returnhash.get("host_name");
				prod_release = (String) returnhash.get("prod_release");
			}
			// end message
			cell = new Cell(new Phrase("读行数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase(rows_read, contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("查询行数", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(rows_selected, contextFont1));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁等待数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_waits, contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁等待时间", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_wait_time, contextFont1));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("死锁数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(deadlocks, contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁定升级数", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_escals, contextFont1));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("系统", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("主机名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(host_name, contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("DB2版本", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(prod_release, contextFont1));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 写表空间
			Db2spaceconfigDao db2spaceconfigDao = new Db2spaceconfigDao();
			List list = null;
			try {
				list = db2spaceconfigDao.getByIp(ip, 1);
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				db2spaceconfigDao.close();
			}
			Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指"
					+ "\n" + "标", titleFont));
			int row = 0;
			for (int j = 0; j < list.size(); j++) {
				Db2spaceconfig vo1 = (Db2spaceconfig) list.get(j);
				if (vo1.getDbname().equals(obj)) {
					row++;
				}
			}
			// cell5.setRowspan(2+list.size());
			cell5.setRowspan(2 + row);
			cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell5);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont1));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("表空间名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("总空间大小(MB)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("空闲大小", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("空闲比例(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 表空间参数指标====

			returnhash = (Hashtable) reportHash.get("returnhash");
			retList = (List) returnhash.get(obj);
			int tie = 0;
			for (int i = 0; i < retList.size(); i++) {
				Hashtable ht = (Hashtable) retList.get(i);
				String tablespace = ht.get("tablespace_name").toString();
				for (int j = 0; j < list.size(); j++) {
					Db2spaceconfig vo1 = (Db2spaceconfig) list.get(j);
					if (vo1.getSpacename().equals(tablespace)) {
						if (vo1.getDbname().equals(obj)) {
							String size = "";
							if (ht.get("totalspac") != null)
								size = ht.get("totalspac").toString();
							String free = "";
							if (ht.get("usablespac") != null)
								free = ht.get("usablespac").toString();
							String percent = "---";
							if (ht.get("usableper") != null)
								percent = ht.get("usableper").toString();

							cell = new Cell(
									new Phrase(tablespace, contextFont1));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							cell = new Cell(new Phrase(size, contextFont1));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							cell = new Cell(new Phrase(free, contextFont1));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);

							cell = new Cell(new Phrase(percent, contextFont1));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							tie++;
						}

					}

				}
			}
		}
		// ===============end
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "表空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连通状况良好，未出现宕机事件。";

		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();
	}

	// zhushouzhi-----------------db2 new doc 业务分析
	public void createReport_db2NewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		Hashtable returnhash = null;
		returnhash = (Hashtable) reportHash.get("returnhash");

		Hashtable db2sys = (Hashtable) reportHash.get("sqlsys");
		List retList = new ArrayList();
		Enumeration dbs = returnhash.keys();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont = new Font(bfChinese, 11, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "当前状态" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		while (dbs.hasMoreElements()) {
			String obj = (String) dbs.nextElement();
			returnhash = (Hashtable) db2sys.get(obj);
			cell = new Cell(new Phrase("\n" + "DB2数据库:" + obj + "配置和参数信息"
					+ "\n", titleFont));
			cell.setColspan(8);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n"
					+ "息", titleFont));
			cell.setRowspan(4);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("性能", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// jingcheng message

			if (db2sys == null)
				db2sys = new Hashtable();
			// Enumeration dbs = db2sys.keys();
			// Hashtable<String,Object> returnhash = new Hashtable();
			String rows_read = "---";
			String rows_selected = "---";
			String lock_waits = "---";
			String lock_wait_time = "---";
			String deadlocks = "---";
			String lock_escals = "---";
			String host_name = "---";
			String prod_release = "";

			if (returnhash != null) {
				rows_read = (String) returnhash.get("rows_read");
				rows_selected = (String) returnhash.get("rows_selected");
				lock_waits = (String) returnhash.get("lock_waits");
				lock_wait_time = (String) returnhash.get("lock_wait_time");
				deadlocks = (String) returnhash.get("deadlocks");
				lock_escals = (String) returnhash.get("lock_escals");
				host_name = (String) returnhash.get("host_name");
				prod_release = (String) returnhash.get("prod_release");
			}
			// end message
			cell = new Cell(new Phrase("读行数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase(rows_read));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("查询行数", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(rows_selected));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁等待数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_waits));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁等待时间", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_wait_time));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("死锁数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(deadlocks));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("锁定升级数", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(lock_escals));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("系统", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("主机名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(host_name));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			cell = new Cell(new Phrase("DB2版本", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(prod_release));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 写表空间
			Db2spaceconfigDao db2spaceconfigDao = new Db2spaceconfigDao();
			List list = null;
			try {
				list = db2spaceconfigDao.getByIp(ip, 1);
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				db2spaceconfigDao.close();
			}
			Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指"
					+ "\n" + "标", titleFont));
			int row = 0;
			for (int j = 0; j < list.size(); j++) {
				Db2spaceconfig vo1 = (Db2spaceconfig) list.get(j);
				if (vo1.getDbname().equals(obj)) {
					row++;
				}
			}
			// cell5.setRowspan(2+list.size());
			cell5.setRowspan(2 + row);
			cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell5);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax")));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("表空间名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("总空间大小(MB)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("空闲大小", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("空闲比例(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 表空间参数指标====

			returnhash = (Hashtable) reportHash.get("returnhash");
			retList = (List) returnhash.get(obj);
			int tie = 0;
			for (int i = 0; i < retList.size(); i++) {
				Hashtable ht = (Hashtable) retList.get(i);
				String tablespace = ht.get("tablespace_name").toString();
				for (int j = 0; j < list.size(); j++) {
					Db2spaceconfig vo1 = (Db2spaceconfig) list.get(j);
					if (vo1.getSpacename().equals(tablespace)) {
						if (vo1.getDbname().equals(obj)) {
							String size = "";
							if (ht.get("totalspac") != null)
								size = ht.get("totalspac").toString();
							String free = "";
							if (ht.get("usablespac") != null)
								free = ht.get("usablespac").toString();
							String percent = "---";
							if (ht.get("usableper") != null)
								percent = ht.get("usableper").toString();

							cell = new Cell(new Phrase(tablespace));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							cell = new Cell(new Phrase(size));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							cell = new Cell(new Phrase(free));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);

							cell = new Cell(new Phrase(percent));
							cell.setColspan(2);
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable.addCell(cell);
							tie++;
						}
					}

				}
			}
		}
		// ===============end
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "表空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连通状况良好，未出现宕机事件。";

		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if (!"0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次表空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，表空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);

		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	// zhushouzhi-----------------db2 new pdf业务分析
	// zhushouzhi-----------------------db2 new pdf业务分析end
	// zhushouzhi--------------infor star



	@Override
	public void createReport_oawork(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("端口综合报表", 0);
			List memlist = (List) reportHash.get("memlist");
			Vector vector = (Vector) reportHash.get("sxoanetifreport");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "端口综合报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "端口个使用情况", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "关联应用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "入口峰值", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "出口峰值", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 4, "出口平均流速", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 4, "入口平均流速", _labelFormat);
			sheet.addCell(tmpLabel);

			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (memlist != null && memlist.size() > 0) {
				for (int i = 0; i < memlist.size(); i++) {
					List mlist = (List) memlist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) vector.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) vector.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 5 + i, "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 5 + i, "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 5 + i, "", p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_serviceworkchoce(String starttime, String totime,
			String file, String username, String positionname)
			throws DocumentException, IOException {
		Hashtable allreporthash = new Hashtable();
		allreporthash = reportHash;
		/*
		 * String starttime = (String) reportHash.get("starttime"); String
		 * totime = (String) reportHash.get("totime");
		 */

		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont1 = new Font(bfChinese, 14, Font.BOLD);
		Font titleFont = new Font(bfChinese, 14, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 14, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + file;
			Table aTable = new Table(13);
			float[] widths = { 40f, 100f, 40f, 40f, 40f, 40f, 40f, 40f, 40f,
					40f, 40f, 40f, 40f};
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框

			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("生活网业务运行报表", titleFont1));
			cell.setColspan(13);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("时间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// cell = new Cell("");
			cell = new Cell(new Phrase("从" + starttime + "至" + totime,contextFont));
			cell.setColspan(12);
			aTable.addCell(cell);
			cell = new Cell(new Phrase("管理员", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(username, contextFont));

			cell.setColspan(4);

			aTable.addCell(cell);
			cell = new Cell(new Phrase("部门", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(positionname, contextFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("业务健康指数", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("★★★★★", contextFont));
			cell.setColspan(11);
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("业务运行趋势", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("运行正常", contextFont));
			cell.setColspan(11);
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("性能参数指标", titleFont));
			cell.setColspan(13);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			int netsize = 0 ;
			Hashtable netreporthash = (Hashtable)allreporthash.get("netreporthash");
			if (netreporthash!=null) {
				netsize = netreporthash.size();
			}
			cell = new Cell(new Phrase("网"+"\n"+"络", titleFont));
			cell.setRowspan(3+netsize);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("IP", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("可用性"+"\n"+"(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("CPU利用率(%)", titleFont));
			cell.setColspan(2);			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("物理内存利用率(%)", titleFont));
			cell.setColspan(2);			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("流速（KB/S）", titleFont));
			cell.setColspan(4);			
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("告警（个）", titleFont));
			cell.setRowspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("出口", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("入口", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			java.text.NumberFormat formatenet = java.text.NumberFormat
			.getNumberInstance();
			formatenet.setMaximumFractionDigits(0);//
			if (netreporthash != null && netreporthash.size() > 0) {
				Iterator keys = netreporthash.keySet().iterator();
				HostNode node = null;
				while (keys.hasNext()) {
					node = (HostNode)keys.next();
					Hashtable report_has = (Hashtable) netreporthash.get(node);
					String hostname = (String) report_has.get("equipname");
					// WritableSheet sheet = wb.createSheet(hostname+"性能日报表",
					// sheetNum);

					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					String ip = (String) report_has.get("ip");
					Calendar colTime = Calendar.getInstance();
					Date cc = colTime.getTime();
					Vector netifVector = (Vector) report_has.get("netifVector");
					Hashtable portconfigHash = (Hashtable) report_has
							.get("portconfigHash");
					List reportports = (List) report_has.get("reportports");
					Vector iprouterVector = (Vector) report_has
							.get("iprouterVector");

					Hashtable memMaxHash = (Hashtable) report_has
							.get("memmaxhash");
					Hashtable maxping = (Hashtable) report_has.get("ping");

					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] netIfItemch = { "索引", "描述", "关联应用", "每秒字节数(M)",
							"当前状态", "出口流速", "入口流速" };
					String[] ipRouterItemch = { "端口索引", "目标地址", "下一跳", "路由类型",
							"路由协议", "子网掩码" };
					String[] memoryItem = { "Capability", "Utilization" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization",
							"INodeUsedSize", "INodeUtilization" };
					String[] diskItemch = { "总容量", "已用容量", "利用率", "i-node已使用",
							"i-node利用率" };
					String[] iproutertype = { "", "", "", "direct(3)",
							"indirect(4)" };
					String[] iprouterproto = { "", "other(1)", "local(2)",
							"netmgmt(3)", "icmp(4)", "egp(5)", "ggp(6)",
							"hello(7)", "rip(8)", "is-is(9)", "es-is(10)",
							"ciscoIgrp(11)", "bbnSpfIgp(12)", "ospf(13)",
							"bgp(14)" };
					String avginput = (String) report_has.get("avginput");
					String avgoutput = (String) report_has.get("avgoutput");
					String maxinput = (String) report_has.get("maxinput");
					String maxoutput = (String) report_has.get("maxoutput");

					String level4 = (String) report_has.get("level4");
					
					cell = new Cell(new Phrase(ip,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					String string1 = ((String) maxping.get("pingmax")).replace("%",
					"");
		        	String string2 = ((String) maxping.get("avgpingcon")).replace(
					"%", "");
		        	
					cell = new Cell(new Phrase(formatenet.format(Double
							.valueOf(string2)),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					cell = new Cell(new Phrase(formatenet.format(Double
							.valueOf(string1)),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					String cpu = "";
					if (CPU.get("cpu") != null)
						cpu = (String) CPU.get("cpu");
					String cpumax = "";
					if (CPU.get("cpumax") != null)
						cpumax = (String) CPU.get("cpumax");
					String avgcpu = "";
					if (CPU.get("avgcpu") != null)
						avgcpu = (String) CPU.get("avgcpu");
					String string3 = avgcpu.replace("%", "");
					String string4 = cpumax.replace("%", "");
					cell = new Cell(new Phrase(formatenet.format(Double
							.valueOf(string3)),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formatenet.format(Double
							.valueOf(string4)),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					cell = new Cell("");
					aTable.addCell(cell);
					cell = new Cell("");
					aTable.addCell(cell);
					
					cell = new Cell(new Phrase(avgoutput.replace(".0", ""),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(maxoutput.replace(".0", ""),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(avginput.replace(".0", ""),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(maxinput.replace(".0", ""),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					cell = new Cell(new Phrase(level4,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				}
			}
			
			
			//服务器=====================================================================
			Hashtable hostreporthash = (Hashtable)allreporthash.get("hostreporthash");
			int hostsize = 0 ;
			if (hostreporthash!=null) {
				hostsize = hostreporthash.size();
			}
			cell = new Cell(new Phrase("服"+"\n"+"务"+"\n"+"器", titleFont));
			cell.setRowspan(2+hostsize);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("IP", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("可用性"+"\n"+"(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("CPU利用率(%)", titleFont));
			cell.setColspan(2);			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("物理内存利用率(%)", titleFont));
			cell.setColspan(2);			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("磁盘利用率（KB/S）", titleFont));
			cell.setColspan(4);			
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("告警（个）", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			java.text.NumberFormat formatehost = java.text.NumberFormat
			.getNumberInstance();
			formatehost.setMaximumFractionDigits(0);//
			if (hostreporthash != null && hostreporthash.size() > 0) {
				Iterator keys = hostreporthash.keySet().iterator();
				HostNode node = null;
				while (keys.hasNext()) {

					node = (HostNode)keys.next();
					//String newip = doip(ip);
					Hashtable report_has = (Hashtable) hostreporthash.get(node);
					String hostname = (String) report_has.get("equipname");
					Hashtable CPU = (Hashtable) report_has.get("CPU");
					String Ping = (String) report_has.get("Ping");
					Calendar colTime = (Calendar) report_has.get("time");
					Date cc = colTime.getTime();
					Hashtable Memory = (Hashtable) report_has.get("Memory");
					Hashtable Disk = (Hashtable) report_has.get("Disk");

					Hashtable memMaxHash = (Hashtable) report_has.get("memmaxhash");
					Hashtable memAvgHash = (Hashtable) report_has.get("memavghash");
					Hashtable maxping = (Hashtable) report_has.get("ping");
					String ip = (String)report_has.get("ip");
					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd HH:mm:ss");

					String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
					String[] memoryItem = { "Capability", "c" };
					String[] diskItem = { "AllSize", "UsedSize", "Utilization",
							"Utilizationvalue" };
					String[] diskItemch = { "总容量", "已用容量", "利用率" };

					String level4 = (String) report_has.get("level4");
					cell = new Cell(new Phrase(ip, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					// =======
					String string7 = ((String) maxping.get("pingmax")).replace("%","");
					String string8 = ((String) maxping.get("avgpingcon")).replace("%", "");
					
					
					// formate.format(Double.valueOf(string1));
					// System.out.println(formate.format(Double.valueOf(string))+"@@@@@@@0000000000");
					cell = new Cell(new Phrase(formatehost.format(Double
							.valueOf(string8)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formatehost.format(Double
							.valueOf(string7)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);

					String cpu = "";
					if (CPU.get("cpu") != null)
						cpu = (String) CPU.get("cpu");
					String cpumax = "";
					if (CPU.get("cpumax") != null)
						cpumax = (String) CPU.get("cpumax");
					String avgcpu = "";
					if (CPU.get("avgcpu") != null)
						avgcpu = (String) CPU.get("avgcpu");
					String string3 = avgcpu.replace("%", "");
					String string4 = cpumax.replace("%", "");

					cell = new Cell(new Phrase(formatehost.format(Double
							.valueOf(string3)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formatehost.format(Double
							.valueOf(string4)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					String avgvalue = "0.0%";
					if (memAvgHash.get("PhysicalMemory") != null) {

						avgvalue = (String) memAvgHash.get("PhysicalMemory");
						String string5 = avgvalue.replace("%", "");
						cell = new Cell(new Phrase(formatehost.format(Double
								.valueOf(string5)), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					} else {
						String string5 = avgvalue.replace("%", "");
						cell = new Cell(new Phrase(formatehost.format(Double
								.valueOf(string5)), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					String value = "0.0%";
					if (memMaxHash.get("PhysicalMemory") != null) {

						value = (String) memMaxHash.get("PhysicalMemory");
						String string6 = value.replace("%", "");
						cell = new Cell(new Phrase(formatehost.format(Double
								.valueOf(string6)), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					} else {
						String string6 = value.replace("%", "");
						cell = new Cell(new Phrase(formatehost.format(Double
								.valueOf(string6)), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					String value1 = "0";
					String value2 = "100";
					String name = "";
					String name1 = "";
					String Utilization = "";
					String Utilization1 = "";
					if (Disk != null && Disk.size() > 0) {
						for (int i = 0; i < Disk.size(); i++) {
							Hashtable diskhash = (Hashtable) (Disk.get(new Integer(
									i)));
							if (diskhash.get(diskItem[3]) != null) {
								if (value1.compareTo((String) diskhash
										.get(diskItem[3])) < 0) {
									value1 = (String) diskhash.get(diskItem[3]);
									name = (String) diskhash.get("name");
									Utilization = (String) diskhash
											.get(diskItem[2]);
								}
							}
							
							if (diskhash.get(diskItem[3]) != null) {
								if (value2.compareTo((String) diskhash
										.get(diskItem[3])) >= 0) {
									value2 = (String) diskhash.get(diskItem[3]);
									name1 = (String) diskhash.get("name");
									Utilization1 = (String) diskhash
											.get(diskItem[2]);
								}
							}
						}
						cell = new Cell(name + "  " + Utilization);
						cell.setColspan(2);
						aTable.addCell(cell);
						
						cell = new Cell(name1 + "  " + Utilization1);
						cell.setColspan(2);
						aTable.addCell(cell);
					} else {
						cell = new Cell("---");
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						
						cell = new Cell("---");
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					
					cell = new Cell(new Phrase(level4, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				}
			}
			
			//数据库===========================================================================
			Hashtable dbreporthash = (Hashtable)allreporthash.get("dbreporthash");
			int dbsize = 0 ;
			if (dbreporthash!=null) {
				dbsize = dbreporthash.size();
			}
			cell = new Cell(new Phrase("数"+"\n"+"据"+"\n"+"库", titleFont));
			cell.setRowspan(2+dbsize);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("IP", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("类型", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("可用性"+"\n"+"(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("表空间"+"\n"+"(%)", titleFont));
			cell.setColspan(2);			
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			
			
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"大", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			java.text.NumberFormat formatedb = java.text.NumberFormat
			.getNumberInstance();
			formatedb.setMaximumFractionDigits(0);//
			if (dbreporthash != null && dbreporthash.size() > 0) {
				Iterator keys = dbreporthash.keySet().iterator();
				DBVo node = null;
				while (keys.hasNext()) {
					//String newip = doip(ip);
					node = (DBVo)keys.next();
					Hashtable report_has = (Hashtable) dbreporthash.get(node);
					Hashtable maxping = (Hashtable) report_has.get("maxping");
					String string1 = ((String) maxping.get("pingmax")).replace("%","");
					String string2 = ((String) maxping.get("avgpingcon")).replace("%", "");
					String ip = (String)report_has.get("ip");
					cell = new Cell(new Phrase(ip, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					String dbtype = (String)report_has.get("dbtype");
					cell = new Cell(new Phrase(dbtype, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					// =======
					cell = new Cell(new Phrase(formatedb.format(Double.valueOf(string2)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formatedb.format(Double.valueOf(string1)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					String maxspace = "";
					String minspace = "";
					if ((Integer)report_has.get("maxspace")!=0) {
						 maxspace = (Integer)report_has.get("maxspace")+"";
						
					}
					if ((Integer)report_has.get("mixspace")!=0) {
						 minspace = (Integer)report_has.get("mixspace")+"";
						
					}
					 if (dbtype.equals("SQLServer")||dbtype.equals("Sybase")||dbtype.equals("Informix")) {
						 maxspace = "---";
							minspace = "---";
						}
					cell = new Cell(new Phrase(maxspace,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					cell = new Cell(new Phrase(minspace,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					for (int i = 0; i < 6; i++) {
						cell = new Cell(new Phrase("",contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					}
				
			}
			//中间件===================================================================
			
			Hashtable tomcatreporthash = (Hashtable)allreporthash.get("tomcatreporthash");
			Hashtable iisreporthash = (Hashtable)allreporthash.get("iisreporthash");
			Hashtable weblogicreporthash = (Hashtable)allreporthash.get("weblogicreporthash");
			int tomcatsize = 0 ;
			if (tomcatreporthash!=null) {
				tomcatsize = tomcatreporthash.size();
			}
			int iissize = 0 ;
			if (iisreporthash!=null) {
				iissize = iisreporthash.size();
			}
			int weblogicsize = 0 ;
			if (weblogicreporthash!=null) {
				weblogicsize = weblogicreporthash.size();
			}
			cell = new Cell(new Phrase("中"+"\n"+"间"+"\n"+"件", titleFont));
			cell.setRowspan(2+tomcatsize+iissize+weblogicsize);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("IP", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("类型", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("可用性"+"\n"+"(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 8; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			
			
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 8; i++) {
				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			
			
			//tomcat============================================================
			java.text.NumberFormat formatetomcat = java.text.NumberFormat
			.getNumberInstance();
			formatetomcat.setMaximumFractionDigits(0);//
			if (tomcatreporthash != null && tomcatreporthash.size() > 0) {
				Iterator keys = tomcatreporthash.keySet().iterator();
				 Node node = null;
				while (keys.hasNext()) {

					node = (Node)keys.next();
					
					Hashtable report_has = (Hashtable) tomcatreporthash.get(node);
					Hashtable maxping = (Hashtable) report_has.get("maxping");
					String string1 = ((String) maxping.get("pingmax")).replace("%","");
					String string2 = ((String) maxping.get("avgpingcon")).replace("%", "");
					String ip = (String)report_has.get("ip");
					cell = new Cell(new Phrase(ip, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					String tomcattype = (String)report_has.get("TOMCAT");
					cell = new Cell(new Phrase(tomcattype, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					// =======
					
					cell = new Cell(new Phrase(formatetomcat.format(Double.valueOf(string2)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formatetomcat.format(Double.valueOf(string1)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					
					for (int i = 0; i < 8; i++) {
						cell = new Cell(new Phrase("",contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					
				}
			}
			//IIS============================================================================
			java.text.NumberFormat formateiis = java.text.NumberFormat
			.getNumberInstance();
			formateiis.setMaximumFractionDigits(0);//
			if (iisreporthash != null && iisreporthash.size() > 0) {
				Iterator keys = iisreporthash.keySet().iterator();
				 Node node = null;
				while (keys.hasNext()) {

					node = (Node)keys.next();
					
					Hashtable report_has = (Hashtable) iisreporthash.get(node);
					Hashtable maxping = (Hashtable) report_has.get("maxping");
					String string1 = ((String) maxping.get("pingmax")).replace("%","");
					String string2 = ((String) maxping.get("avgpingcon")).replace("%", "");
					String ip = (String)report_has.get("ip");
					cell = new Cell(new Phrase(ip, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					String tomcattype = (String)report_has.get("IIS");
					cell = new Cell(new Phrase(tomcattype, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					// =======
					
					cell = new Cell(new Phrase(formateiis.format(Double.valueOf(string2)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formateiis.format(Double.valueOf(string1)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					for (int i = 0; i < 8; i++) {
						cell = new Cell(new Phrase("",contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}
					
				
					
				}
			}
			//weblogic================================================================
			java.text.NumberFormat formateweblogic = java.text.NumberFormat
			.getNumberInstance();
			formateweblogic.setMaximumFractionDigits(0);//
			if (weblogicreporthash != null && weblogicreporthash.size() > 0) {
				Iterator keys = weblogicreporthash.keySet().iterator();
				 Node node = null;
				while (keys.hasNext()) {

					node = (Node)keys.next();
					
					Hashtable report_has = (Hashtable) weblogicreporthash.get(node);
					Hashtable maxping = (Hashtable) report_has.get("maxping");
					String string1 = ((String) maxping.get("pingmax")).replace("%","");
					String string2 = ((String) maxping.get("avgpingcon")).replace("%", "");
					String ip = (String)report_has.get("ip");
					cell = new Cell(new Phrase(ip, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					String tomcattype = (String)report_has.get("WEBLOGIC");
					cell = new Cell(new Phrase(tomcattype, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					// =======
					
					cell = new Cell(new Phrase(formateweblogic.format(Double.valueOf(string2)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(formateweblogic.format(Double.valueOf(string1)), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					
					for (int i = 0; i < 8; i++) {
						cell = new Cell(new Phrase("",contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						
					}
				}
			}
			//业务分析===========================================属性指标==================
			cell = new Cell(new Phrase("业"+"\n"+"务"+"\n"+"属"+"\n"+"性"+"\n"+"指"+"\n"+"标",titleFont));
			cell.setRowspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("属性名称", titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			// =======
			
			cell = new Cell(new Phrase("可用性(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("响应时间(%)", titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("告警(个)",titleFont));
			cell.setRowspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("平"+"\n"+"均", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("最"+"\n"+"小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			
			cell = new Cell(new Phrase("商户余额查询服务",titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			cell = new Cell(new Phrase("0",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("广告订单删除服务",titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			cell = new Cell(new Phrase("0",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			
			cell = new Cell(new Phrase("点数赠送服务",titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			cell = new Cell(new Phrase("0",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			
			cell = new Cell(new Phrase("SSO认证服务",titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			
			for (int i = 0; i < 6; i++) {
				cell = new Cell(new Phrase("",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			}
			cell = new Cell(new Phrase("0",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			document.add(aTable);
			document.close();
		}
		catch (Exception e) {
			// TODO: handle exception
		}
	}
	//##############################start by guangfei############################/
	/**
	 * IISLog IP 导出excel
	 */
	public void createReport_iislogip(String filename)
	{
		if(impReport.getTable()==null)
		{
			fileName = null;
			return;
		}	
		WritableWorkbook wb = null;	
		String starttime = (String)reportHash.get("starttime");
		String totime = (String)reportHash.get("totime");
		try
		{
			//fileName = ResourceCenter.getInstance().getSysPath() + "temp\\dhcnms_report.xls"; 
			fileName = ResourceCenter.getInstance().getSysPath() + filename;				
			wb = Workbook.createWorkbook(new File(fileName));
			int sheetNum = 0;
		    WritableSheet sheet = wb.createSheet("IISLog访问IP分布图", sheetNum);
		            // 设置图片
		    File file = new File(ResourceCenter.getInstance().getSysPath()+"/resource/image/jfreechart/IISLogIP.png");
		            //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
		            //allRow = allRow+2;
		    sheet.addImage(new WritableImage(0,6,8,10,file));	
		    Label tmpLabel=null;
		    tmpLabel = new Label(0, 2, "报表生成时间:" + impReport.getTimeStamp());
		    sheet.addCell(tmpLabel);
		    tmpLabel = new Label(0, 4, "数据统计时间段: " + starttime+" 至 "+totime);
		    sheet.addCell(tmpLabel); 
		            //allRow = allRow+7;
				 wb.write();
			
		}
		catch(Exception e)
		{
			//SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
		finally
		{
			try
			{
			    if(wb!= null) wb.close();
			}  
			catch(Exception e){}
		}
	}
	/**
	 * IISLog 状态分布 导出excel
	 * @param filename
	 */
	public void createReport_iislogstate(String filename)
	{
		if(impReport.getTable()==null)
		{
			fileName = null;
			return;
		}	
		WritableWorkbook wb = null;		
		try
		{    
			String starttime = (String)reportHash.get("starttime");
			String totime = (String)reportHash.get("totime");
			//fileName = ResourceCenter.getInstance().getSysPath() + "temp\\dhcnms_report.xls"; 
			fileName = ResourceCenter.getInstance().getSysPath() + filename;				
			wb = Workbook.createWorkbook(new File(fileName));
			int sheetNum = 0;
		    WritableSheet sheet = wb.createSheet("IISLog状态分布图", sheetNum);
		            // 设置图片
		    File file = new File(ResourceCenter.getInstance().getSysPath()+"/resource/image/jfreechart/IISLogState.png");
		            //向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
		            //allRow = allRow+2;
		    sheet.addImage(new WritableImage(0,6,8,10,file));						
		            //allRow = allRow+7;
		    Label tmpLabel=null;
		    tmpLabel = new Label(0, 2, "报表生成时间:" + impReport.getTimeStamp());
		    sheet.addCell(tmpLabel);
		    tmpLabel = new Label(0, 4, "数据统计时间段: " + starttime+" 至 "+totime);
		    sheet.addCell(tmpLabel); 
				 wb.write();
			
		}
		catch(Exception e)
		{
			//SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
		finally
		{
			try
			{
			    if(wb!= null) wb.close();
			}  
			catch(Exception e){}
		}
	}
  /**
   * IISLog IP 导出word
   * @param filename
   * @throws DocumentException
   * @throws IOException
   */
	public void createReport_iislogipword(String filename)throws DocumentException,
	IOException

	{   
		String starttime = (String)reportHash.get("starttime");
		String totime = (String)reportHash.get("totime");
        //  设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
		+ "数据统计时间段:" + starttime + " 至 " + totime;

      Paragraph context = new Paragraph(contextString, contextFont);
      // 正文格式左对齐
      context.setAlignment(Element.ALIGN_LEFT);
      // context.setFont(contextFont);
     // 离上一段落（标题）空的行数
       context.setSpacingBefore(5);
      // 设置第一行空的列数
       context.setFirstLineIndent(5);
       document.add(context);
		// 标题字体风格
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/IISLogIP.png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(img);

		document.close();
        
	}
	/**
	 * IISLog 状态 导出word
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_iislogstateword(String filename)throws DocumentException,
	IOException

	{ 
		
		String starttime = (String)reportHash.get("starttime");
		String totime = (String)reportHash.get("totime");
       // 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
		+ "数据统计时间段:" + starttime + " 至 " + totime;

      Paragraph context = new Paragraph(contextString, contextFont);
      // 正文格式左对齐
      context.setAlignment(Element.ALIGN_LEFT);
      // context.setFont(contextFont);
     // 离上一段落（标题）空的行数
       context.setSpacingBefore(5);
      // 设置第一行空的列数
       context.setFirstLineIndent(5);
       document.add(context);
		// 标题字体风格
		// 标题字体风格
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/IISLogState.png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(img);

		document.close();
        
	}
 
	//#########################end by gaoguangfei#########################################
	public void createReport_petrol(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("petrol性能报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			List petrollist = (List)reportHash.get("list");
			 WritableFont font = new WritableFont(WritableFont.TIMES, 11,   
		                WritableFont.BOLD);// 定义字体   
		        WritableCellFormat format = null;   
		        try {   
		           // font.setColour(Colour.BLUE);// 蓝色字体   
		  
		            format = new WritableCellFormat(font);   
		  
		            format.setAlignment(jxl.format.Alignment.CENTRE);// 左右居中   
		            format.setVerticalAlignment(VerticalAlignment.CENTRE);// 上下居中   
		           
		            /*
		             * format.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);// 黑色边框   
		            	format.setBackground(Colour.GRAY_25);// 黄色背景   
		           */		        
		            } catch (WriteException e1) {   
		            e1.printStackTrace();   
		        }   
			Label tmpLabel = null;
			sheet.mergeCells(0,0,13, 0);
			tmpLabel = new Label(0, 0, "加油站点网络设备资产信息一览表", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(0,1,0, 2);
			tmpLabel = new Label(0, 1, "序号", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(1,1,1, 2);
			tmpLabel = new Label(1, 1, "盟市所属片区", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(2,1,2, 2);
			tmpLabel = new Label(2, 1, "站点名称", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(3,1,3, 2);
			tmpLabel = new Label(3, 1, "设备名称", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(4,1,6, 1);
			tmpLabel = new Label(4, 1, "设备属性描述", format);
			sheet.addCell(tmpLabel);
			
			//sheet.mergeCells(4,1,6, 1);
			tmpLabel = new Label(4, 2, "设备型号", format);
			sheet.addCell(tmpLabel);
			
			tmpLabel = new Label(5, 2, "设备序列号", format);
			sheet.addCell(tmpLabel);
			
			tmpLabel = new Label(6, 2, "出厂日期", format);
			sheet.addCell(tmpLabel);
			
			tmpLabel = new Label(7, 2, "互联IP地址", format);
			sheet.addCell(tmpLabel);
			
			tmpLabel = new Label(8, 2, "LAN网关IP", format);
			sheet.addCell(tmpLabel);
			
			tmpLabel = new Label(9, 2, "管理IP地址", format);
			sheet.addCell(tmpLabel);
			
			sheet.mergeCells(7,1,9, 1);
			tmpLabel = new Label(7, 1, "设备接口IP地址", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(10,1,10, 2);
			tmpLabel = new Label(10, 1, "链路带宽", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(11,1,11, 2);
			tmpLabel = new Label(11, 1, "安装日期", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(12,1,12, 2);
			tmpLabel = new Label(12, 1, "维保日期", format);
			sheet.addCell(tmpLabel);
			sheet.mergeCells(13,1,13, 2);
			tmpLabel = new Label(13, 1, "备注", format);
			sheet.addCell(tmpLabel);
			// 表空间信息
//			Petrolconfig vo=null;
//			for(int i=0;i<petrollist.size();i++)
//			{ 
//			     vo=(Petrolconfig)petrollist.get(i);
//			     String id = vo.getId()+"";
//			     
//				//row = row + (i);
//			     tmpLabel = new Label(0, 3+i, i+1+"", p_labelFormat);
//					sheet.addCell(tmpLabel);
//				tmpLabel = new Label(1, 3+i, vo.getAddress(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(2, 3+i, vo.getName(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(3, 3+i, vo.getEquipname(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(4, 3+i, vo.getModelname(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(5, 3+i, vo.getSerialname(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(6, 3+i, vo.getProductime(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(7, 3+i,vo.getNetip() , p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(8, 3+i,vo.getLanip() , p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(9, 3+i, vo.getIp(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(10, 3+i, vo.getBw(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(11, 3+i, vo.getSettime(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(12, 3+i, vo.getRepairtime(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//				tmpLabel = new Label(13, 3+i,vo.getComment(), p_labelFormat);
//				sheet.addCell(tmpLabel);
//
//			}
//			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_syslog(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("Syslog统计报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			List sysloglist = (List)reportHash.get("list");
			int startRow = ((Integer)reportHash.get("startRow")).intValue();
			Label tmpLabel = null;
			
			// 表空间信息
			tmpLabel = new Label(2, 0, "Syslog统计报表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "等级", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "来源", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "接收时间", _labelFormat);
			sheet.addCell(tmpLabel);
			NetSyslog syslog = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<sysloglist.size();i++)
			{ 
				syslog = (NetSyslog)sysloglist.get(i);	
			  	Date cc = syslog.getRecordtime().getTime();
			  	String message = syslog.getMessage();
			  	int priority = syslog.getPriority();
			  	String priorityname = syslog.getPriorityName();
			  	String rtime1 = _sdf.format(cc);
			     
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, startRow+i+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, priorityname, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, syslog.getHostname()+syslog.getIpaddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, message, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i, rtime1, p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	public void createReport_syslogall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("Syslog统计报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			List sysloglist = (List)reportHash.get("list");
			Label tmpLabel = null;
			
			// 表空间信息
			tmpLabel = new Label(2, 0, "Syslog统计报表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "等级", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "来源", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "接收时间", _labelFormat);
			sheet.addCell(tmpLabel);
			NetSyslog syslog = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<sysloglist.size();i++)
			{ 
				syslog = (NetSyslog)sysloglist.get(i);	
			  	Date cc = syslog.getRecordtime().getTime();
			  	String message = syslog.getMessage();
			  	int priority = syslog.getPriority();
			  	String priorityname = syslog.getPriorityName();
			  	String rtime1 = _sdf.format(cc);
			     
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+2+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, priorityname, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, syslog.getHostname()+syslog.getIpaddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, message, p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i, rtime1, p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	//zhushouzhi----------------------------------------------linklist
	public void createReport_linklist(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("链路信息", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			LinkDao linkDao = new LinkDao();
			List linklist = linkDao.loadAll();
			Label tmpLabel = null;
			linkDao.close();
			// 表空间信息
			tmpLabel = new Label(2, 0, "链路信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "起点设备", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "起点端口", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "终点设备", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "终点端口", _labelFormat);
			sheet.addCell(tmpLabel);
			 Link vo = null;
			  //  int startRow = jp.getStartRow();
		  	//java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<linklist.size();i++)
			{ 
				vo = (Link)linklist.get(i); 
	     		HostNode node = new HostNode();
			HostNodeDao dao = new HostNodeDao();
			
			node = dao.loadHost(vo.getStartId());
	     		HostNode endnode = new HostNode();
			dao = new HostNodeDao();
			
			endnode = dao.loadHost(vo.getEndId());		
			     
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, vo.getId()+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, node.getAlias(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, "IP地址:"+vo.getStartIp()+" 索引:"+vo.getStartIndex(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, endnode.getAlias(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i, "IP地址:"+vo.getEndIp()+" 索引:"+vo.getEndIndex(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e){
			}
		}
	}
	
	//quzhi
	public void createReport_ipmacall(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("IPMAC统计报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			List ipmaclist = (List)reportHash.get("list");
			Label tmpLabel = null;
			
		
			tmpLabel = new Label(2, 0, "IPMAC统计报表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "网络设备", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "端口", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "MAC地址", _labelFormat);
			sheet.addCell(tmpLabel);
			IpMac ipmac = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<ipmaclist.size();i++)
			{ 
				ipmac = (IpMac)ipmaclist.get(i);	
			  	
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+1+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, ipmac.getRelateipaddr(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, ipmac.getIfindex(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, ipmac.getIpaddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i, ipmac.getMac(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	public void createReport_ipmac(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("IPMAC统计报表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			List ipmaclist = (List)reportHash.get("list");
			int startRow = ((Integer)reportHash.get("startRow")).intValue();
			Label tmpLabel = null;
			
			// 表空间信息
			tmpLabel = new Label(2, 0, "IPMAC统计报表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "网络设备", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "端口", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "MAC地址", _labelFormat);
			sheet.addCell(tmpLabel);
			IpMac ipmac = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<ipmaclist.size();i++)
			{ 
				ipmac = (IpMac)ipmaclist.get(i);	
			     
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, startRow+i+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, ipmac.getRelateipaddr(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, ipmac.getIfindex(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, ipmac.getIpaddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i, ipmac.getMac(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_networklist(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("设备信息", 0);
			WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			HostNodeDao hostNodeDao = new HostNodeDao();
			List networkhostlist = hostNodeDao.loadall();
			Label tmpLabel = null;
			hostNodeDao.close();
			// 表空间信息
			tmpLabel = new Label(4, 0, "设备列表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "名称(ip)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "MAC", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "子网掩码", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 1, "型号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 1, "系统OID", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 1, "监视", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 1, "末端", _labelFormat);
			sheet.addCell(tmpLabel);
			HostNode vo = null;
			for (int i = 0; i < networkhostlist.size(); i++) {
				vo = (HostNode) networkhostlist.get(i);			     
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+1+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i,vo.getAlias(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i,vo.getIpAddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i,vo.getBridgeAddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 2+i,vo.getNetMask(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, 2+i,vo.getType(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, 2+i,vo.getSysOid(), p_labelFormat);
				sheet.addCell(tmpLabel);
				if (vo.isManaged() == true) {
					tmpLabel = new Label(7, 2+i,"是", p_labelFormat);
				}
				else {
					tmpLabel = new Label(7, 2+i,"否", p_labelFormat);
				}
				sheet.addCell(tmpLabel);
				if (vo.getEndpoint() == 1) {
					tmpLabel = new Label(8, 2+i,"是", p_labelFormat);
				}
				else {
					tmpLabel = new Label(8, 2+i,"否", p_labelFormat);
				}
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
     * 用来生成oa 统计入口流量与出口流量的平均值
     * 
     * @param filename  文件名称
     */
    public void createReport_oawork(String filename,String startdate,String todate) {
    		if (impReport.getTable() == null) {
    			fileName = null;
    			return;
    		}
    		WritableWorkbook wb = null;
    		try {
    			fileName = ResourceCenter.getInstance().getSysPath() + filename;
    			wb = Workbook.createWorkbook(new File(fileName));

    			//String starttime = (String) reportHash.get("starttime");
    			//String totime = (String) reportHash.get("totime");
    			WritableSheet sheet = wb.createSheet("端口综合报表", 0);
    			List memlist = (List) reportHash.get("memlist");
    			Vector vector = (Vector)reportHash.get("sxoanetifreport");
    			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    			WritableFont labelFont = new WritableFont(WritableFont
    					.createFont("宋体"), 12, WritableFont.BOLD, false);
    			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

    			WritableCellFormat _labelFormat = new WritableCellFormat();
    			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

    			WritableCellFormat p_labelFormat = new WritableCellFormat();
    			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

    			WritableCellFormat b_labelFormat = new WritableCellFormat();
    			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

    			Label tmpLabel = null;
    			tmpLabel = new Label(1, 0, "设备综合报表", labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(1, 2, "数据统计时间段: " + startdate+" 00:00:00 " + " 至 " + todate+" 23:59:59 ");
    			sheet.addCell(tmpLabel);
    			
    			
    			tmpLabel = new Label(0, 4, "IP", _labelFormat);
    			sheet.addCell(tmpLabel);
    		
    			tmpLabel = new Label(1, 4, "设备端口", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(2, 4, "关联应用", _labelFormat);
    			sheet.addCell(tmpLabel);
    			
    			tmpLabel = new Label(3, 4, "平均CPU使用率", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(4, 4, "平均内存使用率", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(5, 4, "平均连通率", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(6, 4, "平均响应时间", _labelFormat);
    			sheet.addCell(tmpLabel);
    			
    			tmpLabel = new Label(7, 4, "入口峰值", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(8, 4, "出口峰值", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(9, 4, "出口平均流速", _labelFormat);
    			sheet.addCell(tmpLabel);
    			tmpLabel = new Label(10, 4, "入口平均流速", _labelFormat);
    			sheet.addCell(tmpLabel);

    			
    			//
    			if(null != vector && vector.size()>0)
    			{
    				
    		    Hashtable hash = new Hashtable();
    					
    			for(int i=0;i<vector.size();i++ )
    			{
    				hash=(Hashtable) vector.get(i);
    				
    					//tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
    					//sheet.addCell(tmpLabel);
    					tmpLabel = new Label(0, 5 + i, ""+hash.get("ipaddress"),//vector里面的值我不会放，呵呵，就是替换""的内容，
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					
    					tmpLabel = new Label(1, 5 + i, ""+hash.get("ifname"),
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(2, 5 + i, ""+hash.get("linkuse"),
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					
    					tmpLabel = new Label(3, 5 + i, ""+hash.get("avgcpu")+"%",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(4, 5 + i, ""+hash.get("avgmemory")+"%",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(5, 5 + i, ""+hash.get("avgping")+"%",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(6, 5 + i, ""+hash.get("avgresponse")+"毫秒",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					
    				
    					tmpLabel = new Label(7, 5 + i, ""+hash.get("maxout")+"kb/s",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(8, 5 + i, ""+hash.get("maxin")+"kb/s",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(9, 5 + i, ""+hash.get("agvout")+"kb/s",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					tmpLabel = new Label(10, 5 + i, ""+hash.get("agvin")+"kb/s",
    							p_labelFormat);
    					sheet.addCell(tmpLabel);
    					
    			}
             
    		 }
    			wb.write();
    		} catch (Exception e) {
    			// SysLogger.error("Error in ExcelReport.createReport()",e);
    			e.printStackTrace();
    		} finally {
    			try {
    				if (wb != null)
    					wb.close();
    			} catch (Exception e) {
    			}
    		}
    	}
    
	//-----------zhushouzhi
	public void createReport_tomcatDoc(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");
		Date cc = colTime.getTime();
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		Hashtable Disk = (Hashtable) reportHash.get("Disk");
		Hashtable memMaxHash = (Hashtable) reportHash.get("memmaxhash");
		Hashtable memAvgHash = (Hashtable) reportHash.get("memavghash");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");

		String jvmnow = (String) reportHash.get("jvmnow");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image
				.getInstance(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "TomcatPing"
						+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);
		Table aTable1 = new Table(4);
		float[] widths1 = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths1);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable1.addCell("JVM内存利用率");
		aTable1.addCell("当前利用率");
		aTable1.addCell("最小利用率");
		aTable1.addCell("平均利用率");
		aTable1.addCell("");
		aTable1.addCell(jvmnow + "%");
		aTable1.addCell((String) maxjvm.get("max_tomcat_jvm"));
		aTable1.addCell((String) maxjvm.get("avg_tomcat_jvm"));
		Image img1 = Image
				.getInstance(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "tomcat_jvm"
						+ ".png");
		img1.setAbsolutePosition(0, 0);
		img1.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable1);
		document.add(img1);
		document.close();
	}

	// tomcat pdf=================
	public void createReport_tomcatPDF(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Hashtable CPU = (Hashtable) reportHash.get("CPU");
		if (CPU == null)
			CPU = new Hashtable();
		String Ping = (String) reportHash.get("Ping");
		Calendar colTime = (Calendar) reportHash.get("time");

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String jvmnow = (String) reportHash.get("jvmnow");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", contextFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Paragraph("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(Ping + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image
				.getInstance(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "TomcatPing"
						+ ".png");
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(75);
		document.add(aTable);
		document.add(img);
		PdfPTable aTable1 = new PdfPTable(4);
		float[] widths1 = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(widths1);
		aTable1.setWidthPercentage(100);
		aTable1.addCell(new Phrase("JVM内存利用率", contextFont));
		aTable1.addCell(new Phrase("当前利用率", contextFont));
		aTable1.addCell(new Phrase("最小利用率", contextFont));
		aTable1.addCell(new Phrase("平均利用率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable1.addCell("");
		aTable1.addCell(jvmnow + "%");
		aTable1.addCell((String) maxjvm.get("max_tomcat_jvm"));
		aTable1.addCell((String) maxjvm.get("avg_tomcat_jvm"));

		Image img1 = Image
				.getInstance(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip + "tomcat_jvm"
						+ ".png");
		img1.setAlignment(Image.LEFT);// 设置图片显示位置
		img1.scalePercent(75);
		document.add(aTable1);
		document.add(img1);
		document.close();
	}

	// tomcat yunxingfenxi zhushouzhi
	public void createReport_tomcatNewDoc(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		Tomcat tomcat = (Tomcat) reportHash.get("tomcat");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		String downnum = (String) reportHash.get("downnum");
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase((String) maxping.get("pingmax"), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "JVM利用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小利用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase((String) maxping.get("pingmax"), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均利用率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "TOMCAT版本" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getVersion(), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("JVM版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getJvmversion(), contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "JVM供应商" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getJvmvender(), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服务器操作系统", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getOs(), contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();
	}

	// zhushouzhi pdf tomcat run
	public void createReport_tomcatNewPDF(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		String downnum = (String) reportHash.get("downnum");
		Tomcat tomcat = (Tomcat) reportHash.get("tomcat");
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont1 = new Font(bfChinese, 10, Font.NORMAL);

		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "JVM利用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小利用率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均利用率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "TOMCAT版本" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getVersion()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("JVM版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getJvmversion()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "JVM供应商" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getJvmvender()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("服务器操作系统", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(tomcat.getOs()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);

		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();

	}
	
	// iis````报表
	public void createReport_iis(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");

			String iisnow = (String) reportHash.get("iisnow");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Calendar colTime = (Calendar) reportHash.get("time");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, iisnow + "%", p_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "iisPing"
					+ ".png");
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));

			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// iis-------------word

	public void createReport_iisDoc(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Calendar colTime = (Calendar) reportHash.get("time");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String iisnow = (String) reportHash.get("iisnow");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(iisnow + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "iisPing" + ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);

		document.close();
	}

	// iis------------pdf
	public void createReport_iisPDF(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Calendar colTime = (Calendar) reportHash.get("time");

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String iisnow = (String) reportHash.get("iisnow");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", contextFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Paragraph("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(iisnow + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "iisPing" + ".png");
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(75);
		document.add(aTable);
		document.add(img);
		PdfPTable aTable1 = new PdfPTable(4);
		float[] widths1 = { 220f, 300f, 220f, 220f };
		aTable1.setWidths(widths1);
		aTable1.setWidthPercentage(100);

		document.close();
	}

	public void createReport_iisNewDoc(String file) throws DocumentException,
			IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		Tomcat tomcat = (Tomcat) reportHash.get("tomcat");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		String downnum = (String) reportHash.get("downnum");
		IIS iis = (IIS) reportHash.get("iis");
		// time
		Hashtable pollingtime_ht = new Hashtable();
		IISManager tm = new IISManager();
		String lasttime;
		String nexttime;
		try {
			pollingtime_ht = tm.getCollecttime(iis.getIpAddress());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pollingtime_ht != null) {
			lasttime = (String) pollingtime_ht.get("lasttime");
			nexttime = (String) pollingtime_ht.get("nexttime");
		} else {
			lasttime = null;
			nexttime = null;
		}
		// 同步配置
		List data_list = new ArrayList();
		Hashtable iisvalues = ShareData.getIisdata();
		if (iisvalues != null && iisvalues.size() > 0) {
			data_list = (List) iisvalues.get(ip);
		}
		System.out.println(data_list
				+ "----------------------------====================");
		String totalBytesSentHighWord = "";
		String totalBytesSentLowWord = "";
		String totalBytesReceivedHighWord = "";
		String totalBytesReceivedLowWord = "";

		String totalFilesSent = "";
		String totalFilesReceived = "";
		String currentAnonymousUsers = "";
		String totalAnonymousUsers = "";

		String maxAnonymousUsers = "";
		String currentConnections = "";
		String maxConnections = "";
		String connectionAttempts = "";

		String logonAttempts = "";
		String totalGets = "";
		String totalPosts = "";
		String totalNotFoundErrors = "";
		if (data_list != null && data_list.size() > 0) {

			IISVo iisvo = (IISVo) data_list.get(0);
			totalBytesSentHighWord = iisvo.getTotalBytesSentHighWord();
			totalBytesSentLowWord = iisvo.getTotalBytesSentLowWord();
			totalBytesReceivedHighWord = iisvo.getTotalBytesReceivedHighWord();
			totalBytesReceivedLowWord = iisvo.getTotalBytesReceivedLowWord();

			totalFilesSent = iisvo.getTotalFilesSent();
			totalFilesReceived = iisvo.getTotalFilesReceived();
			currentAnonymousUsers = iisvo.getCurrentAnonymousUsers();
			totalAnonymousUsers = iisvo.getTotalAnonymousUsers();

			maxAnonymousUsers = iisvo.getMaxAnonymousUsers();
			currentConnections = iisvo.getCurrentConnections();
			maxConnections = iisvo.getMaxConnections();
			connectionAttempts = iisvo.getConnectionAttempts();

			logonAttempts = iisvo.getLogonAttempts();
			totalGets = iisvo.getTotalGets();
			totalPosts = iisvo.getTotalPosts();
			totalNotFoundErrors = iisvo.getTotalNotFoundErrors();

		}
		// end 同步配置
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(10);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase((String) maxping.get("pingmax"), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "上一次轮询:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lasttime, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("下一次轮询:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(nexttime, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "同步配置" + "\n", titleFont));
		cell.setRowspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "发送的总字节数中的高32 位:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesSentHighWord, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("发送的总字节数中的低32 位:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesSentLowWord, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "接收的总字节数中的高32 位:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesReceivedHighWord, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("接收的总字节数中的低32 位:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesReceivedLowWord, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "发送的文件总数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalFilesSent, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("接收的文件总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalFilesReceived, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的当前用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(currentAnonymousUsers, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("匿名连接的用户总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalAnonymousUsers, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的最大用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(maxAnonymousUsers, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("匿名连接的当前用户数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(currentConnections, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的最大用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(maxConnections, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("尝试连接数::", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(connectionAttempts, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "尝试登录数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(logonAttempts, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("GET方法请求数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalGets, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "POST方法请求数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalPosts, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("页面访问错误总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalNotFoundErrors, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();
	}

	// iis----------------new pdf
	public void createReport_iisNewPDF(String file) throws DocumentException,
			IOException {
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		Tomcat tomcat = (Tomcat) reportHash.get("tomcat");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		String downnum = (String) reportHash.get("downnum");
		IIS iis = (IIS) reportHash.get("iis");
		// time
		Hashtable pollingtime_ht = new Hashtable();
		IISManager tm = new IISManager();
		String lasttime;
		String nexttime;
		try {
			pollingtime_ht = tm.getCollecttime(iis.getIpAddress());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pollingtime_ht != null) {
			lasttime = (String) pollingtime_ht.get("lasttime");
			nexttime = (String) pollingtime_ht.get("nexttime");
		} else {
			lasttime = null;
			nexttime = null;
		}
		// 同步配置
		List data_list = new ArrayList();
		Hashtable iisvalues = ShareData.getIisdata();
		if (iisvalues != null && iisvalues.size() > 0) {
			data_list = (List) iisvalues.get(ip);
		}
		System.out.println(data_list
				+ "----------------------------====================");
		String totalBytesSentHighWord = "";
		String totalBytesSentLowWord = "";
		String totalBytesReceivedHighWord = "";
		String totalBytesReceivedLowWord = "";

		String totalFilesSent = "";
		String totalFilesReceived = "";
		String currentAnonymousUsers = "";
		String totalAnonymousUsers = "";

		String maxAnonymousUsers = "";
		String currentConnections = "";
		String maxConnections = "";
		String connectionAttempts = "";

		String logonAttempts = "";
		String totalGets = "";
		String totalPosts = "";
		String totalNotFoundErrors = "";
		if (data_list != null && data_list.size() > 0) {

			IISVo iisvo = (IISVo) data_list.get(0);
			totalBytesSentHighWord = iisvo.getTotalBytesSentHighWord();
			totalBytesSentLowWord = iisvo.getTotalBytesSentLowWord();
			totalBytesReceivedHighWord = iisvo.getTotalBytesReceivedHighWord();
			totalBytesReceivedLowWord = iisvo.getTotalBytesReceivedLowWord();

			totalFilesSent = iisvo.getTotalFilesSent();
			totalFilesReceived = iisvo.getTotalFilesReceived();
			currentAnonymousUsers = iisvo.getCurrentAnonymousUsers();
			totalAnonymousUsers = iisvo.getTotalAnonymousUsers();

			maxAnonymousUsers = iisvo.getMaxAnonymousUsers();
			currentConnections = iisvo.getCurrentConnections();
			maxConnections = iisvo.getMaxConnections();
			connectionAttempts = iisvo.getConnectionAttempts();

			logonAttempts = iisvo.getLogonAttempts();
			totalGets = iisvo.getTotalGets();
			totalPosts = iisvo.getTotalPosts();
			totalNotFoundErrors = iisvo.getTotalNotFoundErrors();

		}
		// end 同步配置
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont1 = new Font(bfChinese, 10, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(10);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "上一次轮询:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lasttime));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("下一次轮询:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(nexttime));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "同步配置" + "\n", titleFont));
		cell.setRowspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "发送的总字节数中的高32 位:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesSentHighWord));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("发送的总字节数中的低32 位:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesSentLowWord));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "接收的总字节数中的高32 位:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesReceivedHighWord));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("接收的总字节数中的低32 位:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalBytesReceivedLowWord));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "发送的文件总数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalFilesSent));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("接收的文件总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalFilesReceived));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的当前用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(currentAnonymousUsers));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("匿名连接的用户总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalAnonymousUsers));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的最大用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(maxAnonymousUsers));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("匿名连接的当前用户数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(currentConnections));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "匿名连接的最大用户数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(maxConnections));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("尝试连接数::", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(connectionAttempts));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "尝试登录数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(logonAttempts));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("GET方法请求数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalGets));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "POST方法请求数:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalPosts));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("页面访问错误总数:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(totalNotFoundErrors));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();

	}
	//zhushouzhi----------------weblogic
	// weblogic excel report
	public void createReport_weblogic(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			String hostname = (String) reportHash.get("equipname");
			String ip = (String) reportHash.get("ip");
			Weblogic weblogic = (Weblogic) reportHash.get("weblogic");
			String weblogicnow = (String) reportHash.get("weblogicnow");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			Calendar colTime = (Calendar) reportHash.get("time");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
			String[] memoryItem = { "Capability", "Utilization" };
			String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
			String[] diskItemch = { "总容量", "已用容量", "利用率" };

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, weblogicnow + "%", p_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(2, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "WeblogicPing"
					+ ".png");
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));

			// 队列信息
			Hashtable hash = null;
			WeblogicSnmp weblogicsnmp = null;
			WeblogicConfigDao weblogicconfigdao = new WeblogicConfigDao();
			weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
					.getCommunity(), weblogic.getPortnum());
			hash = weblogicsnmp.collectData();
			List queuedatalist = new ArrayList();
			tmpLabel = new Label(0, 14, "线程队列", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "队列名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "执行线程空闲数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "队列中最长等待请求的存在时间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 14, "当前线程数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 14, "总线程数", _labelFormat);
			sheet.addCell(tmpLabel);
			if (hash != null) {
				queuedatalist = (List) hash.get("queueValue");
			}
			int row = 0;
			for (int i = 0; i < queuedatalist.size(); i++) {
				WeblogicQueue vo = (WeblogicQueue) queuedatalist.get(i);
				tmpLabel = new Label(1, 15 + i, i + 1 + "", p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 15 + i,
						vo.getExecuteQueueRuntimeName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 15 + i, vo
						.getThreadPoolRuntimeExecuteThreadIdleCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 15 + i, vo
						.getExecuteQueueRuntimePendingRequestOldestTime(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, 15 + i, vo
						.getExecuteQueueRuntimePendingRequestCurrentCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, 15 + i, vo
						.getExecuteQueueRuntimePendingRequestTotalCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
			}
			// jdbc连接池
			int row1 = 15 + row + 1;
			tmpLabel = new Label(0, row1, "JDBC连接池", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row1, "名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row1, "当前连接数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row1, "驱动器版本", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row1, "最大容量", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row1, "平均连接数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row1, "最高可活动连接数", _labelFormat);
			sheet.addCell(tmpLabel);
			List jdbcdatalist = new ArrayList();
			weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
					.getCommunity(), weblogic.getPortnum());
			hash = weblogicsnmp.collectData();
			jdbcdatalist = (List) hash.get("jdbcValue");
			int row2 = 0;
			for (int i = 0; i < jdbcdatalist.size(); i++) {
				WeblogicJdbc vo = (WeblogicJdbc) jdbcdatalist.get(i);
				tmpLabel = new Label(1, row1 + 1 + i, i + 1 + "", p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row1 + 1 + i, vo
						.getJdbcConnectionPoolName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(
						3,
						row1 + 1 + i,
						vo
								.getJdbcConnectionPoolRuntimeActiveConnectionsCurrentCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row1 + 1 + i, vo
						.getJdbcConnectionPoolRuntimeVersionJDBCDriver(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row1 + 1 + i, vo
						.getJdbcConnectionPoolRuntimeMaxCapacity(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(
						6,
						row1 + 1 + i,
						vo
								.getJdbcConnectionPoolRuntimeActiveConnectionsAverageCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(7, row1 + 1 + i, vo
						.getJdbcConnectionPoolRuntimeHighestNumAvailable(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				row2++;
			}
			// jvm堆
			int row3 = row1 + 1 + row2 + 1;
			weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
					.getCommunity(), weblogic.getPortnum());
			hash = weblogicsnmp.collectData();
			List heapdatalist = new ArrayList();
			heapdatalist = (List) hash.get("heapValue");
			tmpLabel = new Label(0, row3, "JVM堆", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row3, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row3, "名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row3, "堆大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row3, "当前空闲堆大小", _labelFormat);
			sheet.addCell(tmpLabel);
			int row4 = 0;
			for (int i = 0; i < heapdatalist.size(); i++) {
				WeblogicHeap vo = (WeblogicHeap) heapdatalist.get(i);
				tmpLabel = new Label(1, row3 + 1 + i, i + 1 + "", p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row3 + 1 + i, vo.getJvmRuntimeName(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row3 + 1 + i, vo
						.getJvmRuntimeHeapSizeCurrent(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row3 + 1 + i, vo
						.getJvmRuntimeHeapFreeCurrent(), p_labelFormat);
				sheet.addCell(tmpLabel);
				row4++;
			}
			int row5 = row3 + 1 + row4 + 1;
			tmpLabel = new Label(0, row5, "服务", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row5, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row5, "服务名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row5, "服务监听地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row5, "服务监听端口", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row5, "当前Socket数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row5, "服务当前运行状态", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row5, "服务器IP", _labelFormat);
			sheet.addCell(tmpLabel);
			List serverdatalist = new ArrayList();
			weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
					.getCommunity(), weblogic.getPortnum());
			hash = weblogicsnmp.collectData();
			serverdatalist = (List) hash.get("serverValue");
			for (int i = 0; i < serverdatalist.size(); i++) {
				WeblogicServer vo = (WeblogicServer) serverdatalist.get(i);
				tmpLabel = new Label(1, row5 + 1 + i, i + 1 + "", p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row5 + 1 + i,
						vo.getServerRuntimeName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row5 + 1 + i, vo
						.getServerRuntimeListenAddress(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row5 + 1 + i, vo
						.getServerRuntimeListenPort(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row5 + 1 + i, vo
						.getServerRuntimeOpenSocketsCurrentCount(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, row5 + 1 + i, vo
						.getServerRuntimeState(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(7, row5 + 1 + i, weblogic.getIpAddress(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_weblogicDoc(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Calendar colTime = (Calendar) reportHash.get("time");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String weblogicnow = (String) reportHash.get("weblogicnow");
		Weblogic weblogic = (Weblogic) reportHash.get("weblogic");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表");
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();

		aTable.addCell("连通率");
		aTable.addCell("当前连通率");
		aTable.addCell("最小连通率");
		aTable.addCell("平均连通率");
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(weblogicnow + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "WeblogicPing"
				+ ".png");
		img.setAbsolutePosition(0, 0);
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		document.add(aTable);
		document.add(img);
		document.add(new Paragraph("\n"));
		Table aTable1 = new Table(7);
		float[] widths1 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable1.setWidths(widths1);
		aTable1.setWidth(100); // 占页面宽度 90%
		aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable1.setAutoFillEmptyCells(true); // 自动填满
		aTable1.setBorderWidth(1); // 边框宽度
		aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable1.setSpacing(0);// 即单元格之间的间距
		aTable1.setBorder(2);// 边框
		aTable1.endHeaders();
		Cell cell = null;

		cell = new Cell(new Phrase("线程队列", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("队列名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("执行线程空闲数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("队列中最长等待请求的存在时间", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("当前线程数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new Cell(new Phrase("总线程数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);
		List queuedatalist = new ArrayList();
		Hashtable hash = null;
		WeblogicSnmp weblogicsnmp = null;
		WeblogicConfigDao weblogicconfigdao = new WeblogicConfigDao();
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		if (hash != null) {
			queuedatalist = (List) hash.get("queueValue");
		}
		for (int i = 0; i < queuedatalist.size(); i++) {
			WeblogicQueue vo = (WeblogicQueue) queuedatalist.get(i);
			cell = new Cell(new Phrase(""));
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(i + 1 + "", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(vo.getExecuteQueueRuntimeName(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getThreadPoolRuntimeExecuteThreadIdleCount(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestOldestTime(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestCurrentCount(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestTotalCount(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

		}
		document.add(aTable1);

		Table aTable2 = new Table(8);
		float[] widths2 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable2.setWidths(widths2);
		aTable2.setWidth(100); // 占页面宽度 90%
		aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable2.setAutoFillEmptyCells(true); // 自动填满
		aTable2.setBorderWidth(1); // 边框宽度
		aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable2.setSpacing(0);// 即单元格之间的间距
		aTable2.setBorder(2);// 边框
		aTable2.endHeaders();
		cell = new Cell(new Phrase("JDBC连接池", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("当前连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("驱动器版本", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("最大容量", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new Cell(new Phrase("平均连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);
		cell = new Cell(new Phrase("最高可活动连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);
		List jdbcdatalist = new ArrayList();
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		jdbcdatalist = (List) hash.get("jdbcValue");
		for (int i = 0; i < jdbcdatalist.size(); i++) {
			WeblogicJdbc vo = (WeblogicJdbc) jdbcdatalist.get(i);
			cell = new Cell(new Phrase(""));
			aTable2.addCell(cell);

			cell = new Cell(new Phrase(i + 1 + "", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new Cell(new Phrase(vo.getJdbcConnectionPoolName(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new Cell(
					new Phrase(
							vo
									.getJdbcConnectionPoolRuntimeActiveConnectionsCurrentCount(),
							contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeVersionJDBCDriver(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeMaxCapacity(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new Cell(
					new Phrase(
							vo
									.getJdbcConnectionPoolRuntimeActiveConnectionsAverageCount(),
							contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new Cell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeHighestNumAvailable(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
		}
		document.add(aTable2);
		Table aTable3 = new Table(5);
		float[] widths3 = { 220f, 220f, 220f, 220f, 220f };
		aTable3.setWidths(widths3);
		aTable3.setWidth(100); // 占页面宽度 90%
		aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable3.setAutoFillEmptyCells(true); // 自动填满
		aTable3.setBorderWidth(1); // 边框宽度
		aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable3.setSpacing(0);// 即单元格之间的间距
		aTable3.setBorder(2);// 边框
		aTable3.endHeaders();
		cell = new Cell(new Phrase("JVM堆", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new Cell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new Cell(new Phrase("名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new Cell(new Phrase("堆大小", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new Cell(new Phrase("当前空闲堆大小", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		List heapdatalist = new ArrayList();
		heapdatalist = (List) hash.get("heapValue");
		for (int i = 0; i < heapdatalist.size(); i++) {
			WeblogicHeap vo = (WeblogicHeap) heapdatalist.get(i);
			cell = new Cell(new Phrase(""));
			aTable3.addCell(cell);

			cell = new Cell(new Phrase(i + 1 + "", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new Cell(new Phrase(vo.getJvmRuntimeName(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new Cell(new Phrase(vo.getJvmRuntimeHeapSizeCurrent(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new Cell(new Phrase(vo.getJvmRuntimeHeapFreeCurrent(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
		}
		document.add(aTable3);
		Table aTable4 = new Table(8);
		float[] widths4 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable4.setWidths(widths4);
		aTable4.setWidth(100); // 占页面宽度 90%
		aTable4.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable4.setAutoFillEmptyCells(true); // 自动填满
		aTable4.setBorderWidth(1); // 边框宽度
		aTable4.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable4.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable4.setSpacing(0);// 即单元格之间的间距
		aTable4.setBorder(2);// 边框
		aTable4.endHeaders();
		cell = new Cell(new Phrase("服务", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("服务名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("服务监听地址", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("服务监听端口", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);
		cell = new Cell(new Phrase("当前Socket数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("服务当前运行状态", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new Cell(new Phrase("服务器IP", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		List serverdatalist = new ArrayList();
		serverdatalist = (List) hash.get("serverValue");
		for (int i = 0; i < serverdatalist.size(); i++) {
			WeblogicServer vo = (WeblogicServer) serverdatalist.get(i);
			cell = new Cell("");
			aTable4.addCell(cell);
			cell = new Cell(new Phrase(i + 1 + "", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new Cell(new Phrase(vo.getServerRuntimeName(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new Cell(new Phrase(vo.getServerRuntimeListenAddress(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new Cell(new Phrase(vo.getServerRuntimeListenPort(),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase(vo
					.getServerRuntimeOpenSocketsCurrentCount(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new Cell(new Phrase(vo.getServerRuntimeState(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new Cell(new Phrase(weblogic.getIpAddress(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
		}
		document.add(aTable4);
		document.close();
	}

	public void createReport_weblogicPDF(String file) throws DocumentException,
			IOException {
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");

		String hostname = (String) reportHash.get("equipname");
		String ip = (String) reportHash.get("ip");
		String newip = doip(ip);
		// WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
		Calendar colTime = (Calendar) reportHash.get("time");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String weblogicnow = (String) reportHash.get("weblogicnow");
		Weblogic weblogic = (Weblogic) reportHash.get("weblogic");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String[] memoryItemch = { "内存容量", "当前利用率", "最大利用率", "平均利用率" };
		String[] memoryItem = { "Capability", "Utilization" };
		String[] diskItem = { "AllSize", "UsedSize", "Utilization" };
		String[] diskItemch = { "总容量", "已用容量", "利用率" };
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 10, Font.NORMAL);
		Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
				+ "数据统计时间段:" + starttime + " 至 " + totime;
		Paragraph context = new Paragraph(contextString, contextFont);
		// 正文格式左对齐
		context.setAlignment(Element.ALIGN_LEFT);
		// context.setFont(contextFont);
		// 离上一段落（标题）空的行数
		context.setSpacingBefore(5);
		// 设置第一行空的列数
		context.setFirstLineIndent(5);
		document.add(context);
		document.add(new Paragraph("\n"));
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		PdfPTable aTable = new PdfPTable(4);
		float[] widths = { 220f, 300f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);

		aTable.addCell(new Phrase("连通率", contextFont));
		aTable.addCell(new Phrase("当前连通率", contextFont));
		aTable.addCell(new Phrase("最小连通率", contextFont));
		aTable.addCell(new Phrase("平均连通率", contextFont));
		// aTable.addCell("3.2",Ping+"%");
		aTable.addCell("");
		aTable.addCell(weblogicnow + "%");
		aTable.addCell((String) maxping.get("pingmax"));
		aTable.addCell((String) maxping.get("avgpingcon"));
		Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
				+ "/resource/image/jfreechart/" + newip + "WeblogicPing"
				+ ".png");
		img.setAlignment(Image.LEFT);// 设置图片显示位置
		img.scalePercent(75);
		document.add(aTable);
		document.add(img);

		document.add(new Paragraph("\n"));
		PdfPTable aTable1 = new PdfPTable(7);
		float[] widths1 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable1.setWidths(widths1);
		aTable1.setWidthPercentage(100);
		PdfPCell cell = null;

		cell = new PdfPCell(new Phrase("线程队列", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("队列名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("执行线程空闲数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("队列中最长等待请求的存在时间", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("当前线程数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);

		cell = new PdfPCell(new Phrase("总线程数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable1.addCell(cell);
		List queuedatalist = new ArrayList();
		Hashtable hash = null;
		WeblogicSnmp weblogicsnmp = null;
		WeblogicConfigDao weblogicconfigdao = new WeblogicConfigDao();
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		if (hash != null) {
			queuedatalist = (List) hash.get("queueValue");
		}
		for (int i = 0; i < queuedatalist.size(); i++) {
			WeblogicQueue vo = (WeblogicQueue) queuedatalist.get(i);
			cell = new PdfPCell(new Phrase(""));
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(i + 1 + "", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getExecuteQueueRuntimeName()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getThreadPoolRuntimeExecuteThreadIdleCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestOldestTime()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestCurrentCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getExecuteQueueRuntimePendingRequestTotalCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);

		}
		document.add(aTable1);
		document.add(new Paragraph("\n"));
		PdfPTable aTable2 = new PdfPTable(8);
		float[] widths2 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable2.setWidths(widths2);
		aTable2.setWidthPercentage(100);

		cell = new PdfPCell(new Phrase("JDBC连接池", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("当前连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("驱动器版本", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("最大容量", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);

		cell = new PdfPCell(new Phrase("平均连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);
		cell = new PdfPCell(new Phrase("最高可活动连接数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable2.addCell(cell);
		List jdbcdatalist = new ArrayList();
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		jdbcdatalist = (List) hash.get("jdbcValue");
		for (int i = 0; i < jdbcdatalist.size(); i++) {
			WeblogicJdbc vo = (WeblogicJdbc) jdbcdatalist.get(i);
			cell = new PdfPCell(new Phrase(""));
			aTable2.addCell(cell);

			cell = new PdfPCell(new Phrase(i + 1 + ""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getJdbcConnectionPoolName()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new PdfPCell(
					new Phrase(
							vo
									.getJdbcConnectionPoolRuntimeActiveConnectionsCurrentCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeVersionJDBCDriver()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeMaxCapacity()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new PdfPCell(
					new Phrase(
							vo
									.getJdbcConnectionPoolRuntimeActiveConnectionsAverageCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			cell = new PdfPCell(new Phrase(vo
					.getJdbcConnectionPoolRuntimeHighestNumAvailable()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
		}
		document.add(aTable2);
		document.add(new Paragraph("\n"));
		PdfPTable aTable3 = new PdfPTable(5);
		float[] widths3 = { 220f, 220f, 220f, 220f, 220f };
		aTable3.setWidths(widths3);
		aTable3.setWidthPercentage(100);
		cell = new PdfPCell(new Phrase("JVM堆", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new PdfPCell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new PdfPCell(new Phrase("名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new PdfPCell(new Phrase("堆大小", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);

		cell = new PdfPCell(new Phrase("当前空闲堆大小", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable3.addCell(cell);
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		List heapdatalist = new ArrayList();
		heapdatalist = (List) hash.get("heapValue");
		for (int i = 0; i < heapdatalist.size(); i++) {
			WeblogicHeap vo = (WeblogicHeap) heapdatalist.get(i);
			cell = new PdfPCell(new Phrase(""));
			aTable3.addCell(cell);

			cell = new PdfPCell(new Phrase(i + 1 + ""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getJvmRuntimeName()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getJvmRuntimeHeapSizeCurrent()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getJvmRuntimeHeapFreeCurrent()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
		}
		document.add(aTable3);
		document.add(new Paragraph("\n"));
		PdfPTable aTable4 = new PdfPTable(8);
		float[] widths4 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
		aTable4.setWidths(widths4);
		aTable4.setWidthPercentage(100);
		cell = new PdfPCell(new Phrase("服务", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("序号", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("服务名称", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("服务监听地址", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("服务监听端口", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);
		cell = new PdfPCell(new Phrase("当前Socket数", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("服务当前运行状态", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);

		cell = new PdfPCell(new Phrase("服务器IP", contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable4.addCell(cell);
		weblogicsnmp = new WeblogicSnmp(weblogic.getIpAddress(), weblogic
				.getCommunity(), weblogic.getPortnum());
		hash = weblogicsnmp.collectData();
		List serverdatalist = new ArrayList();
		serverdatalist = (List) hash.get("serverValue");
		for (int i = 0; i < serverdatalist.size(); i++) {
			WeblogicServer vo = (WeblogicServer) serverdatalist.get(i);
			cell = new PdfPCell(new Phrase(""));
			aTable3.addCell(cell);
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase(i + 1 + ""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getServerRuntimeName()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getServerRuntimeListenAddress()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getServerRuntimeListenPort()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase(vo
					.getServerRuntimeOpenSocketsCurrentCount()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new PdfPCell(new Phrase(vo.getServerRuntimeState()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);

			cell = new PdfPCell(new Phrase(weblogic.getIpAddress()));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
		}
		document.add(aTable4);
		document.close();
	}

	public void createReport_weblogicNewDoc(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		String downnum = (String) reportHash.get("downnum");
		WeblogicConfig weblogicconf = (WeblogicConfig) reportHash
				.get("weblogicconf");
		WeblogicNormal normalvalue = (WeblogicNormal) reportHash
				.get("normalvalue");
		// time
		Hashtable pollingtime_ht = new Hashtable();
		WeblogicManager tm = new WeblogicManager();
		String lasttime;
		String nexttime;
		try {
			pollingtime_ht = tm.getCollecttime(weblogicconf.getIpAddress());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pollingtime_ht != null) {
			lasttime = (String) pollingtime_ht.get("lasttime");
			nexttime = (String) pollingtime_ht.get("nexttime");
		} else {
			lasttime = null;
			nexttime = null;
		}

		// end 同步配置
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase((String) maxping.get("pingmax"), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "管理域名" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainName(), contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("管理端口", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainAdministrationPort(),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "监控端口" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(weblogicconf.getPortnum() + "", contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainConfigurationVersion(),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "上一次轮询:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lasttime, contextFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("下一次轮询:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(nexttime, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
					+ "\n" + "\n";
		} else {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();
	}

	public void createReport_weblogicNewPDF(String file)
			throws DocumentException, IOException {
		Hashtable Memory = (Hashtable) reportHash.get("Memory");
		// EventListDao eventListDao = new EventListDao();

		Hashtable maxping = (Hashtable) reportHash.get("ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		String hostname = (String) reportHash.get("equipname");
		String hostnameDoc = (String) reportHash.get("equipnameDoc");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String startdate = (String) reportHash.get("startdate");
		Hashtable maxjvm = (Hashtable) reportHash.get("maxjvm");
		String downnum = (String) reportHash.get("downnum");
		WeblogicConfig weblogicconf = (WeblogicConfig) reportHash
				.get("weblogicconf");
		WeblogicNormal normalvalue = (WeblogicNormal) reportHash
				.get("normalvalue");
		// time
		Hashtable pollingtime_ht = new Hashtable();
		WeblogicManager tm = new WeblogicManager();
		String lasttime;
		String nexttime;
		try {
			pollingtime_ht = tm.getCollecttime(weblogicconf.getIpAddress());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pollingtime_ht != null) {
			lasttime = (String) pollingtime_ht.get("lasttime");
			nexttime = (String) pollingtime_ht.get("nexttime");
		} else {
			lasttime = null;
			nexttime = null;
		}

		// end 同步配置
		/* String type = (String)request.getAttribute("type"); */
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(file));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);

		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
Font contextFont1 = new Font(bfChinese, 10, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框

		aTable.endHeaders();
		Cell cell = null;
		cell = new Cell(new Phrase("\n" + "设备" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		aTable.addCell(cell);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell = new Cell(new Phrase("\n" + starttime + " 至 " + totime + "\n",
				contextFont1));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "设备名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnameDoc, contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("设备类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "运行评价" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase("\n" + grade + "\n", contextFont));
		cell.setColspan(7);

		aTable.addCell(cell);
		cell = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n" + "标",
				titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "最小连通率" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(
				new Phrase((String) maxping.get("pingmax")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "系统" + "\n", titleFont));
		cell.setRowspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "管理域名" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainName()));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("管理端口", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainAdministrationPort(),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "监控端口" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(weblogicconf.getPortnum() + ""));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(normalvalue.getDomainConfigurationVersion(),
				contextFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "上一次轮询:" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(lasttime));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("下一次轮询:", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(nexttime));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "连通率事件" + downnum + "次" + "\n",
				contextFont));
		cell.setColspan(7);
		aTable.addCell(cell);

		cell = new Cell(new Phrase("\n" + "业务分析" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		cell.setColspan(8);
		aTable.addCell(cell);
		String strping = "";
		if ("0".equals(downnum)) {
			strping = "    2   该段时间内，设备连通较好，未出现宕机情况" + "\n" + "\n";
			
		} else {
			strping = "    2   发生" + downnum + "次服务器连通率事件，提醒管理员注意观察设备的连通状况。"
			+ "\n" + "\n";
		}
		cell = new Cell(new Phrase("    1   在该段时间内，运行状况稳定，概述设备处于稳定运行状态。"
				+ " \n" + "\n" + strping + "\n" + "\n" + "\n", contextFont)

		);
		cell.setColspan(8);
		aTable.addCell(cell);
		// end 写内存

		// end 写内存 }
		document.add(aTable);
		document.close();
	}

	public void createReport_midping(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			WritableSheet sheet = wb.createSheet("中间件连通率使用统计报表", 0);
			List pinglist = (List) reportHash.get("pinglist");
			List pinglistiis = (List) reportHash.get("pinglistiis");
			List pinglistweblogic = (List) reportHash.get("pinglistweblogic");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, "中间件连通率性能统计报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP地址", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "设备名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "宕机数", _labelFormat);
			sheet.addCell(tmpLabel);
			// I_MonitorIpList monitorManager=new MonitoriplistManager();
			int row = 5;
			if (pinglist != null && pinglist.size() > 0) {
				for (int i = 0; i < pinglist.size(); i++) {
					List pinglist1 = (List) pinglist.get(i);
					row = row + (i);
					tmpLabel = new Label(0, 5 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 5 + i, (String) pinglist1.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 5 + i, (String) pinglist1.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 5 + i, (String) pinglist1.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 5 + i, (String) pinglist1.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			if (pinglistiis != null && pinglistiis.size() > 0) {
				for (int i = 0; i < pinglistiis.size(); i++) {
					List pinglist1 = (List) pinglistiis.get(i);
					row = row + (i);
					tmpLabel = new Label(0, pinglist.size()+5 + i, pinglist.size()+i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, pinglist.size()+5 + i, (String) pinglist1.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, pinglist.size()+5 + i, (String) pinglist1.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, pinglist.size()+5 + i, (String) pinglist1.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, pinglist.size()+5 + i, (String) pinglist1.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			if (pinglistweblogic != null && pinglistweblogic.size() > 0) {
				for (int i = 0; i < pinglistweblogic.size(); i++) {
					List pinglist1 = (List) pinglistweblogic.get(i);
					row = row + (i);
					tmpLabel = new Label(0, pinglistiis.size()+pinglist.size()+5 + i, pinglistiis.size()+pinglist.size()+i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, pinglistiis.size()+pinglist.size()+5 + i, (String) pinglist1.get(0),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, pinglistiis.size()+pinglist.size()+5 + i, (String) pinglist1.get(1),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, pinglistiis.size()+pinglist.size()+5 + i, (String) pinglist1.get(3),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, pinglistiis.size()+pinglist.size()+5 + i, (String) pinglist1.get(4),
							p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			/*
			 * if(impReport.getChart()!=null){ ByteArrayOutputStream baos = new
			 * ByteArrayOutputStream(); try {
			 * ChartUtilities.writeChartAsPNG(baos,
			 * impReport.getChart().getChart(),impReport.getChart().getWidth(),impReport.getChart().getHeight()); }
			 * catch (IOException ioe){} WritableImage wi = new
			 * WritableImage(2,10000 + 5, 8, 12, baos.toByteArray());
			 * sheet.addImage(wi); }
			 */
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	//quzhi
	public void createReport_softwarelist(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("软件列表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			Vector softwareV = (Vector)reportHash.get("softwareV");
			Label tmpLabel = null;
			
		
			tmpLabel = new Label(2, 0, "软件列表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "软件名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "软件类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "安装日期", _labelFormat);
			sheet.addCell(tmpLabel);
			IpMac ipmac = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<softwareV.size();i++)
			{ 
				Softwarecollectdata swdata = (Softwarecollectdata)softwareV.get(i);	
			  	
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+1+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, swdata.getName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, swdata.getType(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, swdata.getInsdate(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	//quzhi
	public void createReport_devicelist(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("设备列表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			Vector deviceV = (Vector)reportHash.get("deviceV");
			Label tmpLabel = null;
			
		
			tmpLabel = new Label(2, 0, "设备列表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "设备类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "状态", _labelFormat);
			sheet.addCell(tmpLabel);
			IpMac ipmac = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<deviceV.size();i++)
			{ 
				Devicecollectdata devicedata = (Devicecollectdata)deviceV.get(i);	
			  	
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+1+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, devicedata.getName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, devicedata.getType(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, devicedata.getStatus(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	//hukelei 倒出设备存储列表
	public void createReport_storagelist(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("设备列表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			Vector storageV = (Vector)reportHash.get("storageV");
			Label tmpLabel = null;
			
		
			tmpLabel = new Label(2, 0, "存储列表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "设备类型", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "描述", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "容量", _labelFormat);
			sheet.addCell(tmpLabel);
			IpMac ipmac = null;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			for(int i=0;i<storageV.size();i++)
			{ 
				Storagecollectdata storagedata = (Storagecollectdata)storageV.get(i);	
			  	
				//row = row + (i);
			     tmpLabel = new Label(0, 2+i, i+1+"", p_labelFormat);
					sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 2+i, storagedata.getName(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 2+i, storagedata.getType(), p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 2+i, storagedata.getCap(), p_labelFormat);
				sheet.addCell(tmpLabel);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_netDistrictIplist(String filename , String title ,List list) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			
			WritableSheet sheet = wb.createSheet("网段ip分配信息", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			
			
			Label tmpLabel = null;
			// 表空间信息
			sheet.mergeCells(0,0,3, 0);
			tmpLabel = new Label(0, 0, title, b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "名称(ip)", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "是否分配", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "在线状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			NetDistrictIpDetail vo = null;
			
			if(list!=null && list.size()>0){
				for (int i = 0; i < list.size(); i++) {
					vo = (NetDistrictIpDetail) list.get(i);
				     
					//row = row + (i);
				     tmpLabel = new Label(0, 2+i, i+1+"", b_labelFormat);
						sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 2+i,vo.getIpaddress(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					String isUsed = "否";
					if("1".equals(vo.getIsUsed())){
						isUsed = "是";
					}
					tmpLabel = new Label(2, 2+i, isUsed , b_labelFormat);
					sheet.addCell(tmpLabel);
					
					String isOnline = "否";
					if("1".equals(vo.getIsOnline())){
						isOnline = "是";
					}
					tmpLabel = new Label(3, 2+i,isOnline, b_labelFormat);
					sheet.addCell(tmpLabel);
					
				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_macconfiglist(String filename , String title ,List list) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			
			WritableSheet sheet = wb.createSheet("Mac 区域配置", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			
			
			Label tmpLabel = null;
			// 表空间信息
			sheet.mergeCells(0,0,3, 0);
			tmpLabel = new Label(0, 0, title, b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "MAC", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "所属区域", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "描述", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			Macconfig vo = null;
			
			if(list!=null && list.size()>0){
				for (int i = 0; i < list.size(); i++) {
					vo = (Macconfig) list.get(i);
				     
					//row = row + (i);
				     tmpLabel = new Label(0, 2+i, i+1+"", b_labelFormat);
						sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 2+i,vo.getMac(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					int discrictid = vo.getDiscrictid();
					
					DistrictConfig districtConfig = null;
					
					DistrictDao districtDao = new DistrictDao();
					try {
						districtConfig =  (DistrictConfig)districtDao.findByID(String.valueOf(discrictid));
					} catch (RuntimeException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} finally{
						districtDao.close();
					}
					
					
					tmpLabel = new Label(2, 2+i, districtConfig.getName()   , b_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					tmpLabel = new Label(3, 2+i, vo.getMacdesc() , b_labelFormat);
					sheet.addCell(tmpLabel);
					
				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	public void createReport_portscanlist(String filename , String title ,List list){
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			
			WritableSheet sheet = wb.createSheet("端口扫描信息", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			
			
			Label tmpLabel = null;
			// 表空间信息
			sheet.mergeCells(0,0,5, 0);
			tmpLabel = new Label(0, 0, title, b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "IP 地址", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "端口号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "端口名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "端口是否启用", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 1, "扫描时间", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			PortConfig vo = null;
			
			if(list!=null && list.size()>0){
				for (int i = 0; i < list.size(); i++) {
					vo = (PortConfig) list.get(i);
				     
					//row = row + (i);
				    tmpLabel = new Label(0, 2+i, i+1+"", b_labelFormat);
					sheet.addCell(tmpLabel);
						
					tmpLabel = new Label(1, 2+i,vo.getIpaddress(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					tmpLabel = new Label(2, 2+i,vo.getPort(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					tmpLabel = new Label(3, 2+i,vo.getPortName(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					String status = "否";
					if("1".equals(vo.getStatus())){
						status = "是";
					}
					tmpLabel = new Label(4, 2+i, status , b_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					tmpLabel = new Label(5, 2+i,vo.getScantime(), b_labelFormat);
					sheet.addCell(tmpLabel);
					
				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	//nielin add  此为 三峡银行 订制 报表打印
	public void createReport_falseLoglist(String filename , String title ,List list) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			
			WritableSheet sheet = wb.createSheet("错误日志列表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			
			
			Label tmpLabel = null;
			// 表空间信息
			sheet.mergeCells(0,0,2, 0);
			tmpLabel = new Label(0, 0, title, b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "日志内容", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "时间", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			
			if(list!=null && list.size()>0){
				for (int i = 0; i < list.size(); i++) {
					List valuelist = (List) list.get(i);
				     
					//row = row + (i);
				     tmpLabel = new Label(0, 2+i, i+1+"", b_labelFormat);
						sheet.addCell(tmpLabel);
						
						
					tmpLabel = new Label(1, 2+i,(String)valuelist.get(0), b_labelFormat);
					sheet.addCell(tmpLabel);
					
					
					tmpLabel = new Label(2, 2+i, (String)valuelist.get(1)   , b_labelFormat);
					sheet.addCell(tmpLabel);
					
				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	// zhushouzhi--------------infor star
	public void createReport_infor(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable) reportHash.get("dbValue");
			ArrayList dbspaces = new ArrayList();
			dbspaces = (ArrayList) dbinfo.get("informixspaces");// 数据库空间信息
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			ArrayList dbsession = new ArrayList();
			dbsession = (ArrayList) dbinfo.get("sessionList");// 会话信息
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "数据库信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "空间名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "空间的所有者", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "该块文件路径", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 14, "空间大小", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 14, "已使用空间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 14, "空闲空间", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 14, "使用率(%)", _labelFormat);
			sheet.addCell(tmpLabel);

			int row = 14;
			int row1 = 0;
			// 库信息
			if (dbspaces != null && dbspaces.size() > 0) {
				for (int i = 0; i < dbspaces.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbspaces.get(i);
					double all = 100.00;
					double show = all
							- Double.parseDouble(tablesVO.get("percent_free")
									.toString());
					String str = show + "";
					if (str.length() > 5) {
						str = str.substring(0, 5);
					}
					row = row + (i);
					tmpLabel = new Label(1, 15 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 15 + i, (String) tablesVO
							.get("dbspace"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 15 + i, (String) tablesVO
							.get("owner"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 15 + i, (String) tablesVO
							.get("fname"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 15 + i, (String) tablesVO
							.get("pages_size"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 15 + i, (String) tablesVO
							.get("pages_used"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 15 + i, (String) tablesVO
							.get("pages_free"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 15 + i, str, p_labelFormat);

					sheet.addCell(tmpLabel);
					row1++;
				}
			}

			row1 = 15 + row1;
			// 性能信息
			tmpLabel = new Label(0, row1 + 1, "INFORMIX数据库会话信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row1 + 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row1 + 1, "用户名", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row1 + 1, "主机", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row1 + 1, "命中次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row1 + 1, "所请求锁数量", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row1 + 1, "当前持有锁数量", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row1 + 1, "等待锁的次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row1 + 1, "检测到的死锁数量", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row1 + 1, "死锁超时数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, row1 + 1, "缓冲区读取数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(11, row1 + 1, "缓冲区写入数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(12, row1 + 1, "页读取数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(13, row1 + 1, "页写入数", _labelFormat);
			sheet.addCell(tmpLabel);
			int row2 = row1 + 2;
			int row3 = 0;
			if (dbsession != null && dbsession.size() > 0) {
				for (int i = 0; i < dbsession.size(); i++) {

					Hashtable tablesVO = (Hashtable) dbsession.get(i);
					tmpLabel = new Label(1, row2 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row2 + i, (String) tablesVO
							.get("username"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row2 + i, (String) tablesVO
							.get("hostname"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row2 + i, (String) tablesVO
							.get("access"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row2 + i, ((Integer) tablesVO
							.get("lockreqs")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row2 + i, ((Integer) tablesVO
							.get("locksheld")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row2 + i, ((Integer) tablesVO
							.get("lockwts")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row2 + i, ((Integer) tablesVO
							.get("deadlks")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row2 + i, ((Integer) tablesVO
							.get("lktouts")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(10, row2 + i, ((Integer) tablesVO
							.get("bufreads")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(11, row2 + i, ((Integer) tablesVO
							.get("bufwrites")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(12, row2 + i, ((Integer) tablesVO
							.get("pagreads")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(13, row2 + i, ((Integer) tablesVO
							.get("pagwrites")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					row3++;
				}
			}

			int row4 = row3 + row2;
			int row5 = 0;
			tmpLabel = new Label(0, row4 + 1, "INFORMIX数据库锁信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row4 + 1, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row4 + 1, "用户名", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row4 + 1, "主机", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row4 + 1, "数据库名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row4 + 1, "表名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row4 + 1, "表名称", _labelFormat);
			sheet.addCell(tmpLabel);
			// 锁信息
			ArrayList dblock = new ArrayList();
			dblock = (ArrayList) dbinfo.get("lockList");// 锁信息
			if (dblock != null && dblock.size() > 0) {
				for (int i = 0; i < dblock.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblock.get(i);
					String type = (String) tablesVO.get("type");
					String desc = "";
					if ("B".equals(type)) {
						desc = "字节锁";
					} else if ("IS".equals(type)) {
						desc = "意向共享锁";
					} else if ("S".equals(type)) {
						desc = "共享锁";
					} else if ("XS".equals(type)) {
						desc = "由可重复阅读器持有的共享键值";
					} else if ("U".equals(type)) {
						desc = "更新锁";
					} else if ("IX".equals(type)) {
						desc = "意向互斥锁";
					} else if ("SIX".equals(type)) {
						desc = "共享的意向互斥锁";
					} else if ("X".equals(type)) {
						desc = "互斥锁";
					} else if ("XR".equals(type)) {
						desc = "由可重复阅读器持有的互斥键值";
					}

					tmpLabel = new Label(1, row4 + 2 + i, i + 1 + "",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row4 + 2 + i, (String) tablesVO
							.get("username"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row4 + 2 + i, (String) tablesVO
							.get("hostname"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row4 + 2 + i, (String) tablesVO
							.get("dbsname"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row4 + 2 + i, (String) tablesVO
							.get("tabname"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row4 + 2 + i, (String) tablesVO
							.get("desc"), p_labelFormat);
					sheet.addCell(tmpLabel);
					row5++;
				}
			}
			// end
			// informix 日志信息
			int row6 = row5 + row4 + 3;
			int row7 = 0;
			tmpLabel = new Label(0, row6, "INFORMIX数据库日志信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row6, "文件ID", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row6, "日志文件的页数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row6, "日志文件已用页数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row6, "是否被使用", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row6, "是否是当前文件", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row6, "是否已经备份过", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row6, "是否已置于备份磁盘上", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row6, "是否为临时日志文件", _labelFormat);
			sheet.addCell(tmpLabel);
			ArrayList dblog = new ArrayList();
			dblog = (ArrayList) dbinfo.get("informixlog");// 数据库日志信息
			if (dblog != null && dblog.size() > 0) {
				for (int i = 0; i < dblog.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblog.get(i);

					tmpLabel = new Label(1, row6 + 1 + i, ((Integer) tablesVO
							.get("uniqid")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row6 + 1 + i, ((Integer) tablesVO
							.get("size")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row6 + 1 + i, ((Integer) tablesVO
							.get("used")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row6 + 1 + i, (String) tablesVO
							.get("is_used"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row6 + 1 + i, (String) tablesVO
							.get("is_current"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row6 + 1 + i, (String) tablesVO
							.get("is_backed_up"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row6 + 1 + i, (String) tablesVO
							.get("is_archived"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row6 + 1 + i, (String) tablesVO
							.get("is_temp"), p_labelFormat);
					sheet.addCell(tmpLabel);
					row7++;
				}
			}
			// 日志 end
			// informix i/o信息
			int row8 = row7 + row6 + 2;
			tmpLabel = new Label(0, row8, "INFORMIX数据库I/O信息", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row8, "块编号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row8, "物理读取数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row8, "读取的页数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row8, "物理写入数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row8, "写入的页数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row8, "物理读取（镜像）数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row8, "读取（镜像）的页数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row8, "物理写入（镜像）数 ", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row8, "写入（镜像）的页数", _labelFormat);
			sheet.addCell(tmpLabel);
			ArrayList dbio = new ArrayList();
			dbio = (ArrayList) dbinfo.get("iolist");// IO信息
			if (dbio != null && dbio.size() > 0) {
				for (int i = 0; i < dbio.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbio.get(i);

					tmpLabel = new Label(1, row8 + 1 + i, (String) tablesVO
							.get("chunknum"), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row8 + 1 + i, ((Integer) tablesVO
							.get("reads")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row8 + 1 + i, ((Integer) tablesVO
							.get("pagesread")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row8 + 1 + i, ((Integer) tablesVO
							.get("writes")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row8 + 1 + i, ((Integer) tablesVO
							.get("pageswritten")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row8 + 1 + i, ((Integer) tablesVO
							.get("mreads")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row8 + 1 + i, ((Integer) tablesVO
							.get("mpagesread")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row8 + 1 + i, ((Integer) tablesVO
							.get("mwrites")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row8 + 1 + i, ((Integer) tablesVO
							.get("mpageswritten")).intValue()
							+ "", p_labelFormat);
					sheet.addCell(tmpLabel);

				}
			}
			// end
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	// zhushouzhi-----------------infor end
	// zhushozhi--------------------infor doc start
	public void createReport_inforDoc(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable) reportHash.get("dbValue");
			ArrayList dbspaces = new ArrayList();
			dbspaces = (ArrayList) dbinfo.get("informixspaces");// 数据库空间信息
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			ArrayList dbsession = new ArrayList();
			dbsession = (ArrayList) dbinfo.get("sessionList");// 会话信息
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();

			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAbsolutePosition(0, 0);
			img.setAlignment(Image.LEFT);// 设置图片显示位置
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			// informix 库信息
			Table aTable1 = new Table(9);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f };
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框

			cell = new Cell(new Phrase("数据库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间的所有者", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("该块文件路径", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间大小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("已使用空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("使用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 表空间信息
			int row = 0;
			if (dbspaces != null && dbspaces.size() > 0) {
				for (int i = 0; i < dbspaces.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbspaces.get(i);
					double all = 100.00;
					double show = all
							- Double.parseDouble(tablesVO.get("percent_free")
									.toString());
					String str = show + "";
					if (str.length() > 5) {
						str = str.substring(0, 5);
					}
					aTable1.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new Cell(new Phrase(rowStr, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(
							(String) tablesVO.get("dbspace"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO.get("owner"),
							contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO.get("fname"),
							contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("pages_size"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("pages_used"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("pages_free"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new Cell(new Phrase(str, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
				}
			}
			// informix日志信息
			Table aTable2 = new Table(9);
			float[] widthss = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f };
			aTable2.setWidths(widthss);
			aTable2.setWidth(100); // 占页面宽度 90%
			aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable2.setAutoFillEmptyCells(true); // 自动填满
			aTable2.setBorderWidth(1); // 边框宽度
			aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable2.setSpacing(0);// 即单元格之间的间距
			aTable2.setBorder(2);// 边框
			cell = new Cell(new Phrase("INFORMIX数据库日志信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("文件ID", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("日志文件的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("日志文件已用页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("是否被使用", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("是否是当前文件", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("是否已经备份过", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("是否已置于备份磁盘上", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new Cell(new Phrase("是否为临时日志文件", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			ArrayList dblog = new ArrayList();
			dblog = (ArrayList) dbinfo.get("informixlog");// 数据库日志信息
			if (dblog != null && dblog.size() > 0) {
				for (int i = 0; i < dblog.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblog.get(i);

					aTable2.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("uniqid")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO.get("size"))
							.intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO.get("used"))
							.intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase(
							(String) tablesVO.get("is_used"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("is_current"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("is_backed_up"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("is_archived"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new Cell(new Phrase(
							(String) tablesVO.get("is_temp"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
				}
			}
			// end 日志
			// 会话--信息
			Table aTable3 = new Table(14);
			float[] widths1 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f, 220f, 220f, 220f, 220f, 220f };
			aTable3.setWidths(widths1);
			aTable3.setWidth(100); // 占页面宽度 90%
			aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable3.setAutoFillEmptyCells(true); // 自动填满
			aTable3.setBorderWidth(1); // 边框宽度
			aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable3.setSpacing(0);// 即单元格之间的间距
			aTable3.setBorder(2);// 边框

			cell = new Cell(new Phrase("INFORMIX数据库会话信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("用户名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("主机", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("命中次数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("所请求锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("当前持有锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("等待锁的次数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("检测到的死锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("死锁超时数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("缓冲区读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("缓冲区写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("页读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new Cell(new Phrase("页写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			int row3 = 0;
			if (dbsession != null && dbsession.size() > 0) {
				for (int i = 0; i < dbsession.size(); i++) {

					Hashtable tablesVO = (Hashtable) dbsession.get(i);
					aTable3.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new Cell(new Phrase(i + 1 + "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("username"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("hostname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO.get("access"),
							contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("lockreqs")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("locksheld")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("lockwts")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("deadlks")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("lktouts")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("bufreads")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("bufwrites")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("pagreads")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("pagwrites")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
				}
			}

			// int row4 = row3 + row2;
			int row5 = 0;
			Table aTable4 = new Table(7);
			float[] widths2 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			aTable4.setWidths(widths2);
			aTable4.setWidth(100); // 占页面宽度 90%
			aTable4.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable4.setAutoFillEmptyCells(true); // 自动填满
			aTable4.setBorderWidth(1); // 边框宽度
			aTable4.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable4.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable4.setSpacing(0);// 即单元格之间的间距
			aTable4.setBorder(2);// 边框
			// 锁信息
			cell = new Cell(new Phrase("INFORMIX数据库锁信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("用户名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("主机", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("数据库名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("表名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new Cell(new Phrase("锁的类型", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			ArrayList dblock = new ArrayList();
			dblock = (ArrayList) dbinfo.get("lockList");// 锁信息
			if (dblock != null && dblock.size() > 0) {
				for (int i = 0; i < dblock.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblock.get(i);
					String type = (String) tablesVO.get("type");
					String desc = "";
					if ("B".equals(type)) {
						desc = "字节锁";
					} else if ("IS".equals(type)) {
						desc = "意向共享锁";
					} else if ("S".equals(type)) {
						desc = "共享锁";
					} else if ("XS".equals(type)) {
						desc = "由可重复阅读器持有的共享键值";
					} else if ("U".equals(type)) {
						desc = "更新锁";
					} else if ("IX".equals(type)) {
						desc = "意向互斥锁";
					} else if ("SIX".equals(type)) {
						desc = "共享的意向互斥锁";
					} else if ("X".equals(type)) {
						desc = "互斥锁";
					} else if ("XR".equals(type)) {
						desc = "由可重复阅读器持有的互斥键值";
					}

					aTable4.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new Cell(new Phrase(i + 1 + "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("username"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO
							.get("hostname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new Cell(new Phrase(
							(String) tablesVO.get("dbsname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new Cell(new Phrase(
							(String) tablesVO.get("tabname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new Cell(new Phrase((String) tablesVO.get("desc"),
							contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
				}
			}
			// informix i/o信息
			Table aTable5 = new Table(10);
			float[] widths3 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f, 220f };
			aTable5.setWidths(widths3);
			aTable5.setWidth(100); // 占页面宽度 90%
			aTable5.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable5.setAutoFillEmptyCells(true); // 自动填满
			aTable5.setBorderWidth(1); // 边框宽度
			aTable5.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable5.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable5.setSpacing(0);// 即单元格之间的间距
			aTable5.setBorder(2);// 边框
			cell = new Cell(new Phrase("INFORMIX数据库I/O信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("块编号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("物理读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("读取的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("物理写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("写入的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("物理读取（镜像）数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("读取（镜像）的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("物理写入（镜像）数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new Cell(new Phrase("写入（镜像）的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			ArrayList dbio = new ArrayList();
			dbio = (ArrayList) dbinfo.get("iolist");// IO信息
			if (dbio != null && dbio.size() > 0) {
				for (int i = 0; i < dbio.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbio.get(i);
					aTable5.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new Cell(new Phrase((String) tablesVO
							.get("chunknum"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(
							((Integer) tablesVO.get("reads")).intValue() + "",
							contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("pagesread")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("writes")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("pageswritten")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("mreads")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("mpagesread")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("mwrites")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new Cell(new Phrase(((Integer) tablesVO
							.get("mpageswritten")).intValue()
							+ "", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
				}
			}
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.add(aTable2);
			document.add(aTable3);
			document.add(aTable4);
			document.add(aTable5);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}

	}

	// zhushouzhi==-----------------------end
	// zhushouzhi--------------------------infor pdf start
	public void createReport_inforPDF(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);

			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable) reportHash.get("dbValue");
			ArrayList dbspaces = new ArrayList();
			dbspaces = (ArrayList) dbinfo.get("informixspaces");// 数据库空间信息
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			ArrayList dbsession = new ArrayList();
			dbsession = (ArrayList) dbinfo.get("sessionList");// 会话信息

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;

			Paragraph context = new Paragraph(contextString, contextFont1);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);

			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			// informix 库信息
			PdfPTable aTable1 = new PdfPTable(9);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);

			cell = new PdfPCell(new Phrase("数据库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间的所有者", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("该块文件路径", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("已使用空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("使用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// informix 库信息
			int row = 0;
			if (dbspaces != null && dbspaces.size() > 0) {
				for (int i = 0; i < dbspaces.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbspaces.get(i);
					double all = 100.00;
					double show = all
							- Double.parseDouble(tablesVO.get("percent_free")
									.toString());
					String str = show + "";
					if (str.length() > 5) {
						str = str.substring(0, 5);
					}
					aTable1.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new PdfPCell(new Phrase(rowStr));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("dbspace")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("owner")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("fname")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("pages_size")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("pages_used")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("pages_free")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(str));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
				}
			}
			// informix日志信息
			PdfPTable aTable2 = new PdfPTable(9);
			float[] widthss = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f };
			aTable2.setWidths(widthss);
			aTable2.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库日志信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("文件ID", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("日志文件的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("日志文件已用页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("是否被使用", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("是否是当前文件", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("是否已经备份过", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("是否已置于备份磁盘上", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);
			cell = new PdfPCell(new Phrase("是否为临时日志文件", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable2.addCell(cell);

			ArrayList dblog = new ArrayList();
			dblog = (ArrayList) dbinfo.get("informixlog");// 数据库日志信息
			if (dblog != null && dblog.size() > 0) {
				for (int i = 0; i < dblog.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblog.get(i);

					aTable2.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("uniqid")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("size")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("used")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("is_used")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("is_current")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("is_backed_up")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("is_archived")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("is_temp")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable2.addCell(cell);
				}
			}
			// end 日志
			// 会话--信息
			PdfPTable aTable3 = new PdfPTable(14);
			float[] widths1 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f, 220f, 220f, 220f, 220f, 220f };
			aTable3.setWidths(widths1);
			aTable3.setWidthPercentage(100);

			cell = new PdfPCell(new Phrase("数据库会话信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("用户名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("主机", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("命中次数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("所请求锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("当前持有锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("等待锁的次数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("检测到的死锁数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("死锁超时数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("缓冲区读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("缓冲区写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("页读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			cell = new PdfPCell(new Phrase("页写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable3.addCell(cell);
			int row3 = 0;
			if (dbsession != null && dbsession.size() > 0) {
				for (int i = 0; i < dbsession.size(); i++) {

					Hashtable tablesVO = (Hashtable) dbsession.get(i);
					aTable3.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new PdfPCell(new Phrase(i + 1 + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("username")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("hostname")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("access")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("lockreqs")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("locksheld")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("lockwts")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("deadlks")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("lktouts")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("bufreads")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("bufwrites")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("pagreads")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("pagwrites")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable3.addCell(cell);
				}
			}

			// int row4 = row3 + row2;
			int row5 = 0;
			PdfPTable aTable4 = new PdfPTable(7);
			float[] widths2 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			aTable4.setWidths(widths2);
			aTable4.setWidthPercentage(100);
			// 锁信息
			cell = new PdfPCell(new Phrase("数据库锁信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("用户名", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("主机", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("表名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			cell = new PdfPCell(new Phrase("锁的类型", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable4.addCell(cell);
			ArrayList dblock = new ArrayList();
			dblock = (ArrayList) dbinfo.get("lockList");// 锁信息
			if (dblock != null && dblock.size() > 0) {
				for (int i = 0; i < dblock.size(); i++) {
					Hashtable tablesVO = (Hashtable) dblock.get(i);
					String type = (String) tablesVO.get("type");
					String desc = "";
					if ("B".equals(type)) {
						desc = "字节锁";
					} else if ("IS".equals(type)) {
						desc = "意向共享锁";
					} else if ("S".equals(type)) {
						desc = "共享锁";
					} else if ("XS".equals(type)) {
						desc = "由可重复阅读器持有的共享键值";
					} else if ("U".equals(type)) {
						desc = "更新锁";
					} else if ("IX".equals(type)) {
						desc = "意向互斥锁";
					} else if ("SIX".equals(type)) {
						desc = "共享的意向互斥锁";
					} else if ("X".equals(type)) {
						desc = "互斥锁";
					} else if ("XR".equals(type)) {
						desc = "由可重复阅读器持有的互斥键值";
					}

					aTable4.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new PdfPCell(new Phrase(i + 1 + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("username")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("hostname")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("dbsname")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("tabname")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("desc")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable4.addCell(cell);
				}
			}
			// informix i/o信息
			PdfPTable aTable5 = new PdfPTable(10);
			float[] widths3 = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
					220f, 220f };
			aTable5.setWidths(widths3);
			aTable5.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库I/O信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("块编号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("物理读取数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("读取的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写入数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("写入的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("物理读取（镜像）数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("读取（镜像）的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写入（镜像）数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			cell = new PdfPCell(new Phrase("写入（镜像）的页数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable5.addCell(cell);
			ArrayList dbio = new ArrayList();
			dbio = (ArrayList) dbinfo.get("iolist");// IO信息
			if (dbio != null && dbio.size() > 0) {
				for (int i = 0; i < dbio.size(); i++) {
					Hashtable tablesVO = (Hashtable) dbio.get(i);
					aTable5.addCell("");
					row = i + 1;
					String rowStr = "" + row;
					cell = new PdfPCell(new Phrase((String) tablesVO
							.get("chunknum")));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("reads")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("pagesread")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("writes")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("pageswritten")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("mreads")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("mpagesread")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("mwrites")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
					cell = new PdfPCell(new Phrase(((Integer) tablesVO
							.get("mpageswritten")).intValue()
							+ ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable5.addCell(cell);
				}
			}
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.add(new Paragraph("\n"));
			document.add(aTable2);
			document.add(new Paragraph("\n"));
			document.add(aTable3);
			document.add(new Paragraph("\n"));
			document.add(aTable4);
			document.add(new Paragraph("\n"));
			document.add(aTable5);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}

	}

	// end
	// informix--------------new doc
	// zhushouzhi------------------------ sybase pdf
	public void createReport_inforNewDoc(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		Hashtable dbinfo = new Hashtable();
		dbinfo = (Hashtable) reportHash.get("dbValue");
		ArrayList dbspaces = new ArrayList();
		dbspaces = (ArrayList) dbinfo.get("informixspaces");// 数据库空间信息
		DBTypeDao typedao = new DBTypeDao();
		DBTypeVo typevo = typedao.findByDbtype("informix");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename, contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总物理内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总数据高速缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Metadata缓存(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储过程缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总逻辑内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据缓存匹配度(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储缓存匹配度(%)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// 写表空间

		InformixspaceconfigDao informixspaceconfigDao = new InformixspaceconfigDao();

		List list = null;
		try {
			list = informixspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			informixspaceconfigDao.close();
		}

		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(15 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// io
		ArrayList dbabout = new ArrayList();
		dbabout = (ArrayList) dbinfo.get("aboutlist");// 会话信息

		Hashtable hashtable = new Hashtable();
		if (dbabout != null && dbabout.size() > 0) {
			for (int i = 0; i < dbabout.size(); i++) {
				Hashtable tablesVO = (Hashtable) dbabout.get(i);
				String name = ((String) tablesVO.get("name")).trim();
				String desc = "";
				if ("dskreads".equals(name)) {
					desc = "从磁盘的实际读取数";
					hashtable.put("dskreads", tablesVO.get("value"));
				} else if ("bufreads".equals(name)) {
					desc = "从共享内存的读取数";
					hashtable.put("bufreads", tablesVO.get("value"));
				} else if ("dskwrites".equals(name)) {
					desc = "向磁盘的实际写入数";
					hashtable.put("dskwrites", tablesVO.get("value"));
				} else if ("bufwrites".equals(name)) {
					desc = "向共享内存的写入数";
					hashtable.put("bufwrites", tablesVO.get("value"));
				} else if ("isamtot".equals(name)) {
					desc = "调用总数";
					hashtable.put("isamtot", tablesVO.get("value"));
				} else if ("isopens".equals(name)) {
					desc = "isopen调用";
					hashtable.put("isopens", tablesVO.get("value"));
				} else if ("isstarts".equals(name)) {
					desc = "isstart调用";
					hashtable.put("isstarts", tablesVO.get("value"));
				} else if ("isreads".equals(name)) {
					desc = "isread调用";
					hashtable.put("isreads", tablesVO.get("value"));
				} else if ("iswrites".equals(name)) {
					desc = "iswirte调用";
					hashtable.put("iswrites", tablesVO.get("value"));
				} else if ("isrewrites".equals(name)) {
					desc = "isrewrite调用";
					hashtable.put("isrewrites", tablesVO.get("value"));
				} else if ("isdeletes".equals(name)) {
					desc = "isdelete调用";
					hashtable.put("isdeletes", tablesVO.get("value"));
				} else if ("iscommits".equals(name)) {
					desc = "iscommit调用";
					hashtable.put("iscommits", tablesVO.get("value"));
				} else if ("isrollbacks".equals(name)) {
					desc = "isrollback调用";
					hashtable.put("isrollbacks", tablesVO.get("value"));
				} else if ("ovlock".equals(name)) {
					desc = "溢出锁表";
					hashtable.put("ovlock", tablesVO.get("value"));
				} else if ("ovuser".equals(name)) {
					desc = "溢出用户表";
					hashtable.put("ovuser", tablesVO.get("value"));
				} else if ("ovtrans".equals(name)) {
					desc = "溢出事物表";
					hashtable.put("ovtrans", tablesVO.get("value"));
				} else if ("latchwts".equals(name)) {
					desc = "锁存储器请求等待数";
					hashtable.put("latchwts", tablesVO.get("value"));
				} else if ("buffwts".equals(name)) {
					desc = "缓冲区等待数";
					hashtable.put("buffwts", tablesVO.get("value"));
				} else if ("lockreqs".equals(name)) {
					desc = "锁请求数";
					hashtable.put("lockreqs", tablesVO.get("value"));
				} else if ("lockwts".equals(name)) {
					desc = "锁等待数";
					hashtable.put("lockwts", tablesVO.get("value"));
				} else if ("ckptwts".equals(name)) {
					desc = "检查点等待数";
					hashtable.put("ckptwts", tablesVO.get("value"));
				} else if ("deadlks".equals(name)) {
					desc = "死锁数";
					hashtable.put("deadlks", tablesVO.get("value"));
				} else if ("lktouts".equals(name)) {
					desc = "死锁超时数";
					hashtable.put("lktouts", tablesVO.get("value"));
				} else if ("numckpts".equals(name)) {
					desc = "检查点数";
					hashtable.put("numckpts", tablesVO.get("value"));
				} else if ("plgpagewrites".equals(name)) {
					desc = "已写入的物理日志页";
					hashtable.put("plgpagewrites", tablesVO.get("value"));
				} else if ("plgwrites".equals(name)) {
					desc = "物理日志写入数";
					hashtable.put("plgwrites", tablesVO.get("value"));
				} else if ("llgrecs".equals(name)) {
					desc = "逻辑日志记录数";
					hashtable.put("llgrecs", tablesVO.get("value"));
				} else if ("llgpagewrites".equals(name)) {
					desc = "逻辑日志写入数";
					hashtable.put("llgpagewrites", tablesVO.get("value"));
				} else if ("llgwrites".equals(name)) {
					desc = "已写入的逻辑日志页数";
					hashtable.put("llgwrites", tablesVO.get("value"));
				} else if ("pagreads".equals(name)) {
					desc = "页读取数";
					hashtable.put("pagreads", tablesVO.get("value"));
				} else if ("pagwrites".equals(name)) {
					desc = "页写入数";
					hashtable.put("pagwrites", tablesVO.get("value"));
				} else if ("flushes".equals(name)) {
					desc = "缓冲池清仓数";
					hashtable.put("flushes", tablesVO.get("value"));
				} else if ("compress".equals(name)) {
					desc = "页压缩数";
					hashtable.put("compress", tablesVO.get("value"));
				} else if ("fgwrites".equals(name)) {
					desc = "前台写入数";
					hashtable.put("fgwrites", tablesVO.get("value"));
				} else if ("lruwrites".equals(name)) {
					desc = "最近最少使用（LRU）写入数";
					hashtable.put("lruwrites", tablesVO.get("value"));
				} else if ("chunkwrites".equals(name)) {
					desc = "检查点过程中的写入数";
					hashtable.put("chunkwrites", tablesVO.get("value"));
				} else if ("btradata".equals(name)) {
					desc = "通过索引叶节点读取的预先读取数据页数";
					hashtable.put("btradata", tablesVO.get("value"));
				} else if ("btraidx".equals(name)) {
					desc = "通过索引分支或根节点读取的预先读取数据页数";
					hashtable.put("btraidx", tablesVO.get("value"));
				} else if ("dpra".equals(name)) {
					desc = "以预选读取功能读入内容的数据页数";
					hashtable.put("dpra", tablesVO.get("value"));
				} else if ("rapgs_used".equals(name)) {
					desc = "用户已用的预先读取数据页数";
					hashtable.put("rapgs_used", tablesVO.get("value"));
				} else if ("seqscans".equals(name)) {
					desc = "顺序扫描数";
					hashtable.put("seqscans", tablesVO.get("value"));
				} else if ("totalsorts".equals(name)) {
					desc = "排序总数";
					hashtable.put("totalsorts", tablesVO.get("value"));
				} else if ("memsorts".equals(name)) {
					desc = "适合内存的排序数";
					hashtable.put("memsorts", tablesVO.get("value"));
				} else if ("disksorts".equals(name)) {
					desc = "不适合内存的排序数";
					hashtable.put("disksorts", tablesVO.get("value"));
				} else if ("maxsortspace".equals(name)) {
					desc = "排序所使用的最大磁盘空间";
					hashtable.put("maxsortspace", tablesVO.get("value"));
				}
			}
		}

		cell = new Cell(new Phrase("IO", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从磁盘的实际读取数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("dskreads"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从共享内存的读取数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("bufreads"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("向磁盘的实际写入数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("dskwrites"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("向共享内存的写入数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("bufwrites"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("调用", titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("调用总数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isamtot"),
				contextFont1));
		cell.setColspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("isopen", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isopens"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isstart", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isstarts"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isread", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isreads"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("iswirte", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("iswrites"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("isrewrite", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isrewrites"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isdelete", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isdeletes"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("iscommit", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("iscommits"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isrollback", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isrollbacks"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁存储器请求等待数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("latchwts"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲区等待数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("buffwts"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁请求数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lockreqs"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("锁等待数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lockwts"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("检查点等待数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("ckptwts"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("死锁数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("deadlks"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("死锁超时数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lktouts"),
				contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("检查点数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("numckpts"),
				contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("表空间", titleFont));
		cell.setRowspan(list.size() + 1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("库空间名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("已使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("利用率（%）", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// get dbspace message==================

		int row = 0;
		DecimalFormat df=new DecimalFormat("#.###");
		if (dbspaces != null && dbspaces.size() > 0) {
			for (int i = 0; i < dbspaces.size(); i++) {
				Hashtable tablesVO = (Hashtable) dbspaces.get(i);
				double all = 100.00;
				double show = all
						- Double.parseDouble(tablesVO.get("percent_free")
								.toString());
				String str = df.format(show) + "";
				String spacenameString = (String) tablesVO.get("dbspace");

				for (int j = 0; j < list.size(); j++) {
					Informixspaceconfig vo = (Informixspaceconfig) list.get(j);

					DBDao dbdao = new DBDao();
					// dbdao = new DBDao();
					List shareList = null;
					try {
						shareList = dbdao.getDbByTypeAndIpaddress(typevo
								.getId(), vo.getIpaddress());
					} catch (Exception e) {
					} finally {
						dbdao.close();
					}
					if (shareList == null || shareList.size() == 0)
						continue;
					DBVo dbvo = (DBVo) shareList.get(0);

					if (spacenameString.equals(vo.getSpacename())) {
						cell = new Cell(new Phrase(spacenameString,
								contextFont1));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase((String) tablesVO
								.get("pages_size"), contextFont1));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO
								.get("pages_used")+"")), contextFont1));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(str, contextFont1));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}

				}

			}
		}
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if ("0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}

	public void createReport_inforNewPDF(String filename)
			throws DocumentException, IOException {
		String hostname = (String) reportHash.get("dbname");
		String hostnamestr = (String) reportHash.get("dbnamestr");
		String ip = (String) reportHash.get("ip");
		String typename = (String) reportHash.get("typename");
		String Ping = (String) reportHash.get("Ping");
		String starttime = (String) reportHash.get("starttime");
		String totime = (String) reportHash.get("totime");
		Hashtable oramem = (Hashtable) reportHash.get("memvalue");
		Hashtable maxping = (Hashtable) reportHash.get("ping");
		SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
		String runstr = (String) reportHash.get("runstr");
		String[] sysItem1 = { "shared pool", "large pool", "buffer cache",
				"java pool" };
		String downnum = (String) reportHash.get("downnum");
		Hashtable dbinfo = new Hashtable();
		dbinfo = (Hashtable) reportHash.get("dbValue");
		ArrayList dbspaces = new ArrayList();
		dbspaces = (ArrayList) dbinfo.get("informixspaces");// 数据库空间信息
		DBTypeDao typedao = new DBTypeDao();
		DBTypeVo typevo = typedao.findByDbtype("informix");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont1 = new Font(bfChinese, 12, Font.NORMAL);
		Font contextFont2 = new Font(bfChinese, 11, Font.NORMAL);
		Font fontChinese = new Font(bfChinese, 12, Font.NORMAL, Color.black);
		Table aTable = new Table(8);
		float[] widths = { 220f, 220f, 220f, 110f, 110f, 110f, 110f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		Cell cell = null;

		cell = new Cell(new Phrase("\n" + "数据库" + hostname + "运行状况分析报告" + "\n",
				titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "日期" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(
				"\n" + "从" + starttime + "至" + totime + "\n", contextFont2));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "数据库名称" + "\n", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(hostnamestr));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));

		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(ip));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("类型", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(typename));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("当前状态", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase(runstr, contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("运行评价", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		String grade = (String) reportHash.get("grade");
		cell = new Cell(new Phrase(grade, contextFont1));
		cell.setColspan(3);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("配" + "\n" + "置" + "\n" + "信" + "\n" + "息",
				titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("内存", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总物理内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总数据高速缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("Metadata缓存(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储过程缓存大小(MB)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总逻辑内存大小(MB)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("数据缓存匹配度(%)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("存储缓存匹配度(%)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("系统", titleFont));
		cell.setRowspan(1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("服务器名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("版本", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// 写表空间

		InformixspaceconfigDao informixspaceconfigDao = new InformixspaceconfigDao();

		List list = null;
		try {
			list = informixspaceconfigDao.getByIp(ip, 1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			informixspaceconfigDao.close();
		}

		Cell cell5 = new Cell(new Phrase("参" + "\n" + "数" + "\n" + "指" + "\n"
				+ "标", titleFont));
		cell5.setRowspan(15 + list.size());
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell5);
		cell = new Cell(new Phrase("连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("平均连通率", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("avgpingcon")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("最小连通率", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) maxping.get("pingmax")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		// io
		ArrayList dbabout = new ArrayList();
		dbabout = (ArrayList) dbinfo.get("aboutlist");// 会话信息

		Hashtable hashtable = new Hashtable();
		if (dbabout != null && dbabout.size() > 0) {
			for (int i = 0; i < dbabout.size(); i++) {
				Hashtable tablesVO = (Hashtable) dbabout.get(i);
				String name = ((String) tablesVO.get("name")).trim();
				String desc = "";
				if ("dskreads".equals(name)) {
					desc = "从磁盘的实际读取数";
					hashtable.put("dskreads", tablesVO.get("value"));
				} else if ("bufreads".equals(name)) {
					desc = "从共享内存的读取数";
					hashtable.put("bufreads", tablesVO.get("value"));
				} else if ("dskwrites".equals(name)) {
					desc = "向磁盘的实际写入数";
					hashtable.put("dskwrites", tablesVO.get("value"));
				} else if ("bufwrites".equals(name)) {
					desc = "向共享内存的写入数";
					hashtable.put("bufwrites", tablesVO.get("value"));
				} else if ("isamtot".equals(name)) {
					desc = "调用总数";
					hashtable.put("isamtot", tablesVO.get("value"));
				} else if ("isopens".equals(name)) {
					desc = "isopen调用";
					hashtable.put("isopens", tablesVO.get("value"));
				} else if ("isstarts".equals(name)) {
					desc = "isstart调用";
					hashtable.put("isstarts", tablesVO.get("value"));
				} else if ("isreads".equals(name)) {
					desc = "isread调用";
					hashtable.put("isreads", tablesVO.get("value"));
				} else if ("iswrites".equals(name)) {
					desc = "iswirte调用";
					hashtable.put("iswrites", tablesVO.get("value"));
				} else if ("isrewrites".equals(name)) {
					desc = "isrewrite调用";
					hashtable.put("isrewrites", tablesVO.get("value"));
				} else if ("isdeletes".equals(name)) {
					desc = "isdelete调用";
					hashtable.put("isdeletes", tablesVO.get("value"));
				} else if ("iscommits".equals(name)) {
					desc = "iscommit调用";
					hashtable.put("iscommits", tablesVO.get("value"));
				} else if ("isrollbacks".equals(name)) {
					desc = "isrollback调用";
					hashtable.put("isrollbacks", tablesVO.get("value"));
				} else if ("ovlock".equals(name)) {
					desc = "溢出锁表";
					hashtable.put("ovlock", tablesVO.get("value"));
				} else if ("ovuser".equals(name)) {
					desc = "溢出用户表";
					hashtable.put("ovuser", tablesVO.get("value"));
				} else if ("ovtrans".equals(name)) {
					desc = "溢出事物表";
					hashtable.put("ovtrans", tablesVO.get("value"));
				} else if ("latchwts".equals(name)) {
					desc = "锁存储器请求等待数";
					hashtable.put("latchwts", tablesVO.get("value"));
				} else if ("buffwts".equals(name)) {
					desc = "缓冲区等待数";
					hashtable.put("buffwts", tablesVO.get("value"));
				} else if ("lockreqs".equals(name)) {
					desc = "锁请求数";
					hashtable.put("lockreqs", tablesVO.get("value"));
				} else if ("lockwts".equals(name)) {
					desc = "锁等待数";
					hashtable.put("lockwts", tablesVO.get("value"));
				} else if ("ckptwts".equals(name)) {
					desc = "检查点等待数";
					hashtable.put("ckptwts", tablesVO.get("value"));
				} else if ("deadlks".equals(name)) {
					desc = "死锁数";
					hashtable.put("deadlks", tablesVO.get("value"));
				} else if ("lktouts".equals(name)) {
					desc = "死锁超时数";
					hashtable.put("lktouts", tablesVO.get("value"));
				} else if ("numckpts".equals(name)) {
					desc = "检查点数";
					hashtable.put("numckpts", tablesVO.get("value"));
				} else if ("plgpagewrites".equals(name)) {
					desc = "已写入的物理日志页";
					hashtable.put("plgpagewrites", tablesVO.get("value"));
				} else if ("plgwrites".equals(name)) {
					desc = "物理日志写入数";
					hashtable.put("plgwrites", tablesVO.get("value"));
				} else if ("llgrecs".equals(name)) {
					desc = "逻辑日志记录数";
					hashtable.put("llgrecs", tablesVO.get("value"));
				} else if ("llgpagewrites".equals(name)) {
					desc = "逻辑日志写入数";
					hashtable.put("llgpagewrites", tablesVO.get("value"));
				} else if ("llgwrites".equals(name)) {
					desc = "已写入的逻辑日志页数";
					hashtable.put("llgwrites", tablesVO.get("value"));
				} else if ("pagreads".equals(name)) {
					desc = "页读取数";
					hashtable.put("pagreads", tablesVO.get("value"));
				} else if ("pagwrites".equals(name)) {
					desc = "页写入数";
					hashtable.put("pagwrites", tablesVO.get("value"));
				} else if ("flushes".equals(name)) {
					desc = "缓冲池清仓数";
					hashtable.put("flushes", tablesVO.get("value"));
				} else if ("compress".equals(name)) {
					desc = "页压缩数";
					hashtable.put("compress", tablesVO.get("value"));
				} else if ("fgwrites".equals(name)) {
					desc = "前台写入数";
					hashtable.put("fgwrites", tablesVO.get("value"));
				} else if ("lruwrites".equals(name)) {
					desc = "最近最少使用（LRU）写入数";
					hashtable.put("lruwrites", tablesVO.get("value"));
				} else if ("chunkwrites".equals(name)) {
					desc = "检查点过程中的写入数";
					hashtable.put("chunkwrites", tablesVO.get("value"));
				} else if ("btradata".equals(name)) {
					desc = "通过索引叶节点读取的预先读取数据页数";
					hashtable.put("btradata", tablesVO.get("value"));
				} else if ("btraidx".equals(name)) {
					desc = "通过索引分支或根节点读取的预先读取数据页数";
					hashtable.put("btraidx", tablesVO.get("value"));
				} else if ("dpra".equals(name)) {
					desc = "以预选读取功能读入内容的数据页数";
					hashtable.put("dpra", tablesVO.get("value"));
				} else if ("rapgs_used".equals(name)) {
					desc = "用户已用的预先读取数据页数";
					hashtable.put("rapgs_used", tablesVO.get("value"));
				} else if ("seqscans".equals(name)) {
					desc = "顺序扫描数";
					hashtable.put("seqscans", tablesVO.get("value"));
				} else if ("totalsorts".equals(name)) {
					desc = "排序总数";
					hashtable.put("totalsorts", tablesVO.get("value"));
				} else if ("memsorts".equals(name)) {
					desc = "适合内存的排序数";
					hashtable.put("memsorts", tablesVO.get("value"));
				} else if ("disksorts".equals(name)) {
					desc = "不适合内存的排序数";
					hashtable.put("disksorts", tablesVO.get("value"));
				} else if ("maxsortspace".equals(name)) {
					desc = "排序所使用的最大磁盘空间";
					hashtable.put("maxsortspace", tablesVO.get("value"));
				}
			}
		}

		cell = new Cell(new Phrase("IO", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从磁盘的实际读取数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("dskreads")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("从共享内存的读取数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("bufreads")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("向磁盘的实际写入数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("dskwrites")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("向共享内存的写入数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("bufwrites")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("输出数据速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("输入数据速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("写入磁盘速率(条/秒)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("读取磁盘速率(条/秒)", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("", contextFont1));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("调用", titleFont));
		cell.setRowspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("调用总数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isamtot"),
				contextFont1));
		cell.setColspan(5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("isopen"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isopens")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isstart"));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isstarts")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isread"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isreads")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("iswirte"));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("iswrites")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("isrewrite"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isrewrites")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isdelete"));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isdeletes")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("iscommit"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("iscommits")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("isrollback"));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("isrollbacks")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁", titleFont));
		cell.setRowspan(4);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁存储器请求等待数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("latchwts")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("缓冲区等待数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("buffwts")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("锁请求数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lockreqs")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("锁等待数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lockwts")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("检查点等待数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("ckptwts")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("死锁数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("deadlks")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("死锁超时数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("lktouts")));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("检查点数", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase((String) hashtable.get("numckpts")));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("表空间", titleFont));
		cell.setRowspan(list.size() + 1);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase("库空间名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("总大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("已使用大小（MB）", titleFont));
		cell.setColspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("利用率（%）", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		// get dbspace message==================

		int row = 0;
		DecimalFormat df=new DecimalFormat("#.###");
		if (dbspaces != null && dbspaces.size() > 0) {
			for (int i = 0; i < dbspaces.size(); i++) {
				Hashtable tablesVO = (Hashtable) dbspaces.get(i);
				double all = 100.00;
				double show = all
						- Double.parseDouble(tablesVO.get("percent_free")
								.toString());
				String str = df.format(show) + "";
				String spacenameString = (String) tablesVO.get("dbspace");

				for (int j = 0; j < list.size(); j++) {
					Informixspaceconfig vo = (Informixspaceconfig) list.get(j);

					DBDao dbdao = new DBDao();
					// dbdao = new DBDao();
					List shareList = null;
					try {
						shareList = dbdao.getDbByTypeAndIpaddress(typevo
								.getId(), vo.getIpaddress());
					} catch (Exception e) {
					} finally {
						dbdao.close();
					}
					if (shareList == null || shareList.size() == 0)
						continue;
					DBVo dbvo = (DBVo) shareList.get(0);

					if (spacenameString.equals(vo.getSpacename())) {
						cell = new Cell(new Phrase(spacenameString));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase((String) tablesVO
								.get("pages_size")));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO
								.get("pages_used")+""))));
						cell.setColspan(2);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
						cell = new Cell(new Phrase(str));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable.addCell(cell);
					}

				}

			}
		}
		String count = (String) reportHash.get("count");
		cell = new Cell(new Phrase("事" + "\n" + "件" + "\n" + "汇" + "\n" + "总",
				titleFont));
		cell.setRowspan(2);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "发生连通率事件" + downnum + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "库空间超过阀值事件" + count + "次" + "\n",
				contextFont1));
		cell.setColspan(7);
		aTable.addCell(cell);
		cell = new Cell(new Phrase("\n" + "业务运行状况分析" + "\n", titleFont));
		cell.setColspan(8);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		String pinglog = "";
		if ("0".equals(downnum)) {
			pinglog = "   " + "2    在该段时间内，数据库连接正常。";
		} else {
			pinglog = "   " + "2    在该段时间内，发生" + downnum
					+ "次连通率事件，请管理员注意设备连接状况。";
		}
		String spacelog = "";
		if ("0".equals(count)) {
			spacelog = "   " + "3    在该段时间内，设备发生" + count
					+ "次库空间超越阀值事件，需要管理员查看相关的告警信息并扩" + "    充表空间。";
		} else {
			spacelog = "   " + "3    在该段时间内，未发生表空间超越阀值事件，库空间使用较稳定。";
		}
		cell = new Cell(new Phrase("   1	   在该段时间内，数据库运行状况稳定。" + "\n" + "\n"
				+ pinglog + "\n" + "\n" + spacelog + "\n" + "\n" + "\n" + "\n"
				+ "\n" + "\n", contextFont1));
		cell.setColspan(8);
		aTable.addCell(cell);
		document.add(aTable);
		document.close();

	}
	
	// zhushouzhi-------------------------------------
	public void createReport_faworklist(String filename,User user) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {

			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));
			WritableSheet sheet = wb.createSheet("指标全局阀值一览表", 0);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.WHITE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.WHITE);
			Label tmpLabel = null;
			// List moidlist = (List)reportHash.get("list");

			
			//User current_user = (User)session.getAttribute(SessionConstant.CURRENT_USER);
			   StringBuffer s = new StringBuffer();
			   int _flag = 0;
			   String businessid = user.getBusinessids();
				if (businessid != null){
					if(businessid !="-1"){
						String[] bids = businessid.split(",");
						if(bids.length>0){
							for(int i=0;i<bids.length;i++){
								if(bids[i].trim().length()>0){
									if(_flag==0){
										s.append(" and ( bid like '%,"+bids[i].trim()+",%' ");
										_flag = 1;
									}else{
										//flag = 1;
										s.append(" or bid like '%,"+bids[i].trim()+",%' ");
									}
								}
							}
							s.append(") ") ;
						}
						
					}	
				}
			
			NodeMonitorDao nmdao = new NodeMonitorDao();
			List moidlist = new ArrayList();
			try{
				moidlist = nmdao.loadByBID(user.getBusinessids());
			}catch(Exception e){
				
			}finally{
				nmdao.close();
			}
			
			tmpLabel = new Label(4, 0, "指标全局阀值一览表", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "序号", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 1, "IP", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 1, "指标名称", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 1, "监视", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 1, "一级阀值(普通)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 1, "次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 1, "告警", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 1, "二级阀值(严重)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 1, "次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 1, "告警", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, 1, "三级阀值(紧急)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(11, 1, "次数", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(12, 1, "告警", _labelFormat);
			sheet.addCell(tmpLabel);
			if (moidlist != null) {
				for (int i = 0; i < moidlist.size(); i++) {
					NodeMonitor nm = (NodeMonitor) moidlist.get(i);
					HostNode vo = new HostNode();
					HostNodeDao dao = new HostNodeDao();
					try{
						vo = dao.loadHost(nm.getNodeID());
					}catch(Exception e){
						
					}finally{
						dao.close();
					}
					String enable = "是";
					if (!nm.isEnabled())
						enable = "否";
					if (vo == null)
						continue;
					
					String sms0 = "是";
					if (nm.getSms0() == 0)
						sms0 = "否";
					String sms1 = "是";
					if (nm.getSms1() == 0)
						sms1 = "否";
					String sms2 = "是";
					if (nm.getSms2() == 0)
						sms2 = "否";
					tmpLabel = new Label(0, 2 + i, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, 2 + i, vo.getAlias() + "("
							+ nm.getIp() + ")", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, 2 + i, nm.getDescr(), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, 2 + i, enable, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, 2 + i, nm.getLimenvalue0()
							+ nm.getUnit(), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, 2 + i, nm.getTime0() + "",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, 2 + i, sms0, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, 2 + i, nm.getLimenvalue1()
							+ nm.getUnit(), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, 2 + i, nm.getTime1() + "",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, 2 + i, sms1, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(10, 2 + i, nm.getLimenvalue2()
							+ nm.getUnit(), p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(11, 2 + i, nm.getTime1() + "",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(12, 2 + i, sms2, p_labelFormat);
					sheet.addCell(tmpLabel);

				}
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}

	public void createReport_faworklistdoc(String filename,User user)
			throws DocumentException, IOException {
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		RtfWriter2.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
				BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Paragraph title = new Paragraph("指标全局阀值一览表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		// document.add(new Paragraph("\n"));
		Table aTable = new Table(13);
		float[] widths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
				220f, 220f, 220f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidth(100); // 占页面宽度 90%
		aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
		aTable.setAutoFillEmptyCells(true); // 自动填满
		aTable.setBorderWidth(1); // 边框宽度
		aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
		aTable.setPadding(2);// 衬距，看效果就知道什么意思了
		aTable.setSpacing(0);// 即单元格之间的间距
		aTable.setBorder(2);// 边框
		aTable.endHeaders();
		Cell cell = null;
		NodeMonitorDao nmdao = new NodeMonitorDao();
		List moidlist = new ArrayList();
		try{
			moidlist = nmdao.loadByBID(user.getBusinessids());
		}catch(Exception e){
			
		}finally{
			nmdao.close();
		}
		
		cell = new Cell(new Phrase("序号", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("指标名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("监视", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("一级阀值(普通)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("二级阀值(严重)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("三级阀值(紧急)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new Cell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (moidlist != null) {
			for (int i = 0; i < moidlist.size(); i++) {
				NodeMonitor nm = (NodeMonitor) moidlist.get(i);
				HostNode vo = new HostNode();
				HostNodeDao dao = new HostNodeDao();
				try{
					vo = dao.loadHost(nm.getNodeID());
				}catch(Exception e){
					
				}finally{
					dao.close();
				}
				String enable = "是";
				if (!nm.isEnabled())
					enable = "否";
				if (vo == null)
					continue;
				
				String sms0 = "是";
				if (nm.getSms0() == 0)
					sms0 = "否";
				String sms1 = "是";
				if (nm.getSms1() == 0)
					sms1 = "否";
				String sms2 = "是";
				if (nm.getSms2() == 0)
					sms2 = "否";
				cell = new Cell(new Phrase(i + 1 + "", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(vo.getAlias() + "(" + nm.getIp()
						+ ")", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getDescr(), titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(enable, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getLimenvalue0() + nm.getUnit(),
						titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getTime0() + "", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(sms0, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getLimenvalue1() + nm.getUnit(),
						titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getTime1() + "", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(sms1, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getLimenvalue2() + nm.getUnit(),
						titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(nm.getTime1() + "", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new Cell(new Phrase(sms2, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

			}
		}
		document.add(aTable);
		document.close();
	}// end db2 report doc

	public void createReport_faworklistpdf(String filename,User user)
			throws DocumentException, IOException {
		// 设置纸张大小
		Document document = new Document(PageSize.A4);
		// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
		PdfWriter.getInstance(document, new FileOutputStream(filename));
		document.open();
		// 设置中文字体
		BaseFont bfChinese = BaseFont.createFont("STSong-Light",
				"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
		// 标题字体风格
		Font titleFont = new Font(bfChinese, 12, Font.BOLD);
		// 正文字体风格
		Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

		Paragraph title = new Paragraph("指标全局阀值一览表", titleFont);
		// 设置标题格式对齐方式
		title.setAlignment(Element.ALIGN_CENTER);
		// title.setFont(titleFont);
		document.add(title);
		document.add(new Paragraph("\n"));
		// document.add(new Paragraph("\n"));
		PdfPTable aTable = new PdfPTable(13);
		float[] widths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
				220f, 220f, 220f, 220f, 220f };
		aTable.setWidths(widths);
		aTable.setWidthPercentage(100);
		PdfPCell cell = null;
		NodeMonitorDao nmdao = new NodeMonitorDao();
		List moidlist = new ArrayList();
		try{
			moidlist = nmdao.loadByBID(user.getBusinessids());
		}catch(Exception e){
			
		}finally{
			nmdao.close();
		}
		
		cell = new PdfPCell(new Phrase("序号", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("IP", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("指标名称", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("监视", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("一级阀值(普通)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("二级阀值(严重)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("三级阀值(紧急)", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("次数", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		cell = new PdfPCell(new Phrase("告警", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);
		if (moidlist != null) {
			for (int i = 0; i < moidlist.size(); i++) {
				NodeMonitor nm = (NodeMonitor) moidlist.get(i);
				HostNode vo = new HostNode();
				HostNodeDao dao = new HostNodeDao();
				try{
					vo = dao.loadHost(nm.getNodeID());
				}catch(Exception e){
					
				}finally{
					dao.close();
				}
				String enable = "是";
				if (!nm.isEnabled())
					enable = "否";
				if (vo == null)
					continue;
				
				String sms0 = "是";
				if (nm.getSms0() == 0)
					sms0 = "否";
				String sms1 = "是";
				if (nm.getSms1() == 0)
					sms1 = "否";
				String sms2 = "是";
				if (nm.getSms2() == 0)
					sms2 = "否";
				cell = new PdfPCell(new Phrase(i + 1 + ""));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(vo.getAlias() + "(" + nm.getIp()
						+ ")"));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getDescr(), titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(enable, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getLimenvalue0() + nm.getUnit()));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getTime0() + ""));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(sms0, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getLimenvalue1() + nm.getUnit()));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getTime1() + ""));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(sms1, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getLimenvalue2() + nm.getUnit()));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(nm.getTime1() + ""));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

				cell = new PdfPCell(new Phrase(sms2, titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);

			}
		}
		document.add(aTable);
		document.close();
	}// end db2 report doc
	
	public void createReport_faworklistsearchpdf(String filename)
	throws DocumentException, IOException {
// 设置纸张大小
Document document = new Document(PageSize.A4);
// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
PdfWriter.getInstance(document, new FileOutputStream(filename));
document.open();
// 设置中文字体
BaseFont bfChinese = BaseFont.createFont("STSong-Light",
		"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
// 标题字体风格
Font titleFont = new Font(bfChinese, 12, Font.BOLD);
// 正文字体风格
Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

Paragraph title = new Paragraph("指标全局阀值一览表", titleFont);
// 设置标题格式对齐方式
title.setAlignment(Element.ALIGN_CENTER);
// title.setFont(titleFont);
document.add(title);
document.add(new Paragraph("\n"));
List moidlist = (List) reportHash.get("list");
// document.add(new Paragraph("\n"));
PdfPTable aTable = new PdfPTable(13);
float[] widths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
		220f, 220f, 220f, 220f, 220f };
aTable.setWidths(widths);
aTable.setWidthPercentage(100);
PdfPCell cell = null;

cell = new PdfPCell(new Phrase("序号", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("IP", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("指标名称", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("监视", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("一级阀值(普通)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("二级阀值(严重)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("三级阀值(紧急)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new PdfPCell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
if (moidlist != null) {
	for (int i = 0; i < moidlist.size(); i++) {
		NodeMonitor nm = (NodeMonitor) moidlist.get(i);
		HostNode vo = new HostNode();
		HostNodeDao dao = new HostNodeDao();
		vo = dao.loadHost(nm.getNodeID());
		String enable = "是";
		if (!nm.isEnabled())
			enable = "否";
		if (vo == null)
			continue;
		dao.close();
		String sms0 = "是";
		if (nm.getSms0() == 0)
			sms0 = "否";
		String sms1 = "是";
		if (nm.getSms1() == 0)
			sms1 = "否";
		String sms2 = "是";
		if (nm.getSms2() == 0)
			sms2 = "否";
		cell = new PdfPCell(new Phrase(i + 1 + ""));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(vo.getAlias() + "(" + nm.getIp()
				+ ")"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getDescr(), titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(enable, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getLimenvalue0()
				+ nm.getUnit()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getTime0() + ""));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(sms0, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getLimenvalue1()
				+ nm.getUnit()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getTime1() + ""));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(sms1, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getLimenvalue2()
				+ nm.getUnit()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(nm.getTime1() + ""));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new PdfPCell(new Phrase(sms2, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

	}
}
document.add(aTable);
document.close();
}// end db2 report doc

public void createReport_faworklistsearchdoc(String filename)
	throws DocumentException, IOException {
// 设置纸张大小
Document document = new Document(PageSize.A4);
// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
RtfWriter2.getInstance(document, new FileOutputStream(filename));
document.open();
// 设置中文字体
BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
		BaseFont.NOT_EMBEDDED);
// 标题字体风格
Font titleFont = new Font(bfChinese, 12, Font.BOLD);
// 正文字体风格
Font contextFont = new Font(bfChinese, 12, Font.NORMAL);

Paragraph title = new Paragraph("指标全局阀值一览表", titleFont);
// 设置标题格式对齐方式
title.setAlignment(Element.ALIGN_CENTER);
// title.setFont(titleFont);
document.add(title);
// document.add(new Paragraph("\n"));
Table aTable = new Table(13);
float[] widths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f,
		220f, 220f, 220f, 220f, 220f };
aTable.setWidths(widths);
aTable.setWidth(100); // 占页面宽度 90%
aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
aTable.setAutoFillEmptyCells(true); // 自动填满
aTable.setBorderWidth(1); // 边框宽度
aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
aTable.setPadding(2);// 衬距，看效果就知道什么意思了
aTable.setSpacing(0);// 即单元格之间的间距
aTable.setBorder(2);// 边框
aTable.endHeaders();
Cell cell = null;
List moidlist = (List) reportHash.get("list");
cell = new Cell(new Phrase("序号", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("IP", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("指标名称", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("监视", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("一级阀值(普通)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("二级阀值(严重)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("三级阀值(紧急)", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("次数", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
cell = new Cell(new Phrase("告警", titleFont));
cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
aTable.addCell(cell);
if (moidlist != null) {
	for (int i = 0; i < moidlist.size(); i++) {
		NodeMonitor nm = (NodeMonitor) moidlist.get(i);
		HostNode vo = new HostNode();
		HostNodeDao dao = new HostNodeDao();
		vo = dao.loadHost(nm.getNodeID());
		String enable = "是";
		if (!nm.isEnabled())
			enable = "否";
		if (vo == null)
			continue;
		dao.close();
		String sms0 = "是";
		if (nm.getSms0() == 0)
			sms0 = "否";
		String sms1 = "是";
		if (nm.getSms1() == 0)
			sms1 = "否";
		String sms2 = "是";
		if (nm.getSms2() == 0)
			sms2 = "否";
		cell = new Cell(new Phrase(i + 1 + "", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(vo.getAlias() + "(" + nm.getIp()
				+ ")", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getDescr(), titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(enable, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getLimenvalue0() + nm.getUnit(),
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getTime0() + "", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sms0, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getLimenvalue1() + nm.getUnit(),
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getTime1() + "", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sms1, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getLimenvalue2() + nm.getUnit(),
				titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(nm.getTime1() + "", titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

		cell = new Cell(new Phrase(sms2, titleFont));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
		aTable.addCell(cell);

	}
}
document.add(aTable);
document.close();
}// end db2 report doc

// zhushouzhi-------------------------------------
public void createReport_faworklistsearch(String filename) {
if (impReport.getTable() == null) {
	fileName = null;
	return;
}
WritableWorkbook wb = null;
try {

	fileName = ResourceCenter.getInstance().getSysPath() + filename;
	wb = Workbook.createWorkbook(new File(fileName));
	WritableSheet sheet = wb.createSheet("指标全局阀值一览表", 0);
	WritableFont labelFont = new WritableFont(WritableFont
			.createFont("宋体"), 12, WritableFont.BOLD, false);
	WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

	WritableCellFormat _labelFormat = new WritableCellFormat();
	_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

	WritableCellFormat p_labelFormat = new WritableCellFormat();
	p_labelFormat.setBackground(jxl.format.Colour.WHITE);

	WritableCellFormat b_labelFormat = new WritableCellFormat();
	b_labelFormat.setBackground(jxl.format.Colour.WHITE);
	Label tmpLabel = null;
	// List moidlist = (List)reportHash.get("list");

	/*
	 * DaoInterface nmdao = new NodeMonitorDao(); List moidlist =
	 * nmdao.loadAll(); nmdao.close();
	 */
	List moidlist = (List) reportHash.get("list");
	tmpLabel = new Label(4, 0, "指标全局阀值一览表", b_labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(0, 1, "序号", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(1, 1, "IP", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(2, 1, "指标名称", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(3, 1, "监视", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(4, 1, "一级阀值(普通)", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(5, 1, "次数", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(6, 1, "告警", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(7, 1, "二级阀值(严重)", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(8, 1, "次数", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(9, 1, "告警", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(10, 1, "三级阀值(紧急)", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(11, 1, "次数", _labelFormat);
	sheet.addCell(tmpLabel);
	tmpLabel = new Label(12, 1, "告警", _labelFormat);
	sheet.addCell(tmpLabel);
	if (moidlist != null) {
		for (int i = 0; i < moidlist.size(); i++) {
			NodeMonitor nm = (NodeMonitor) moidlist.get(i);
			HostNode vo = new HostNode();
			HostNodeDao dao = new HostNodeDao();
			vo = dao.loadHost(nm.getNodeID());
			String enable = "是";
			if (!nm.isEnabled())
				enable = "否";
			if (vo == null)
				continue;
			dao.close();
			String sms0 = "是";
			if (nm.getSms0() == 0)
				sms0 = "否";
			String sms1 = "是";
			if (nm.getSms1() == 0)
				sms1 = "否";
			String sms2 = "是";
			if (nm.getSms2() == 0)
				sms2 = "否";
			tmpLabel = new Label(0, 2 + i, i + 1 + "", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 2 + i, vo.getAlias() + "("
					+ nm.getIp() + ")", p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 2 + i, nm.getDescr(), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 2 + i, enable, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 2 + i, nm.getLimenvalue0()
					+ nm.getUnit(), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, 2 + i, nm.getTime0() + "",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, 2 + i, sms0, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, 2 + i, nm.getLimenvalue1()
					+ nm.getUnit(), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, 2 + i, nm.getTime1() + "",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, 2 + i, sms1, p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(10, 2 + i, nm.getLimenvalue2()
					+ nm.getUnit(), p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(11, 2 + i, nm.getTime1() + "",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(12, 2 + i, sms2, p_labelFormat);
			sheet.addCell(tmpLabel);

		}
	}
	wb.write();
} catch (Exception e) {
	// SysLogger.error("Error in ExcelReport.createReport()",e);
	e.printStackTrace();
} finally {
	try {
		if (wb != null)
			wb.close();
	} catch (Exception e) {
	}
}
}

	
	/**
	 * @author HONGLI 打印sqlserver综合性能word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SqlServerCldDoc(String filename) throws
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				RtfWriter2.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
						BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
			
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				Table dbTable = new Table(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidth(100); // 占页面宽度 90%
				dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbTable.setAutoFillEmptyCells(true); // 自动填满
				dbTable.setBorderWidth(1); // 边框宽度
				dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbTable.setSpacing(0);// 即单元格之间的间距
				dbTable.setBorder(2);// 边框
				dbTable.endHeaders();
				
				Cell dbCell = null;
				dbCell = new Cell(new Phrase("数据库信息",
						titleFont));
				dbCell.setColspan(5);
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("数据库名称", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("IP", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("类型", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("当前状态", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("运行评价", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(ip,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(typename,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(runstr,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(grade,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				
				
				Table aTable = new Table(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidth(100); // 占页面宽度 90%
				aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable.setAutoFillEmptyCells(true); // 自动填满
				aTable.setBorderWidth(1); // 边框宽度
				aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable.setSpacing(0);// 即单元格之间的间距
				aTable.setBorder(2);// 边框
				aTable.endHeaders();
				Cell cell = null;
				cell = new Cell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingnow+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingmin+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingconavg+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				// 设置图片
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
				img.setAbsolutePosition(0, 0);
				img.setAlignment(Image.LEFT);// 设置图片显示位置
				document.add(dbTable);
				document.add(aTable);
				document.add(img);
				document.add(new Paragraph("\n"));
				
				
				//添加数据库信息表  缓冲区命中率等
				Table dbInfoTable = new Table(5);
				float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f};
				dbInfoTable.setWidths(dbInfoWidths);
				dbInfoTable.setWidth(100); // 占页面宽度 90%
				dbInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbInfoTable.setAutoFillEmptyCells(true); // 自动填满
				dbInfoTable.setBorderWidth(1); // 边框宽度
				dbInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbInfoTable.setSpacing(0);// 即单元格之间的间距
				dbInfoTable.setBorder(2);// 边框
				Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
				cell = new Cell(new Phrase("内存(KB)",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				
				cell = new Cell(new Phrase("内存总数", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("内存优化", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("连接内存", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("SQL缓冲池", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("锁定内存", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)mems.get("totalMemory"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)mems.get("optMemory"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)mems.get("conMemory"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)mems.get("sqlMem"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)mems.get("lockMem"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				document.add(dbInfoTable);
				
				//系统信息
				Table sysInfoTable = new Table(4);
				float[] sysInfoWidths = { 220f, 220f, 220f, 220f};
				dbInfoTable.setWidths(dbInfoWidths);
				sysInfoTable.setWidth(100); // 占页面宽度 90%
				sysInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				sysInfoTable.setAutoFillEmptyCells(true); // 自动填满
				sysInfoTable.setBorderWidth(1); // 边框宽度
				sysInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				sysInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				sysInfoTable.setSpacing(0);// 即单元格之间的间距
				sysInfoTable.setBorder(2);// 边框
				Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
				cell = new Cell(new Phrase("系统(KB)",
						titleFont));
				cell.setColspan(4);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				
				cell = new Cell(new Phrase("补丁包", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("集成安全性模式", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("单用户模式", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase(" 在故障转移群集中配置服务器实例 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)sysValue.get("productlevel"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)sysValue.get("IsIntegratedSecurityOnly"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)sysValue.get("IsSingleUser"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase((String)sysValue.get("IsClustered"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				document.add(sysInfoTable);
				
				Table aTable1 = new Table(6);
				float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
				aTable1.setWidths(width);
				aTable1.setWidth(100); // 占页面宽度 90%
				aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable1.setAutoFillEmptyCells(true); // 自动填满
				aTable1.setBorderWidth(1); // 边框宽度
				aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable1.setSpacing(0);// 即单元格之间的间距
				aTable1.setBorder(2);// 边框
				cell = new Cell(new Phrase("参数指标",
						titleFont));
				cell.setColspan(6);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("库信息", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("序号", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("数据库", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("总大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("使用大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("利用率(%)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				// aTable1.endHeaders();

				// 数据库信息
				Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
				Hashtable alldatabase = new Hashtable();
				if (dbValue.get("database") != null)
					alldatabase = (Hashtable) dbValue.get("database");
				Vector names = new Vector();
				if (dbValue.get("names") != null)
					names = (Vector) dbValue.get("names");

				if (alldatabase != null && alldatabase.size() > 0) {
					if (names == null)
						names = new Vector();
					int row = 1;
					for (int i = 0; i < names.size(); i++) {
						String key = (String) names.get(i);
						if (alldatabase.get(key) == null)
							continue;
						Hashtable data = (Hashtable) alldatabase.get(key);
						String dbname = data.get("dbname").toString();
						String size = data.get("size").toString();
						String usedsize = "";
						if (data.get("usedsize") != null) {
							usedsize = data.get("usedsize").toString();
						}
						String usedperc = "";
						if (data.get("usedperc") != null)
							usedperc = data.get("usedperc").toString();
						cell = new Cell(new Phrase(""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(row + "", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(dbname, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(size, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(usedsize, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(usedperc, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						row++;

					}
				}

				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

					document.add(img1);
				}

				document.add(aTable1);
				
				
				//事 件 汇 报 
				Table evenInfoTable = new Table(2);
				float[] evenInfoWidths = { 220f, 220f};
				evenInfoTable.setWidths(evenInfoWidths);
				evenInfoTable.setWidth(100); // 占页面宽度 90%
				evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
				evenInfoTable.setBorderWidth(1); // 边框宽度
				evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				evenInfoTable.setSpacing(0);// 即单元格之间的间距
				evenInfoTable.setBorder(2);// 边框
				String downnum = (String)reportHash.get("downnum");
				String count = (Integer)reportHash.get("count")+"";
				cell = new Cell(new Phrase("事件汇报",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(downnum, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(count, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				document.add(evenInfoTable);
				
				//添加事件列表
				addEventListToDoc(document, titleFont, contextFont);
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
	}
	
	/**
	 * @author HONGLI 打印sqlserver综合性能pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SqlServerCldPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			PdfPTable dbTable = new PdfPTable(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidthPercentage(100);
			PdfPCell dbCell = null;
			dbCell = new PdfPCell(new Phrase("数据库信息",
					titleFont));
			dbCell.setColspan(5);
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("数据库名称", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("IP", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("类型", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("当前状态", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("运行评价", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(ip,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(typename,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(runstr,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(grade,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			
			
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率信息",
					titleFont));
			cell.setColspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingnow+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingmin+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingconavg+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
//			img.setAbsolutePosition(0, 0);
			img.scalePercent(76);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(dbTable);
			document.add(new Paragraph("\n"));
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			
			
			//添加内存(KB)
			PdfPTable dbInfoTable = new PdfPTable(5);
			float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f};
			dbInfoTable.setWidths(dbInfoWidths);
			dbInfoTable.setWidthPercentage(100);
			Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
			cell = new PdfPCell(new Phrase("内存(KB)",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("内存总数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("内存优化", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("连接内存", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("SQL缓冲池", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("锁定内存", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)mems.get("totalMemory"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)mems.get("optMemory"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)mems.get("conMemory"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)mems.get("sqlMem"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)mems.get("lockMem"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbInfoTable.addCell(cell);
			document.add(dbInfoTable);
			document.add(new Paragraph("\n"));
			
			//添加系统(KB)信息等
			PdfPTable ncTable = new PdfPTable(4);
			float[] ncWidths = { 220f, 220f, 220f, 220f };
			ncTable.setWidths(ncWidths);
			ncTable.setWidthPercentage(100);
			Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
			cell = new PdfPCell(new Phrase("系统",
					titleFont));
			cell.setColspan(4);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase("补丁包", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase("集成安全性模式", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase("单用户模式", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase("在故障转移群集中配置服务器实例", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)sysValue.get("productlevel"), titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)sysValue.get("IsIntegratedSecurityOnly"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)sysValue.get("IsSingleUser"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)sysValue.get("IsClustered"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ncTable.addCell(cell);
			document.add(ncTable);
			document.add(new Paragraph("\n"));
			
			PdfPTable aTable1 = new PdfPTable(6);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("参数指标",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("库信息", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("总大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("使用大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();

			// 数据库信息
			Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
			Hashtable alldatabase = new Hashtable();
			if (dbValue.get("database") != null)
				alldatabase = (Hashtable) dbValue.get("database");
			Vector names = new Vector();
			if (dbValue.get("names") != null)
				names = (Vector) dbValue.get("names");

			if (alldatabase != null && alldatabase.size() > 0) {
				if (names == null)
					names = new Vector();
				int row = 1;
				for (int i = 0; i < names.size(); i++) {
					String key = (String) names.get(i);
					if (alldatabase.get(key) == null)
						continue;
					Hashtable data = (Hashtable) alldatabase.get(key);
					String dbname = data.get("dbname").toString();
					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();
					cell = new PdfPCell(new Phrase(""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(row + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(dbname));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(size));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usedsize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usedperc));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					row++;

				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(aTable1);
			document.add(new Paragraph("\n"));
			
//			添加事件汇报信息等
			PdfPTable eventTable = new PdfPTable(2);
			float[] eventWidths = { 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			document.add(eventTable);
			
			document.add(new Paragraph("\n"));
			//添加事件列表
			addEventLisToPdf(document);
			
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 打印sqlserver综合报表excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SqlServerCldXls(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			wb = Workbook.createWorkbook(new File(filename)); 

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
			Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//系统信息
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			
			//数据库ip信息
			tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "类型", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5, vo.getDbName(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, ip,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, typename,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, runstr,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, grade,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			
			
			
			//连通率
			tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 8, pingnow+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 8, pingmin+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 8, pingconavg+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 9, 7, 7, file));
			// allRow = allRow+7;
			
//			数据库信息
			tmpLabel = new Label(0, 16, "内存总数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 16, "内存优化", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 16, "连接内存", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 16, "SQL缓冲池", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 16, "锁定内存", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 17, (String)mems.get("totalMemory"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 17, (String)mems.get("optMemory"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 17, (String)mems.get("conMemory"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 17, (String)mems.get("sqlMem"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 17, (String)mems.get("lockMem"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			

			
//			系统信息等
			tmpLabel = new Label(0, 19,"补丁包", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 19,"集成安全性模式", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 19,"单用户模式", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 19,"在故障转移群集中配置服务器实例", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 20, (String)sysValue.get("productlevel"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 20, (String)sysValue.get("IsIntegratedSecurityOnly"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 20, (String)sysValue.get("IsSingleUser"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 20, (String)sysValue.get("IsClustered"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//参数指标信息
			tmpLabel = new Label(0, 22, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 22, "数据库", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 22, "总大小(MB)", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 22, "使用大小(MB)", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 22, "利用率(%)", b_labelFormat);
			sheet.addCell(tmpLabel);
			
			int row = 22;
			// 数据库信息
			Hashtable dbValue = (Hashtable) reportHash.get("tableinfo_v");
			Hashtable alldatabase = new Hashtable();
			if (dbValue.get("database") != null)
				alldatabase = (Hashtable) dbValue.get("database");
			Vector names = new Vector();
			if (dbValue.get("names") != null)
				names = (Vector) dbValue.get("names");

			if (alldatabase != null && alldatabase.size() > 0) {
				if (names == null)
					names = new Vector();
				for (int i = 0; i < names.size(); i++) {
					String key = (String) names.get(i);
					if (alldatabase.get(key) == null)
						continue;
					Hashtable data = (Hashtable) alldatabase.get(key);
					String dbname = data.get("dbname").toString();
					String size = data.get("size").toString();
					String usedsize = "";
					if (data.get("usedsize") != null) {
						usedsize = data.get("usedsize").toString();
					}
					String usedperc = "";
					if (data.get("usedperc") != null)
						usedperc = data.get("usedperc").toString();
					row = row + 1;
					tmpLabel = new Label(0, row, i + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, dbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, size, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, usedsize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, usedperc, p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			//事 件 汇 报 
			row = row+2;
			tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, reportHash.get("count")+"",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//增加事件列表
			addEventListToExcel(sheet, row);

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	
	/**
	 * @author HONGLI   
	 * DB2性能 doc格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportDB2SelfDoc(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
		
			document.add(aTable);
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			document.add(img);
		
			document.add(new Paragraph("\n"));
			Table aTable1 = new Table(5);
			float[] width = { 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框
		
			
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空间大小(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲大小(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new Cell(new Phrase("空闲比例(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
			// 数据库信息
			Hashtable spaceInfo = (Hashtable) reportHash.get("spaceInfo");
			if (spaceInfo.get("toolsdb") != null){
				List toolsdb = (ArrayList) spaceInfo.get("toolsdb");//得到所有数据表
				if(toolsdb!=null && toolsdb.size()>0){
					for (int i = 0; i < toolsdb.size(); i++) {
							Hashtable tempSpace = (Hashtable)toolsdb.get(i);
							String SYSCATSPACE = tempSpace.get("tablespace_name")+"";
							String totalspac = tempSpace.get("totalspac")+"";
							String usablespac = tempSpace.get("usablespac")+"";
							String usableper = (String)tempSpace.get("usableper");
							
							if(usableper == null || usableper.trim().equals("")){
								usableper = "0";
							}
						cell = new Cell(new Phrase((i+1) + "", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(SYSCATSPACE, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(totalspac, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(usablespac, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(usableper, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
			
					}
				}
			
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
			
					document.add(img1);
				}
			}
		
			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI   
	 * DB2性能 xls格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportDB2SelfExcel(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");

			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;

			tmpLabel = new Label(0, 14, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 14, "表空间", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 14, "空间大小(MB)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 14, "空闲大小(MB)", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 14, "空闲比例(%)", _labelFormat);
			sheet.addCell(tmpLabel);
			int row = 14;
			
//			 数据库信息
			Hashtable spaceInfo = (Hashtable) reportHash.get("spaceInfo");
			if (spaceInfo.get("toolsdb") != null){
				List toolsdb = (ArrayList) spaceInfo.get("toolsdb");//得到所有数据表
				if(toolsdb!=null && toolsdb.size()>0){
					for (int i = 0; i < toolsdb.size(); i++) {
							Hashtable tempSpace = (Hashtable)toolsdb.get(i);
							String SYSCATSPACE = tempSpace.get("tablespace_name")+"";
							String totalspac = tempSpace.get("totalspac")+"";
							String usablespac = tempSpace.get("usablespac")+"";
							String usableper = (String)tempSpace.get("usableper");
							
							if(usableper == null || usableper.trim().equals("")){
								usableper = "0";
							}
					row = row + 1;
					tmpLabel = new Label(0, row, i + 1 + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, SYSCATSPACE, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, totalspac, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, usablespac, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, usableper, p_labelFormat);
					sheet.addCell(tmpLabel);
				}
			}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * @author HONGLI   
	 * DB2性能 pdf格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportDB2SelfPdf(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
		
			document.add(new Paragraph("\n"));
			PdfPTable aTable1 = new PdfPTable(5);
			float[] width = { 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲比例(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
//			 数据库信息
			Hashtable spaceInfo = (Hashtable) reportHash.get("spaceInfo");
			if (spaceInfo.get("toolsdb") != null){
				List toolsdb = (ArrayList) spaceInfo.get("toolsdb");//得到所有数据表
				if(toolsdb!=null && toolsdb.size()>0){
					for (int i = 0; i < toolsdb.size(); i++) {
							Hashtable tempSpace = (Hashtable)toolsdb.get(i);
							String SYSCATSPACE = tempSpace.get("tablespace_name")+"";
							String totalspac = tempSpace.get("totalspac")+"";
							String usablespac = tempSpace.get("usablespac")+"";
							String usableper = (String)tempSpace.get("usableper");
							
							if(usableper == null || usableper.trim().equals("")){
								usableper = "0";
							}
					cell = new PdfPCell(new Phrase((i+1) + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(SYSCATSPACE));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(totalspac));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usablespac));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(usableper));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					}
				}
			}
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
		}
	
	/**
	 * @author HONGLI 打印db2综合性能word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_DB2CldDoc(String filename) throws
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				RtfWriter2.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
						BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				Hashtable conn = (Hashtable)reportHash.get("conn");//连接信息
				if(conn == null)conn = new Hashtable();	
				Hashtable poolInfo = (Hashtable)reportHash.get("poolInfo");//缓存信息
				if(poolInfo == null)poolInfo = new Hashtable();	
				Hashtable log = (Hashtable)reportHash.get("log");//日志
				if(log == null)log = new Hashtable();	
				Hashtable spaceInfo = (Hashtable)reportHash.get("spaceInfo");//表空间
				if(spaceInfo == null)spaceInfo = new Hashtable();	
				String[] sysDbStatus={"活动","正在静默","静默模式","前滚"};
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
			
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				Table dbTable = new Table(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidth(100); // 占页面宽度 90%
				dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbTable.setAutoFillEmptyCells(true); // 自动填满
				dbTable.setBorderWidth(1); // 边框宽度
				dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbTable.setSpacing(0);// 即单元格之间的间距
				dbTable.setBorder(2);// 边框
				dbTable.endHeaders();
				
				Cell dbCell = null;
				dbCell = new Cell(new Phrase("数据库信息",
						titleFont));
				dbCell.setColspan(5);
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("数据库名称", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("IP", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("类型", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("当前状态", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("运行评价", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(ip,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(typename,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(runstr,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(grade,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				
				
				Table aTable = new Table(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidth(100); // 占页面宽度 90%
				aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable.setAutoFillEmptyCells(true); // 自动填满
				aTable.setBorderWidth(1); // 边框宽度
				aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable.setSpacing(0);// 即单元格之间的间距
				aTable.setBorder(2);// 边框
				aTable.endHeaders();
				Cell cell = null;
				cell = new Cell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingnow+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingmin+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingconavg+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				// 设置图片
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
				img.setAbsolutePosition(0, 0);
				img.setAlignment(Image.LEFT);// 设置图片显示位置
				document.add(dbTable);
				document.add(aTable);
				document.add(img);
				document.add(new Paragraph("\n"));
				
				//表空间
				Table spaceTable = new Table(5);
				float[] width3 = { 220f, 220f, 220f, 220f, 220f };
				spaceTable.setWidths(width3);
				spaceTable.setWidth(100); // 占页面宽度 90%
				spaceTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				spaceTable.setAutoFillEmptyCells(true); // 自动填满
				spaceTable.setBorderWidth(1); // 边框宽度
				spaceTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				spaceTable.setPadding(2);// 衬距，看效果就知道什么意思了
				spaceTable.setSpacing(0);// 即单元格之间的间距
				spaceTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("表 空 间",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("表空间  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空闲比例 （%） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				List toolsdb = (ArrayList)spaceInfo.get("toolsdb");
				if(toolsdb != null && toolsdb.size()>0){

					for(int i=0;i<toolsdb.size();i++){
						Hashtable tempSpace = new Hashtable();
						tempSpace = (Hashtable)toolsdb.get(i);
						 String tablespace_name = (String)tempSpace.get("tablespace_name");
					 	String totalspac = (String)tempSpace.get("totalspac");
					 	String usablespac = (String)tempSpace.get("usablespac");
					 	String usableper = (String)tempSpace.get("usableper");
					 	
					 	if(usableper == null || "0".equals(totalspac.trim())){
					 		usableper = "100";
					 	}
								
		
						cell = new Cell(new Phrase((i+1)+"", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(tablespace_name, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(totalspac, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(usablespac, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(usableper, titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
					}
				}			
				document.add(spaceTable);
				
				
				
				
				//添加数据库信息表  缓冲区命中率等
				Table dbInfoTable = new Table(10);
				float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
				dbInfoTable.setWidths(dbInfoWidths);
				dbInfoTable.setWidth(100); // 占页面宽度 90%
				dbInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbInfoTable.setAutoFillEmptyCells(true); // 自动填满
				dbInfoTable.setBorderWidth(1); // 边框宽度
				dbInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbInfoTable.setSpacing(0);// 即单元格之间的间距
				dbInfoTable.setBorder(2);// 边框
				Hashtable mems = (Hashtable)reportHash.get("mems");//连 接 信 息
				cell = new Cell(new Phrase("连 接 信 息",
						titleFont));
				cell.setColspan(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);

				cell = new Cell(new Phrase("序号", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("数据库名称", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("数据库路径 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("数据库状态 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("最后备份时间 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("连接总数（个） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("最大连接数（个） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("当前连接数（个）  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("失败的SQL数（个） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				cell = new Cell(new Phrase("成功的SQL数（个） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbInfoTable.addCell(cell);
				Enumeration dbs = conn.keys();
				Hashtable<String,Object> allhash = new Hashtable();
				List poolList = new ArrayList();
				while(dbs.hasMoreElements()){								
					String obj = (String)dbs.nextElement();
					List connList = (List)conn.get(obj);

				for(int i=0;i<connList.size();i++){
					Hashtable ht = (Hashtable)connList.get(i);
					String db_name = ht.get("db_name").toString();
					String db_path = ht.get("db_path").toString();
					String db_status = ht.get("db_status").toString();
					String sqlm_elm_last_backup = ht.get("sqlm_elm_last_backup").toString();
					String total_cons = ht.get("total_cons").toString();
					String connections_top = ht.get("connections_top").toString();
					String appls_cur_cons = ht.get("appls_cur_cons").toString();
					String failedsql = ht.get("failedsql").toString();
					String commitsql = ht.get("commitsql").toString();

					cell = new Cell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(db_name, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(db_path, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(sysDbStatus[Integer.parseInt(db_status)], contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(sqlm_elm_last_backup, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(total_cons, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(connections_top, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(appls_cur_cons, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(failedsql, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase(commitsql, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					}
				}
				document.add(dbInfoTable);
				
				//缓 存 信 息
				Table sysInfoTable = new Table(7);
				float[] sysInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f};
				dbInfoTable.setWidths(dbInfoWidths);
				sysInfoTable.setWidth(100); // 占页面宽度 90%
				sysInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				sysInfoTable.setAutoFillEmptyCells(true); // 自动填满
				sysInfoTable.setBorderWidth(1); // 边框宽度
				sysInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				sysInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				sysInfoTable.setSpacing(0);// 即单元格之间的间距
				sysInfoTable.setBorder(2);// 边框
				Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
				cell = new Cell(new Phrase("缓 存 信 息",
						titleFont));
				cell.setColspan(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);

				cell = new Cell(new Phrase("序号 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("缓冲池名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("数据命中率 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("索引读取命中率 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("缓存读取命中率 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("异步读取比率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				cell = new Cell(new Phrase("直接读写数据库比率 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				sysInfoTable.addCell(cell);
				Enumeration dbs2 = poolInfo.keys();
				Hashtable<String,Object> allhash2 = new Hashtable();
				List poolList2 = new ArrayList();
				while(dbs2.hasMoreElements()){								
					String obj = (String)dbs2.nextElement();
					allhash = (Hashtable)poolInfo.get(obj);
					poolList = (List)allhash.get("poolValue");
					List lockList = (List)allhash.get("lockValue");
					List readList = (List)allhash.get("readValue");
						List writeList = (List)allhash.get("writeValue");
					for(int i=0;i<poolList.size();i++){
						Hashtable ht = (Hashtable)poolList.get(i);
						String bp_name = ht.get("bp_name").toString();
						String data_hit_ratio = ht.get("data_hit_ratio").toString();
						String index_hit_ratio = ht.get("index_hit_ratio").toString();
						String BP_hit_ratio = ht.get("BP_hit_ratio").toString();
						String Async_read_pct = ht.get("Async_read_pct").toString();
						String Direct_RW_Ratio = ht.get("Direct_RW_Ratio").toString();
				
						cell = new Cell(new Phrase((i+1)+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(bp_name, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(data_hit_ratio, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(index_hit_ratio, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(BP_hit_ratio, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(Async_read_pct, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
						cell = new Cell(new Phrase(Direct_RW_Ratio, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						sysInfoTable.addCell(cell);
					}
				}
				document.add(sysInfoTable);
				
				//锁 信 息
				Table aTable1 = new Table(10);
				float[] width = { 220f, 220f, 220f, 220f, 220f, 220f , 220f, 220f, 220f, 220f};
				aTable1.setWidths(width);
				aTable1.setWidth(100); // 占页面宽度 90%
				aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable1.setAutoFillEmptyCells(true); // 自动填满
				aTable1.setBorderWidth(1); // 边框宽度
				aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable1.setSpacing(0);// 即单元格之间的间距
				aTable1.setBorder(2);// 边框
				cell = new Cell(new Phrase("锁 信 息",
						titleFont));
				cell.setColspan(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("读行数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("查询行数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("锁等待数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("锁等待时间", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("死锁数", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("升级锁 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("总排序 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				cell = new Cell(new Phrase("总排序时间", titleFont)); 
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				// aTable1.endHeaders();

				Enumeration dbs3 = poolInfo.keys();
				Hashtable<String,Object> allhash3 = new Hashtable();
				List poolList3 = new ArrayList();
				while(dbs3.hasMoreElements()){								
					String obj = (String)dbs3.nextElement();
					allhash3 = (Hashtable)poolInfo.get(obj);
					poolList3 = (List)allhash3.get("poolValue");
					//System.out.println("poolList size === "+poolList.size());
					List lockList = (List)allhash3.get("lockValue");
					List readList = (List)allhash3.get("readValue");
						List writeList = (List)allhash3.get("writeValue");
					for(int i=0;i<lockList.size();i++){
						Hashtable ht = (Hashtable)lockList.get(i);
						String db_name = ht.get("db_name").toString();
						String rows_read = ht.get("rows_read").toString();
						String rows_selected = ht.get("rows_selected").toString();
						String lock_waits = ht.get("lock_waits").toString();
						String lock_wait_time = ht.get("lock_wait_time").toString();
						String deadlocks = ht.get("deadlocks").toString();
						String lock_escals = ht.get("lock_escals").toString();
						String total_sorts = ht.get("total_sorts").toString();
						String total_sort_time = ht.get("total_sort_time").toString();
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(db_name, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(rows_read, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(rows_selected, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(lock_waits, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(lock_wait_time, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(deadlocks, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(lock_escals, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(total_sorts, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(total_sort_time, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);

					}
				}
				
				// 日志信息
				Table aTable2 = new Table(7);
				float[] width2 = { 220f, 220f, 220f, 220f, 220f, 220f , 220f };
				aTable2.setWidths(width2);
				aTable2.setWidth(100); // 占页面宽度 90%
				aTable2.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable2.setAutoFillEmptyCells(true); // 自动填满
				aTable2.setBorderWidth(1); // 边框宽度
				aTable2.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable2.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable2.setSpacing(0);// 即单元格之间的间距
				aTable2.setBorder(2);// 边框
				cell = new Cell(new Phrase("日 志 信 息",
						titleFont));
				cell.setColspan(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("数据库名称  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("已使用大小(Mb)  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("空闲大小(Mb)   ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("使用率(%)  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("最大使用大小(Mb) ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				cell = new Cell(new Phrase("最大使用大小/秒", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable2.addCell(cell);
				Enumeration dbs4 =  log.keys();       
				Hashtable<String,Object> allhash4 = new Hashtable();
				List poolList4 = new ArrayList();
				while(dbs4.hasMoreElements()){								
					String obj = (String)dbs4.nextElement();
					List logList = (List)log.get(obj);
					for(int i=0;i<logList.size();i++){
						Hashtable ht = (Hashtable)logList.get(i);
						String logused = ht.get("logused").toString();
						String logspacefree = ht.get("logspacefree").toString();
						String pctused = ht.get("pctused").toString();
						String maxlogused = ht.get("maxlogused").toString();
						String maxsecused = ht.get("maxsecused").toString();
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(obj , contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(logused, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(logspacefree, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(pctused, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(maxlogused, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
						cell = new Cell(new Phrase(maxsecused, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable2.addCell(cell);
					}
				}
				
//				 表性能信息
				Table aTable3 = new Table(7);
				float[] awidth3 = { 220f, 220f, 220f, 220f, 220f, 220f , 220f };
				aTable3.setWidths(awidth3);
				aTable3.setWidth(100); // 占页面宽度 90%
				aTable3.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable3.setAutoFillEmptyCells(true); // 自动填满
				aTable3.setBorderWidth(1); // 边框宽度
				aTable3.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable3.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable3.setSpacing(0);// 即单元格之间的间距
				aTable3.setBorder(2);// 边框
				cell = new Cell(new Phrase("读频率最高的10张表",
						titleFont));
				cell.setColspan(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("模式  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("表名称  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("读行数", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("写行数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("溢出访问  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				cell = new Cell(new Phrase("页重组数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable3.addCell(cell);
				Enumeration dbs5 = poolInfo.keys();
				Hashtable<String,Object> allhash5 = new Hashtable();
				List poolList5 = new ArrayList();
				String obj = null;
				Hashtable allhash6 = null;  
				List lockList = null;
				List readList = null;
				List writeList = null;
				while(dbs5.hasMoreElements()){								
					obj = (String)dbs5.nextElement();
					allhash6 = (Hashtable)poolInfo.get(obj); 
					poolList = (List)allhash6.get("poolValue");
					//System.out.println("poolList size === "+poolList.size());
					lockList = (List)allhash6.get("lockValue");
					readList = (List)allhash6.get("readValue");
					    writeList = (List)allhash6.get("writeValue");
					}
				if(readList != null && readList.size()>0){
					for(int i=0;i<readList.size();i++){
						Hashtable ht = (Hashtable)readList.get(i);
						String tbschema = ht.get("tbschema").toString();
						String tbname = ht.get("tbname").toString();
						String rows_read = ht.get("rows_read").toString();
						String rows_written = ht.get("rows_written").toString();
						String overflow_accesses = ht.get("overflow_accesses").toString();
						String page_reorgs = ht.get("page_reorgs").toString();
						

						cell = new Cell(new Phrase((i+1)+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(tbschema, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(tbname, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(rows_read, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(rows_written, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(overflow_accesses, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
						cell = new Cell(new Phrase(page_reorgs, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable3.addCell(cell);
					}
				}
				Table aTable4 = new Table(7);
				float[] width4 = { 220f, 220f, 220f, 220f, 220f, 220f , 220f };
				aTable4.setWidths(width4);
				aTable4.setWidth(100); // 占页面宽度 90%
				aTable4.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable4.setAutoFillEmptyCells(true); // 自动填满
				aTable4.setBorderWidth(1); // 边框宽度
				aTable4.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable4.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable4.setSpacing(0);// 即单元格之间的间距
				aTable4.setBorder(2);// 边框
				cell = new Cell(new Phrase("写频率最高的10张表",
						titleFont));
				cell.setColspan(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("模式  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("表名称  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("读行数", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("写行数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("溢出访问  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				cell = new Cell(new Phrase("页重组数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable4.addCell(cell);
				
				if(writeList != null && writeList.size()>0){
					for(int i=0;i<writeList.size();i++){
						Hashtable ht = (Hashtable)writeList.get(i);
						String tbschema = ht.get("tbschema").toString();
						String tbname = ht.get("tbname").toString();
						String rows_read = ht.get("rows_read").toString();
						String rows_written = ht.get("rows_written").toString();
						String overflow_accesses = ht.get("overflow_accesses").toString();
						String page_reorgs = ht.get("page_reorgs").toString();

						cell = new Cell(new Phrase((i+1)+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(tbschema, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(tbname, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(rows_read, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(rows_written, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(overflow_accesses, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
						cell = new Cell(new Phrase(page_reorgs, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable4.addCell(cell);
					}
				}
				
				
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

					document.add(img1);
				}
				
				document.add(aTable1);
				document.add(aTable2);
				document.add(aTable3);
				document.add(aTable4);
				
				//事 件 汇 报 
				Table evenInfoTable = new Table(2);
				float[] evenInfoWidths = { 220f, 220f};
				evenInfoTable.setWidths(evenInfoWidths);
				evenInfoTable.setWidth(100); // 占页面宽度 90%
				evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
				evenInfoTable.setBorderWidth(1); // 边框宽度
				evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				evenInfoTable.setSpacing(0);// 即单元格之间的间距
				evenInfoTable.setBorder(2);// 边框
				String downnum = (String)reportHash.get("downnum");
				String count = (Integer)reportHash.get("count")+"";
				cell = new Cell(new Phrase("事件汇报",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(downnum, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(count, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				document.add(evenInfoTable);
				//添加事件列表
				addEventListToDoc(document, titleFont, contextFont);
				
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
	}
	
	/**
	 * @author HONGLI 打印DB2综合性能pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_DB2CldPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			Hashtable conn = (Hashtable)reportHash.get("conn");//连接信息
			if(conn == null)conn = new Hashtable();	
			Hashtable poolInfo = (Hashtable)reportHash.get("poolInfo");//缓存信息
			if(poolInfo == null)poolInfo = new Hashtable();	
			Hashtable log = (Hashtable)reportHash.get("log");//日志
			if(log == null)log = new Hashtable();	
			Hashtable spaceInfo = (Hashtable)reportHash.get("spaceInfo");//表空间
			if(spaceInfo == null)spaceInfo = new Hashtable();	
			String[] sysDbStatus={"活动","正在静默","静默模式","前滚"};
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			PdfPTable dbTable = new PdfPTable(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidthPercentage(100);
			PdfPCell dbCell = null;
			dbCell = new PdfPCell(new Phrase("数据库信息",
					titleFont));
			dbCell.setColspan(5);
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("数据库名称", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("IP", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("类型", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("当前状态", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("运行评价", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(ip,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(typename,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(runstr,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(grade,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			
			
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率信息",
					titleFont));
			cell.setColspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingnow+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingmin+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingconavg+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
//			img.setAbsolutePosition(0, 0);
			img.scalePercent(76);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(dbTable);
			document.add(new Paragraph("\n"));
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
//			表 空 间
			PdfPTable spaceInfoTable = new PdfPTable(5);
			float[] spaceInfoWidths = { 220f, 220f, 220f, 220f, 220f};
			spaceInfoTable.setWidths(spaceInfoWidths);
			spaceInfoTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("表 空 间",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲比例 （%） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceInfoTable.addCell(cell);
			if(spaceInfo == null)spaceInfo = new Hashtable();
			List toolsdb = (ArrayList)spaceInfo.get("toolsdb");
			if(toolsdb != null && toolsdb.size()>0){
				for(int i=0;i<toolsdb.size();i++){
					Hashtable tempSpace = new Hashtable();
					tempSpace = (Hashtable)toolsdb.get(i);
					 String tablespace_name = (String)tempSpace.get("tablespace_name");
				 	String totalspac = (String)tempSpace.get("totalspac");
				 	String usablespac = (String)tempSpace.get("usablespac");
				 	String usableper = (String)tempSpace.get("usableper");
				 	
				 	if(usableper == null || "0".equals(totalspac.trim())){
				 		usableper = "100";
				 	}
			 	
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceInfoTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tablespace_name, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceInfoTable.addCell(cell);
					cell = new PdfPCell(new Phrase(totalspac, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceInfoTable.addCell(cell);
					cell = new PdfPCell(new Phrase(usablespac, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceInfoTable.addCell(cell);
					cell = new PdfPCell(new Phrase(usableper, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceInfoTable.addCell(cell);
				}
			}
			document.add(spaceInfoTable);
			document.add(new Paragraph("\n"));
			
			//连接信息
			PdfPTable connTable = new PdfPTable(10);
			float[] connWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			connTable.setWidths(connWidths);
			connTable.setWidthPercentage(100);
			Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
			cell = new PdfPCell(new Phrase("连接信息",
					titleFont));
			cell.setColspan(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库路径 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库状态 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最后备份时间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("连接总数（个）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最大连接数（个） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连接数（个）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("失败的SQL数（个） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			cell = new PdfPCell(new Phrase("成功的SQL数（个） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			connTable.addCell(cell);
			Enumeration dbs = conn.keys();
			Hashtable<String,Object> allhash = new Hashtable();
			List poolList = new ArrayList();
			while(dbs.hasMoreElements()){								
				String obj = (String)dbs.nextElement();
				List connList = (List)conn.get(obj);

				for(int i=0;i<connList.size();i++){
					Hashtable ht = (Hashtable)connList.get(i);
					String db_name = ht.get("db_name").toString();
					String db_path = ht.get("db_path").toString();
					String db_status = ht.get("db_status").toString();
					String sqlm_elm_last_backup = ht.get("sqlm_elm_last_backup").toString();
					String total_cons = ht.get("total_cons").toString();
					String connections_top = ht.get("connections_top").toString();
					String appls_cur_cons = ht.get("appls_cur_cons").toString();
					String failedsql = ht.get("failedsql").toString();
					String commitsql = ht.get("commitsql").toString();
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);
					cell = new PdfPCell(new Phrase(db_name, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);
					cell = new PdfPCell(new Phrase(db_path, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);
					cell = new PdfPCell(new Phrase(sysDbStatus[Integer.parseInt(db_status)], contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);
					cell = new PdfPCell(new Phrase(sqlm_elm_last_backup, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(total_cons, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(connections_top, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(appls_cur_cons, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(failedsql, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(commitsql, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					connTable.addCell(cell);	
				}
			}
			document.add(connTable);
			document.add(new Paragraph("\n"));
			
			//连接信息
			PdfPTable hcTable = new PdfPTable(7);
			float[] hcWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			hcTable.setWidths(hcWidths);
			hcTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("缓存信息",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("缓冲池名称  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据命中率  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("索引读取命中率  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("缓存读取命中率 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("异步读取比率 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			cell = new PdfPCell(new Phrase("直接读写数据库比率  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hcTable.addCell(cell);
			Enumeration dbs2 = poolInfo.keys();
			Hashtable<String,Object> allhash2 = new Hashtable();
			List poolList2 = new ArrayList();
			while(dbs2.hasMoreElements()){								
				String obj = (String)dbs2.nextElement();
				allhash = (Hashtable)poolInfo.get(obj);
				poolList = (List)allhash.get("poolValue");
				List lockList = (List)allhash.get("lockValue");
				List readList = (List)allhash.get("readValue");
					List writeList = (List)allhash.get("writeValue");
				for(int i=0;i<poolList.size();i++){
					Hashtable ht = (Hashtable)poolList.get(i);
					String bp_name = ht.get("bp_name").toString();
					String data_hit_ratio = ht.get("data_hit_ratio").toString();
					String index_hit_ratio = ht.get("index_hit_ratio").toString();
					String BP_hit_ratio = ht.get("BP_hit_ratio").toString();
					String Async_read_pct = ht.get("Async_read_pct").toString();
					String Direct_RW_Ratio = ht.get("Direct_RW_Ratio").toString();
			
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);
					cell = new PdfPCell(new Phrase(bp_name, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);
					cell = new PdfPCell(new Phrase(data_hit_ratio, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);
					cell = new PdfPCell(new Phrase(index_hit_ratio, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);
					cell = new PdfPCell(new Phrase(BP_hit_ratio, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(Async_read_pct, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(Direct_RW_Ratio, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hcTable.addCell(cell);	
				}
			}
			document.add(hcTable);
			document.add(new Paragraph("\n"));
			
			//锁信息
			PdfPTable lockTable = new PdfPTable(10);
			float[] lockWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			lockTable.setWidths(lockWidths);
			lockTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("锁信息",
					titleFont));
			cell.setColspan(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("名称  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("读行数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("查询行数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("锁等待数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("锁等待时间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("死锁数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("升级锁", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("总排序 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new PdfPCell(new Phrase("总排序时间 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			Enumeration dbs3 = poolInfo.keys();
			Hashtable<String,Object> allhash3 = new Hashtable();
			List poolList3 = new ArrayList();
			while(dbs3.hasMoreElements()){								
				String obj = (String)dbs3.nextElement();
				allhash3 = (Hashtable)poolInfo.get(obj);
				poolList3 = (List)allhash3.get("poolValue");
				//System.out.println("poolList size === "+poolList.size());
				List lockList = (List)allhash3.get("lockValue");
				List readList = (List)allhash3.get("readValue");
					List writeList = (List)allhash3.get("writeValue");
				for(int i=0;i<lockList.size();i++){
					Hashtable ht = (Hashtable)lockList.get(i);
					String db_name = ht.get("db_name").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_selected = ht.get("rows_selected").toString();
					String lock_waits = ht.get("lock_waits").toString();
					String lock_wait_time = ht.get("lock_wait_time").toString();
					String deadlocks = ht.get("deadlocks").toString();
					String lock_escals = ht.get("lock_escals").toString();
					String total_sorts = ht.get("total_sorts").toString();
					String total_sort_time = ht.get("total_sort_time").toString();
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new PdfPCell(new Phrase(db_name, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_read, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_selected, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new PdfPCell(new Phrase(lock_waits, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(lock_wait_time, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(deadlocks, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(lock_escals, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(total_sorts, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(total_sort_time, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);	
				}
			}
			document.add(lockTable);
			document.add(new Paragraph("\n"));
			
			//日志信息
			PdfPTable logTable = new PdfPTable(7);
			float[] logWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			logTable.setWidths(logWidths);
			logTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("日志信息",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库名称   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("已使用大小(Mb)  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小(Mb) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("使用率(%) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最大使用大小(Mb)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最大使用大小/秒  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			Enumeration dbs4 =  log.keys();       
			Hashtable<String,Object> allhash4 = new Hashtable();
			List poolList4 = new ArrayList();
			while(dbs4.hasMoreElements()){								
				String obj = (String)dbs4.nextElement();
				List logList = (List)log.get(obj);
				for(int i=0;i<logList.size();i++){
					Hashtable ht = (Hashtable)logList.get(i);
					String logused = ht.get("logused").toString();
					String logspacefree = ht.get("logspacefree").toString();
					String pctused = ht.get("pctused").toString();
					String maxlogused = ht.get("maxlogused").toString();
					String maxsecused = ht.get("maxsecused").toString();
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(obj, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(logused, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(logspacefree, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(pctused, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(maxlogused, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(maxsecused, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);	
				}
			}
			document.add(logTable);
			document.add(new Paragraph("\n"));
			
			//读频率最高的10张表
			PdfPTable readTopTenTable = new PdfPTable(7);
			float[] readTopTenWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			readTopTenTable.setWidths(readTopTenWidths);
			readTopTenTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("读频率最高的10张表",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("模式   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("表名称   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("读行数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("写行数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("溢出访问 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("页重组数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			readTopTenTable.addCell(cell);
			Enumeration dbs5 = poolInfo.keys();
			Hashtable<String,Object> allhash5 = new Hashtable();
			List poolList5 = new ArrayList();
			String obj = null;
			Hashtable allhash6 = null;  
			List lockList = null;
			List readList = null;
			List writeList = null;
			while(dbs5.hasMoreElements()){								
				obj = (String)dbs5.nextElement();
				allhash6 = (Hashtable)poolInfo.get(obj); 
				poolList = (List)allhash6.get("poolValue");
				//System.out.println("poolList size === "+poolList.size());
				lockList = (List)allhash6.get("lockValue");
				readList = (List)allhash6.get("readValue");
				    writeList = (List)allhash6.get("writeValue");
			}
			if(readList != null && readList.size()>0){
				for(int i=0;i<readList.size();i++){
					Hashtable ht = (Hashtable)readList.get(i);
					String tbschema = ht.get("tbschema").toString();
					String tbname = ht.get("tbname").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_written = ht.get("rows_written").toString();
					String overflow_accesses = ht.get("overflow_accesses").toString();
					String page_reorgs = ht.get("page_reorgs").toString();
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tbschema, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tbname, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_read, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_written, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(overflow_accesses, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(page_reorgs, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					readTopTenTable.addCell(cell);	
				}
			}
			document.add(readTopTenTable);
			document.add(new Paragraph("\n"));
			
//			写频率最高的10张表
			PdfPTable writeTopTenTable = new PdfPTable(7);
			float[] writeTopTenWidths = { 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			writeTopTenTable.setWidths(writeTopTenWidths);
			writeTopTenTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("写频率最高的10张表",
					titleFont));
			cell.setColspan(7);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("模式   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("表名称   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("读行数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("写行数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("溢出访问 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			cell = new PdfPCell(new Phrase("页重组数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			writeTopTenTable.addCell(cell);
			if(writeList != null && writeList.size()>0){
				for(int i=0;i<writeList.size();i++){
					Hashtable ht = (Hashtable)writeList.get(i);
					String tbschema = ht.get("tbschema").toString();
					String tbname = ht.get("tbname").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_written = ht.get("rows_written").toString();
					String overflow_accesses = ht.get("overflow_accesses").toString();
					String page_reorgs = ht.get("page_reorgs").toString();
					cell = new PdfPCell(new Phrase((i+1)+"", contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tbschema, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tbname, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_read, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rows_written, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(overflow_accesses, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);	
					cell = new PdfPCell(new Phrase(page_reorgs, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					writeTopTenTable.addCell(cell);	
				}
			}
			document.add(writeTopTenTable);
			document.add(new Paragraph("\n"));
			
			
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(new Paragraph("\n"));
			
//			添加事件汇报信息等
			PdfPTable eventTable = new PdfPTable(2);
			float[] eventWidths = { 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			document.add(eventTable);
			
			document.add(new Paragraph("\n"));
			//添加事件列表
			addEventLisToPdf(document);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 打印DB2综合报表excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_DB2CldXls(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			wb = Workbook.createWorkbook(new File(filename)); 

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
			Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//系统信息
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			Hashtable conn = (Hashtable)reportHash.get("conn");//连接信息
			if(conn == null)conn = new Hashtable();	
			Hashtable poolInfo = (Hashtable)reportHash.get("poolInfo");//缓存信息
			if(poolInfo == null)poolInfo = new Hashtable();	
			Hashtable log = (Hashtable)reportHash.get("log");//日志
			if(log == null)log = new Hashtable();	
			Hashtable spaceInfo = (Hashtable)reportHash.get("spaceInfo");//表空间
			if(spaceInfo == null)spaceInfo = new Hashtable();	
			String[] sysDbStatus={"活动","正在静默","静默模式","前滚"};
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			
			WritableCellFormat red_labelFormat = new WritableCellFormat();
			red_labelFormat.setBackground(jxl.format.Colour.RED);
			
			WritableCellFormat orange_labelFormat = new WritableCellFormat();
			orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
			
			WritableCellFormat yellow_labelFormat = new WritableCellFormat();
			yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			
			//数据库ip信息
			tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "类型", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5, vo.getDbName(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, ip,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, typename,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, runstr,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, grade,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			
			
			
			//连通率
			tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 8, pingnow+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 8, pingmin+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 8, pingconavg+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 9, 7, 7, file));
			// allRow = allRow+7;
			
//			表 空 间信息
			tmpLabel = new Label(0, 16, "表空间", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 17, " ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 17, "表空间", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 17, "空间大小（MB） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 17, "空闲大小（MB）  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 17, "空闲比例 （%）", b_labelFormat);
			sheet.addCell(tmpLabel);
			List toolsdb = (ArrayList)spaceInfo.get("toolsdb");
			int row = 18;
			if(toolsdb != null && toolsdb.size()>0){

				for(int i=0;i<toolsdb.size();i++){
					Hashtable tempSpace = new Hashtable();
					tempSpace = (Hashtable)toolsdb.get(i);
					 String tablespace_name = (String)tempSpace.get("tablespace_name");
				 	String totalspac = (String)tempSpace.get("totalspac");
				 	String usablespac = (String)tempSpace.get("usablespac");
				 	String usableper = (String)tempSpace.get("usableper");
				 	
				 	if(usableper == null || "0".equals(totalspac.trim())){
				 		usableper = "100";
				 	}
					tmpLabel = new Label(0, row, (i+1)+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tablespace_name,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, totalspac,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, usablespac,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, usableper,
							p_labelFormat);
					sheet.addCell(tmpLabel);

					row++;
				}
			}
			

			row = row+2;
//			连 接 信 息
			tmpLabel = new Label(0, row, "连 接 信 息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row,"", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row,"数据库名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row,"数据库路径", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row,"数据库状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row,"最后备份时间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row,"连接总数（个） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row,"最大连接数（个） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row,"当前连接数（个） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row,"失败的SQL数（个） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row,"成功的SQL数（个）", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			Enumeration dbs = conn.keys();
			Hashtable<String,Object> allhash = new Hashtable();
			List poolList = new ArrayList();
			while(dbs.hasMoreElements()){								
				String obj = (String)dbs.nextElement();
				List connList = (List)conn.get(obj);

			for(int i=0;i<connList.size();i++){
				Hashtable ht = (Hashtable)connList.get(i);
				String db_name = ht.get("db_name").toString();
				String db_path = ht.get("db_path").toString();
				String db_status = ht.get("db_status").toString();
					String sqlm_elm_last_backup = ht.get("sqlm_elm_last_backup").toString();
					String total_cons = ht.get("total_cons").toString();
					String connections_top = ht.get("connections_top").toString();
					String appls_cur_cons = ht.get("appls_cur_cons").toString();
					String failedsql = ht.get("failedsql").toString();
					String commitsql = ht.get("commitsql").toString();
					
					tmpLabel = new Label(0, row, (i+1)+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, db_name,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, db_path,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, sysDbStatus[Integer.parseInt(db_status)],
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, sqlm_elm_last_backup,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, total_cons,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, connections_top,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, appls_cur_cons,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, failedsql,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row, commitsql,
							p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			
			
			//缓 存 信 息
			row = row + 2;
			tmpLabel = new Label(0, row, "缓 存 信 息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "缓冲池名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "数据命中率 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "索引读取命中率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "缓存读取命中率 ", b_labelFormat);
			sheet.addCell(tmpLabel); 
			tmpLabel = new Label(5, row, "异步读取比率 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "直接读写数据库比率 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			Enumeration dbs2 = poolInfo.keys();
			Hashtable<String,Object> allhash2 = new Hashtable();
			List poolList2 = new ArrayList();
			while(dbs2.hasMoreElements()){								
				String obj = (String)dbs2.nextElement();
				allhash = (Hashtable)poolInfo.get(obj);
				poolList = (List)allhash.get("poolValue");
				List lockList = (List)allhash.get("lockValue");
				List readList = (List)allhash.get("readValue");
					List writeList = (List)allhash.get("writeValue");
				for(int i=0;i<poolList.size();i++){
					Hashtable ht = (Hashtable)poolList.get(i);
					String bp_name = ht.get("bp_name").toString();
					String data_hit_ratio = ht.get("data_hit_ratio").toString();
					String index_hit_ratio = ht.get("index_hit_ratio").toString();
					String BP_hit_ratio = ht.get("BP_hit_ratio").toString();
					String Async_read_pct = ht.get("Async_read_pct").toString();
					String Direct_RW_Ratio = ht.get("Direct_RW_Ratio").toString();
			
					tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, bp_name, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, data_hit_ratio, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, index_hit_ratio, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, BP_hit_ratio, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, Async_read_pct, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, Direct_RW_Ratio, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			
//			锁 信 息
			row = row + 2;
			tmpLabel = new Label(0, row, "锁 信 息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "读行数  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "查询行数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "锁等待数  ", b_labelFormat);
			sheet.addCell(tmpLabel); 
			tmpLabel = new Label(5, row, "锁等待时间  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "死锁数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "升级锁  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row, "总排序  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row, "总排序时间   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			Enumeration dbs3 = poolInfo.keys();
			Hashtable<String,Object> allhash3 = new Hashtable();
			List poolList3 = new ArrayList();
			while(dbs3.hasMoreElements()){								
				String obj = (String)dbs3.nextElement();
				allhash3 = (Hashtable)poolInfo.get(obj);
				poolList3 = (List)allhash3.get("poolValue");
				//System.out.println("poolList size === "+poolList.size());
				List lockList = (List)allhash3.get("lockValue");
				List readList = (List)allhash3.get("readValue");
					List writeList = (List)allhash3.get("writeValue");
				for(int i=0;i<lockList.size();i++){
					Hashtable ht = (Hashtable)lockList.get(i);
					String db_name = ht.get("db_name").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_selected = ht.get("rows_selected").toString();
					String lock_waits = ht.get("lock_waits").toString();
					String lock_wait_time = ht.get("lock_wait_time").toString();
					String deadlocks = ht.get("deadlocks").toString();
					String lock_escals = ht.get("lock_escals").toString();
					String total_sorts = ht.get("total_sorts").toString();
					String total_sort_time = ht.get("total_sort_time").toString();
					tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, db_name, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, rows_read, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, rows_selected, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, lock_waits, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, lock_wait_time, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, deadlocks, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(7, row, lock_escals, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(8, row, total_sorts, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(9, row, total_sort_time, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			
//			日志 信 息
			row = row + 2;
			tmpLabel = new Label(0, row, "日 志 信 息", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "数据库名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "已使用大小(Mb)   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "空闲大小(Mb)  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "使用率(%)  ", b_labelFormat);
			sheet.addCell(tmpLabel); 
			tmpLabel = new Label(5, row, "最大使用大小(Mb) ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "最大使用大小/秒  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			Enumeration dbs4 =  log.keys();       
			Hashtable<String,Object> allhash4 = new Hashtable();
			List poolList4 = new ArrayList();
			while(dbs4.hasMoreElements()){								
				String obj = (String)dbs4.nextElement();
				List logList = (List)log.get(obj);
				for(int i=0;i<logList.size();i++){
					Hashtable ht = (Hashtable)logList.get(i);
					String logused = ht.get("logused").toString();
					String logspacefree = ht.get("logspacefree").toString();
					String pctused = ht.get("pctused").toString();
					String maxlogused = ht.get("maxlogused").toString();
					String maxsecused = ht.get("maxsecused").toString();
					tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, obj, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, logused, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, logspacefree, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, pctused, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, maxlogused, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, maxsecused, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			

//			读频率最高的10张表 
			row = row+2;
			tmpLabel = new Label(0, row, "读频率最高的10张表 ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "模式  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "表名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "读行数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "写行数 ", b_labelFormat);
			sheet.addCell(tmpLabel); 
			tmpLabel = new Label(5, row, "溢出访问 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "页重组数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			Enumeration dbs5 = poolInfo.keys();
			Hashtable<String,Object> allhash5 = new Hashtable();
			List poolList5 = new ArrayList();
			String obj = null;
			Hashtable allhash6 = null;  
			List lockList = null;
			List readList = null;
			List writeList = null;
			while(dbs5.hasMoreElements()){								
				obj = (String)dbs5.nextElement();
				allhash6 = (Hashtable)poolInfo.get(obj); 
				poolList = (List)allhash6.get("poolValue");
				//System.out.println("poolList size === "+poolList.size());
				lockList = (List)allhash6.get("lockValue");
				readList = (List)allhash6.get("readValue");
				    writeList = (List)allhash6.get("writeValue");
			}
			if(readList != null && readList.size()>0){
				for(int i=0;i<readList.size();i++){
					Hashtable ht = (Hashtable)readList.get(i);
					String tbschema = ht.get("tbschema").toString();
					String tbname = ht.get("tbname").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_written = ht.get("rows_written").toString();
					String overflow_accesses = ht.get("overflow_accesses").toString();
					String page_reorgs = ht.get("page_reorgs").toString();
					tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tbschema, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, tbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, rows_read, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, rows_written, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, overflow_accesses, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, page_reorgs, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			

//			写频率最高的10张表 
			row = row+2;
			tmpLabel = new Label(0, row, "写频率最高的10张表 ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "模式  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "表名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "读行数", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "写行数 ", b_labelFormat);
			sheet.addCell(tmpLabel); 
			tmpLabel = new Label(5, row, "溢出访问 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "页重组数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			if(writeList != null && writeList.size()>0){
				for(int i=0;i<writeList.size();i++){
					Hashtable ht = (Hashtable)writeList.get(i);
					String tbschema = ht.get("tbschema").toString();
					String tbname = ht.get("tbname").toString();
					String rows_read = ht.get("rows_read").toString();
					String rows_written = ht.get("rows_written").toString();
					String overflow_accesses = ht.get("overflow_accesses").toString();
					String page_reorgs = ht.get("page_reorgs").toString();
					tmpLabel = new Label(0, row, (i+1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tbschema, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, tbname, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, rows_read, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, rows_written, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, overflow_accesses, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(6, row, page_reorgs, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			
			
			//事 件 汇 报 
			row = row+2;
			tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, reportHash.get("count")+"",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			//增加事件列表
			addEventListToExcel(sheet, row);

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	/**
	 * @author HONGLI   
	 * Sybase性能 doc格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportSybaseSelfDoc(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			SybaseVO sysbaseVO = (SybaseVO)reportHash.get("sysbaseVO");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
		
			document.add(aTable);
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			document.add(img);
		
			document.add(new Paragraph("\n"));
			
//			表 空 间
			Table spaceTable = new Table(5);
			float[] width = { 220f, 220f, 220f, 220f, 220f };
			spaceTable.setWidths(width);
			spaceTable.setWidth(100); // 占页面宽度 90%
			spaceTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			spaceTable.setAutoFillEmptyCells(true); // 自动填满
			spaceTable.setBorderWidth(1); // 边框宽度
			spaceTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			spaceTable.setPadding(2);// 衬距，看效果就知道什么意思了
			spaceTable.setSpacing(0);// 即单元格之间的间距
			spaceTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("表 空 间",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("表空间 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空间大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			// spaceTable.endHeaders();
		
			// 数据库信息
			List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
			if(dbInfo != null && dbInfo.size()>0){

			for(int i=0;i<dbInfo.size();i++){
			TablesVO tempSpace = (TablesVO)dbInfo.get(i);
			 String db_name = (String)tempSpace.getDb_name();
		 	String db_size = (String)tempSpace.getDb_size();
		 	String db_freesize = (String)tempSpace.getDb_freesize();
		 	String db_usedperc = (String)tempSpace.getDb_usedperc();
					cell = new Cell(new Phrase((i+1) + "", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceTable.addCell(cell);
					cell = new Cell(new Phrase(db_name, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceTable.addCell(cell);
					cell = new Cell(new Phrase(db_size, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceTable.addCell(cell);
					cell = new Cell(new Phrase(db_freesize, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceTable.addCell(cell);
					cell = new Cell(new Phrase(db_usedperc, titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					spaceTable.addCell(cell);
		
				}
			}
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.add(spaceTable);
			document.close();
		} catch (Exception e) {
			SysLogger.error("ExcelReport1.createReportDB2SelfDoc()");
		}
	}
	
	/**
	 * @author HONGLI   
	 * Sybase性能 xls格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportSybaseSelfExcel(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			SybaseVO sysbaseVO = (SybaseVO)reportHash.get("sysbaseVO");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			int row = 15;
			tmpLabel = new Label(1, row, "表空间", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "表空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "空间大小（MB）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "空闲大小（MB） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "利用率(%)", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			
			List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
			if(dbInfo != null && dbInfo.size()>0){

				for(int i=0;i<dbInfo.size();i++){
					TablesVO tempSpace = (TablesVO)dbInfo.get(i);
					String db_name = (String)tempSpace.getDb_name();
				 	String db_size = (String)tempSpace.getDb_size();
				 	String db_freesize = (String)tempSpace.getDb_freesize();
				 	String db_usedperc = (String)tempSpace.getDb_usedperc();
					tmpLabel = new Label(0, row, (i + 1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, db_name, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, db_size, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, db_freesize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, db_usedperc, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * @author HONGLI   
	 * Sybase性能 pdf格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportSybaseSelfPdf(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			SybaseVO sysbaseVO = (SybaseVO)reportHash.get("sysbaseVO");
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
		
			document.add(new Paragraph("\n"));
			PdfPTable aTable1 = new PdfPTable(5);
			float[] width = { 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("表空间",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
			List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
			if(dbInfo != null && dbInfo.size()>0){
				for(int i=0;i<dbInfo.size();i++){
					TablesVO tempSpace = (TablesVO)dbInfo.get(i);
					 String db_name = (String)tempSpace.getDb_name();
				 	String db_size = (String)tempSpace.getDb_size();
				 	String db_freesize = (String)tempSpace.getDb_freesize();
				 	String db_usedperc = (String)tempSpace.getDb_usedperc();
					cell = new PdfPCell(new Phrase((i+1) + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_name));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_size));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_freesize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_usedperc));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
				}
			}
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/**
	 * @author HONGLI 打印Sybase综合性能word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SybaseCldDoc(String filename) throws
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				RtfWriter2.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
						BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
				SybaseVO sysbaseVO = (SybaseVO) reportHash.get("sysbaseVO");
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				Table dbTable = new Table(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidth(100); // 占页面宽度 90%
				dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbTable.setAutoFillEmptyCells(true); // 自动填满
				dbTable.setBorderWidth(1); // 边框宽度
				dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbTable.setSpacing(0);// 即单元格之间的间距
				dbTable.setBorder(2);// 边框
				dbTable.endHeaders();
				
				Cell dbCell = null;
				dbCell = new Cell(new Phrase("数据库信息",
						titleFont));
				dbCell.setColspan(5);
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("数据库名称", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("IP", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("类型", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("当前状态", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("运行评价", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(ip,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(typename,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(runstr,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(grade,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				
				
				Table aTable = new Table(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidth(100); // 占页面宽度 90%
				aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable.setAutoFillEmptyCells(true); // 自动填满
				aTable.setBorderWidth(1); // 边框宽度
				aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable.setSpacing(0);// 即单元格之间的间距
				aTable.setBorder(2);// 边框
				aTable.endHeaders();
				Cell cell = null;
				cell = new Cell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingnow+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingmin+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingconavg+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				// 设置图片
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
				img.setAbsolutePosition(0, 0);
				img.setAlignment(Image.LEFT);// 设置图片显示位置
				document.add(dbTable);
				document.add(aTable);
				document.add(img);
				document.add(new Paragraph("\n"));
				
//				表 空 间
				Table spaceTable = new Table(5);
				float[] width = { 220f, 220f, 220f, 220f, 220f };
				spaceTable.setWidths(width);
				spaceTable.setWidth(100); // 占页面宽度 90%
				spaceTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				spaceTable.setAutoFillEmptyCells(true); // 自动填满
				spaceTable.setBorderWidth(1); // 边框宽度
				spaceTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				spaceTable.setPadding(2);// 衬距，看效果就知道什么意思了
				spaceTable.setSpacing(0);// 即单元格之间的间距
				spaceTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("表 空 间",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("表空间 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间大小（MB） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空闲大小（MB）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("利用率(%)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				// spaceTable.endHeaders();
			
				
				List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
				if(dbInfo != null && dbInfo.size()>0){

				for(int i=0;i<dbInfo.size();i++){
				TablesVO tempSpace = (TablesVO)dbInfo.get(i);
				 String db_name = (String)tempSpace.getDb_name();
			 	String db_size = (String)tempSpace.getDb_size();
			 	String db_freesize = (String)tempSpace.getDb_freesize();
			 	String db_usedperc = (String)tempSpace.getDb_usedperc();
						cell = new Cell(new Phrase((i+1) + "", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(db_name, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(db_size, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(db_freesize, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(db_usedperc, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
			
					}
				}
				document.add(spaceTable);
				
//				添加存储信息 
				Table memTable = new Table(6);
				float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
				memTable.setWidths(dbInfoWidths);
				memTable.setWidth(100); // 占页面宽度 90%
				memTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				memTable.setAutoFillEmptyCells(true); // 自动填满
				memTable.setBorderWidth(1); // 边框宽度
				memTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				memTable.setPadding(2);// 衬距，看效果就知道什么意思了
				memTable.setSpacing(0);// 即单元格之间的间距
				memTable.setBorder(2);// 边框
				Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
				cell = new Cell(new Phrase("存储信息 ",
						titleFont));
				cell.setColspan(6);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);

				cell = new Cell(new Phrase("总数据高速缓存大小(MB)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase("总物理内存大小(MB)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase("Metadata缓存(MB)", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase("存储过程缓存大小(MB) ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase("总逻辑内存大小(MB) ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase("数据缓存匹配度(%) ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getTotal_dataCache(), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getTotal_physicalMemory() , contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getMetadata_cache(), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getProcedure_cache(), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getTotal_logicalMemory(), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				cell = new Cell(new Phrase(sysbaseVO.getData_hitrate(), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				memTable.addCell(cell);
				document.add(memTable);
				
				//Sysbase 远程服务器信息 
				Table remoteServerTable = new Table(5);
				float[] remoteServerWidths = { 220f, 220f, 220f, 220f, 220f};
				remoteServerTable.setWidths(remoteServerWidths);
				remoteServerTable.setWidth(100); // 占页面宽度 90%
				remoteServerTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				remoteServerTable.setAutoFillEmptyCells(true); // 自动填满
				remoteServerTable.setBorderWidth(1); // 边框宽度
				remoteServerTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				remoteServerTable.setPadding(2);// 衬距，看效果就知道什么意思了
				remoteServerTable.setSpacing(0);// 即单元格之间的间距
				remoteServerTable.setBorder(2);// 边框
				Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
				cell = new Cell(new Phrase("Sysbase 远程服务器信息 ",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);

				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);
				cell = new Cell(new Phrase("服务器名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);
				cell = new Cell(new Phrase("服务器网络名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);
				cell = new Cell(new Phrase("所属类别", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);
				cell = new Cell(new Phrase(" 服务器状态  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				remoteServerTable.addCell(cell);
				 List serverlist = (List)sysbaseVO.getServersInfo();
                 if (serverlist != null && serverlist.size()>0){
                 	for(int k=0;k<serverlist.size();k++){
                 		TablesVO tVO = (TablesVO)serverlist.get(k);

						cell = new Cell(new Phrase((k+1)+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						remoteServerTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getServer_name(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						remoteServerTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getServer_network_name(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						remoteServerTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getServer_class(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						remoteServerTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getServer_status(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						remoteServerTable.addCell(cell);
                 	}
                 }
				document.add(remoteServerTable);
				
				Table userTable = new Table(5);
				float[] uWidth = { 220f, 220f, 220f, 220f, 220f};
				userTable.setWidths(uWidth);
				userTable.setWidth(100); // 占页面宽度 90%
				userTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				userTable.setAutoFillEmptyCells(true); // 自动填满
				userTable.setBorderWidth(1); // 边框宽度
				userTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				userTable.setPadding(2);// 衬距，看效果就知道什么意思了
				userTable.setSpacing(0);// 即单元格之间的间距
				userTable.setBorder(2);// 边框
				cell = new Cell(new Phrase(" Sysbase 数据库用户信息 ",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				cell = new Cell(new Phrase("用户名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				cell = new Cell(new Phrase("数据库中的id ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				cell = new Cell(new Phrase("所属组组名 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				cell = new Cell(new Phrase("登陆名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				userTable.addCell(cell);
				// userTable.endHeaders();

				List userlist = (List)sysbaseVO.getUserInfo();
                if (userlist != null && userlist.size()>0){
                	for(int k=0;k<userlist.size();k++){
                		TablesVO tVO = (TablesVO)userlist.get(k);
						cell = new Cell(new Phrase((k+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						userTable.addCell(cell); 
						cell = new Cell(new Phrase(tVO.getUsers_name(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						userTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getID_in_db(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						userTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getGroup_name(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						userTable.addCell(cell);
						cell = new Cell(new Phrase(tVO.getLogin_name(), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						userTable.addCell(cell);

					}
				}
                document.add(userTable);

				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

					document.add(img1);
				}

				
				
				//事 件 汇 报 
				Table evenInfoTable = new Table(2);
				float[] evenInfoWidths = { 220f, 220f};
				evenInfoTable.setWidths(evenInfoWidths);
				evenInfoTable.setWidth(100); // 占页面宽度 90%
				evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
				evenInfoTable.setBorderWidth(1); // 边框宽度
				evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				evenInfoTable.setSpacing(0);// 即单元格之间的间距
				evenInfoTable.setBorder(2);// 边框
				String downnum = (String)reportHash.get("downnum");
				String count = (Integer)reportHash.get("count")+"";
				cell = new Cell(new Phrase("事件汇报",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(downnum, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(count, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				document.add(evenInfoTable);
				
				//添加事件列表
				addEventListToDoc(document, titleFont, contextFont);
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
	}
	
	/**
	 * @author HONGLI 打印Sybase综合性能pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SybaseCldPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			SybaseVO sysbaseVO = (SybaseVO)reportHash.get("sysbaseVO");
			DBVo vo = (DBVo) reportHash.get("vo");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
		
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			PdfPTable dbTable = new PdfPTable(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidthPercentage(100);
			PdfPCell dbCell = null;
			dbCell = new PdfPCell(new Phrase("数据库信息",
					titleFont));
			dbCell.setColspan(5);
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("数据库名称", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("IP", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("类型", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("当前状态", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase("运行评价", titleFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(ip,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(typename,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(runstr,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			dbCell = new PdfPCell(new Phrase(grade,contextFont));
			dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(dbCell);
			
			
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率信息",
					titleFont));
			cell.setColspan(3);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingnow+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingmin+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(pingconavg+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
//			img.setAbsolutePosition(0, 0);
			img.scalePercent(76);
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			document.add(dbTable);
			document.add(new Paragraph("\n"));
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			
			PdfPTable aTable1 = new PdfPTable(5);
			float[] width = { 220f, 220f, 220f, 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("表空间",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("表空间  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("空闲大小（MB） ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			cell = new PdfPCell(new Phrase("利用率(%)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			// aTable1.endHeaders();
		
			List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
			if(dbInfo != null && dbInfo.size()>0){
				for(int i=0;i<dbInfo.size();i++){
					TablesVO tempSpace = (TablesVO)dbInfo.get(i);
					 String db_name = (String)tempSpace.getDb_name();
				 	String db_size = (String)tempSpace.getDb_size();
				 	String db_freesize = (String)tempSpace.getDb_freesize();
				 	String db_usedperc = (String)tempSpace.getDb_usedperc();
					cell = new PdfPCell(new Phrase((i+1) + ""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_name));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_size));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_freesize));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
					cell = new PdfPCell(new Phrase(db_usedperc));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable1.addCell(cell);
				}
			}
			
			//存储信息 
			PdfPTable memTable = new PdfPTable(6);
			float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
			memTable.setWidths(dbInfoWidths);
			memTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("存储信息 ",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("总数据高速缓存大小(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("总物理内存大小(MB) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("Metadata缓存(MB)", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("存储过程缓存大小(MB) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("总逻辑内存大小(MB) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据缓存匹配度(%) ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getTotal_dataCache(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getTotal_physicalMemory(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getMetadata_cache(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getProcedure_cache(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getTotal_logicalMemory(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			cell = new PdfPCell(new Phrase(sysbaseVO.getData_hitrate(), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			memTable.addCell(cell);
			document.add(memTable);
			document.add(new Paragraph("\n"));
			
			//Sysbase 远程服务器信息 
			PdfPTable remoteServerTable = new PdfPTable(5);
			float[] ncWidths = { 220f, 220f, 220f, 220f , 220f };
			remoteServerTable.setWidths(ncWidths);
			remoteServerTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("Sysbase 远程服务器信息 ",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			cell = new PdfPCell(new Phrase("服务器名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			cell = new PdfPCell(new Phrase("服务器网络名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			cell = new PdfPCell(new Phrase("所属类别 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			cell = new PdfPCell(new Phrase("服务器状态 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			remoteServerTable.addCell(cell);
			 List serverlist = (List)sysbaseVO.getServersInfo();
             if (serverlist != null && serverlist.size()>0){
             	for(int k=0;k<serverlist.size();k++){
             		TablesVO tVO = (TablesVO)serverlist.get(k);
					cell = new PdfPCell(new Phrase((k+1)+"", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					remoteServerTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getServer_name(), titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					remoteServerTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getServer_network_name(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					remoteServerTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getServer_class(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					remoteServerTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getServer_status(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					remoteServerTable.addCell(cell);
             	}
             }
			document.add(remoteServerTable);
			document.add(new Paragraph("\n"));
			
			// Sysbase 数据库用户信息 
			PdfPTable userTable = new PdfPTable(5);
			float[] uWidths = { 220f, 220f, 220f, 220f , 220f };
			userTable.setWidths(uWidths);
			userTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase(" Sysbase 数据库用户信息 ",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			cell = new PdfPCell(new Phrase("用户名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库中的id  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			cell = new PdfPCell(new Phrase("所属组组名  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			cell = new PdfPCell(new Phrase("登陆名称  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			userTable.addCell(cell);
			List userlist = (List)sysbaseVO.getUserInfo();
            if (userlist != null && userlist.size()>0){
            	for(int k=0;k<userlist.size();k++){
            		TablesVO tVO = (TablesVO)userlist.get(k);
					cell = new PdfPCell(new Phrase((k+1)+"", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					userTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getUsers_name(), titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					userTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getID_in_db(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					userTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getGroup_name(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					userTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getLogin_name(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					userTable.addCell(cell);
             	}
             }
			document.add(userTable);
			document.add(new Paragraph("\n"));
			
			// Sysbase 数据库设备信息 
			PdfPTable deviceTable = new PdfPTable(4);
			float[] dWidths = { 220f, 220f, 220f, 220f };
			deviceTable.setWidths(dWidths);
			deviceTable.setWidthPercentage(100);
			Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
			cell = new PdfPCell(new Phrase("Sysbase 数据库设备信息  ",
					titleFont));
			cell.setColspan(4);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			deviceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			deviceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("设备名称  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			deviceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("设备物理名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			deviceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("设备描述 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			deviceTable.addCell(cell);
			List devicelist = (List)sysbaseVO.getDeviceInfo();
            if (devicelist != null && devicelist.size()>0){
            	for(int k=0;k<devicelist.size();k++){
            		TablesVO tVO = (TablesVO)devicelist.get(k);
					cell = new PdfPCell(new Phrase((k+1)+"", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					deviceTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getDevice_name(), titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					deviceTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getDevice_physical_name(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					deviceTable.addCell(cell);
					cell = new PdfPCell(new Phrase(tVO.getDevice_description(), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					deviceTable.addCell(cell);
             	}
             }
			document.add(deviceTable);
			

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

				document.add(img1);
			}

			document.add(new Paragraph("\n"));
			
//			添加事件汇报信息等
			PdfPTable eventTable = new PdfPTable(2);
			float[] eventWidths = { 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			document.add(eventTable);
			
			document.add(new Paragraph("\n"));
			//添加事件列表
			addEventLisToPdf(document);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 打印Sybase综合报表excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_SybaseCldXls(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			wb = Workbook.createWorkbook(new File(filename)); 

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable mems = (Hashtable)reportHash.get("mems");//内存信息
			Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//系统信息
			String typename = (String) reportHash.get("typename");
			String runstr = (String) reportHash.get("runstr");
			String grade = (String) reportHash.get("grade");
			String pingnow = (String) reportHash.get("pingnow");
			String pingmin = (String) reportHash.get("pingmin");
			String pingconavg = (String) reportHash.get("pingconavg");
			DBVo vo = (DBVo) reportHash.get("vo");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SybaseVO sysbaseVO = (SybaseVO)reportHash.get("sysbaseVO");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			
			//数据库ip信息
			tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "类型", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5, vo.getDbName(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, ip,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, typename,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, runstr,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, grade,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			
			
			
			//连通率
			tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 8, pingnow+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 8, pingmin+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 8, pingconavg+"%",
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 9, 7, 7, file));
			// allRow = allRow+7;
			int row = 15;
			tmpLabel = new Label(0, row, "表空间", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "序号", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "表空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "空间大小（MB）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "空闲大小（MB） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "利用率(%)", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			
			List dbInfo = (ArrayList)sysbaseVO.getDbInfo();
			if(dbInfo != null && dbInfo.size()>0){

				for(int i=0;i<dbInfo.size();i++){
					TablesVO tempSpace = (TablesVO)dbInfo.get(i);
					String db_name = (String)tempSpace.getDb_name();
				 	String db_size = (String)tempSpace.getDb_size();
				 	String db_freesize = (String)tempSpace.getDb_freesize();
				 	String db_usedperc = (String)tempSpace.getDb_usedperc();
					tmpLabel = new Label(0, row, (i + 1) + "", p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, db_name, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, db_size, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, db_freesize, p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, db_usedperc, p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
				}
			}
			 row = row+2;
			
//			存储信息 
			tmpLabel = new Label(0, row, "存储信息 ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "总数据高速缓存大小(MB)", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "总物理内存大小(MB) ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "Metadata缓存(MB)", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "存储过程缓存大小(MB) ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "总逻辑内存大小(MB) ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "数据缓存匹配度(%)", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, sysbaseVO.getTotal_dataCache() ,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, sysbaseVO.getTotal_physicalMemory(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, sysbaseVO.getMetadata_cache(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, sysbaseVO.getProcedure_cache(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, sysbaseVO.getTotal_logicalMemory(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, sysbaseVO.getData_hitrate(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			row++;

			
//			Sysbase 远程服务器信息 
			tmpLabel = new Label(0, row, "Sysbase 远程服务器信息  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row," ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row,"服务器名称  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row,"服务器网络名称  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row,"所属类别  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row,"服务器状态 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			List serverlist = (List)sysbaseVO.getServersInfo();
            if (serverlist != null && serverlist.size()>0){
            	for(int k=0;k<serverlist.size();k++){
            		TablesVO tVO = (TablesVO)serverlist.get(k);
					tmpLabel = new Label(0, row, (k+1)+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tVO.getServer_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, tVO.getServer_network_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, tVO.getServer_class(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, tVO.getServer_status(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
            	}
            }
            row = row+2;
        	
//			Sysbase 数据库用户信息
			tmpLabel = new Label(0, row, "Sysbase 数据库用户信息  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row," ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row,"用户名称   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row,"数据库中的id   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row,"所属组组名   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row,"登陆名称  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			List userlist = (List)sysbaseVO.getUserInfo();
            if (userlist != null && userlist.size()>0){
            	for(int k=0;k<userlist.size();k++){
            		TablesVO tVO = (TablesVO)userlist.get(k);
					tmpLabel = new Label(0, row, (k+1)+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tVO.getUsers_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, tVO.getID_in_db(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, tVO.getGroup_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, tVO.getLogin_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
            	}
            }
            row = row+2;
        	
//			 Sysbase 数据库设备信息 
			tmpLabel = new Label(0, row, "Sysbase 数据库设备信息  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row," ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row,"设备名称   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row,"设备物理名称    ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row,"设备描述    ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			List devicelist = (List)sysbaseVO.getDeviceInfo();
            if (devicelist != null && devicelist.size()>0){
            	for(int k=0;k<devicelist.size();k++){
            		TablesVO tVO = (TablesVO)devicelist.get(k);
					tmpLabel = new Label(0, row, (k+1)+"",
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, tVO.getDevice_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, tVO.getDevice_physical_name(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, tVO.getDevice_description(),
							p_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
            	}
            }
            row = row+2;
			
			//事 件 汇 报 
			tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, reportHash.get("count")+"",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//增加事件列表
			addEventListToExcel(sheet, row);

			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * @author HONGLI   
	 * Informix性能 doc格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportInformixSelfDoc(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable)reportHash.get("dbValue");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
		
			document.add(aTable);
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			document.add(img);
		
			document.add(new Paragraph("\n"));
			//Informix数据库表空间信息 
			Table spaceTable = new Table(8);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f , 220f, 220f };
			spaceTable.setWidths(width);
			spaceTable.setWidth(100); // 占页面宽度 90%
			spaceTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			spaceTable.setAutoFillEmptyCells(true); // 自动填满
			spaceTable.setBorderWidth(1); // 边框宽度
			spaceTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			spaceTable.setPadding(2);// 衬距，看效果就知道什么意思了
			spaceTable.setSpacing(0);// 即单元格之间的间距
			spaceTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("数据库表空间信息   ",
					titleFont));
			cell.setColspan(8);
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空间名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空间所有者 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("该块文件的路径 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空间大小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("已使用的空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空闲空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new Cell(new Phrase("空间使用率 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			// spaceTable.endHeaders();
			ArrayList dbspaces = new ArrayList();
			if(dbinfo!=null){
			    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
			}
			 if (dbspaces != null) {
			      if (dbspaces.size()>0){
			          DecimalFormat df=new DecimalFormat("#.###");
	           	      for(int i=0;i<dbspaces.size();i++){
	           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("dbspace"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("owner"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("fname"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new Cell(new Phrase(df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
		
           	      	}
			     }
			 }
			document.add(spaceTable);
			
			//Informix数据库会话信息    
			Table hhTable = new Table(8);
			float[] hhWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
			hhTable.setWidths(hhWidth);
			hhTable.setWidth(100); // 占页面宽度 90%
			hhTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			hhTable.setAutoFillEmptyCells(true); // 自动填满
			hhTable.setBorderWidth(1); // 边框宽度
			hhTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			hhTable.setPadding(2);// 衬距，看效果就知道什么意思了
			hhTable.setSpacing(0);// 即单元格之间的间距
			hhTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("数据库会话信息   ",
					titleFont));
			cell.setColspan(8);
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("用户名  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("主机 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("命中次数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("锁的数量", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("顺序扫描访问数据的次数", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("排序总数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			cell = new Cell(new Phrase("不适合内存排序数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			hhTable.addCell(cell);
			// hhTable.endHeaders();
			List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
			if (dbsession != null && dbsession.size()>0){
            	for(int i=0;i<dbsession.size();i++){
            		Hashtable tablesVO = (Hashtable)dbsession.get(i);
	            		String seqscans = String.valueOf(tablesVO.get("seqscans"));
	            		if("null".equals(seqscans)){
	            			seqscans = "";
	            		}
	            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
	            		if("null".equals(total_sorts)){
	            			total_sorts = "";
	            		}
	            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
	            		if("null".equals(dsksorts)){
	            			dsksorts = "";
	            		}
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("username"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("hostname"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase(tablesVO.get("access")+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase(tablesVO.get("locksheld")+"", contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase(seqscans, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase(total_sorts, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
						cell = new Cell(new Phrase(dsksorts, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						hhTable.addCell(cell);
           	      	}
			 }
			 
			document.add(hhTable);
			
			//Informix数据库锁信息 
			Table lockTable = new Table(6);
			float[] lockWidth = { 220f, 220f, 220f, 220f, 220f, 220f};
			lockTable.setWidths(lockWidth);
			lockTable.setWidth(100); // 占页面宽度 90%
			lockTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			lockTable.setAutoFillEmptyCells(true); // 自动填满
			lockTable.setBorderWidth(1); // 边框宽度
			lockTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			lockTable.setPadding(2);// 衬距，看效果就知道什么意思了
			lockTable.setSpacing(0);// 即单元格之间的间距
			lockTable.setBorder(2);// 边框
			cell = new Cell(new Phrase("数据库锁信息 ",
					titleFont));
			cell.setColspan(6);
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("用户名  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("主机 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("数据库名称  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("表名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			cell = new Cell(new Phrase("锁的类型 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			lockTable.addCell(cell);
			// lockTable.endHeaders();
			List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
			 if (dblock != null && dblock.size()>0){
             	for(int i=0;i<dblock.size();i++){
             		Hashtable tablesVO = (Hashtable)dblock.get(i);
             		String type = (String)tablesVO.get("type");
             		String desc = "";
             		if("B".equals(type)){
             			desc = "字节锁";
             		}else if("IS".equals(type)){
             			desc = "意向共享锁";
             		}else if("S".equals(type)){
             			desc = "共享锁";
             		}else if("XS".equals(type)){
             			desc = "由可重复阅读器持有的共享键值";
             		}else if("U".equals(type)){
             			desc = "更新锁";
             		}else if("IX".equals(type)){
             			desc = "意向互斥锁";
             		}else if("SIX".equals(type)){
             			desc = "共享的意向互斥锁";
             		}else if("X".equals(type)){
             			desc = "互斥锁";
             		}else if("XR".equals(type)){
             			desc = "由可重复阅读器持有的互斥键值";
             		}
					cell = new Cell(new Phrase((i+1)+""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new Cell(new Phrase((String)tablesVO.get("username"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new Cell(new Phrase((String)tablesVO.get("hostname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new Cell(new Phrase((String)tablesVO.get("dbsname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new Cell(new Phrase((String)tablesVO.get("tabname"), contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
					cell = new Cell(new Phrase(desc, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					lockTable.addCell(cell);
           	      }
			 }
			 
			document.add(lockTable);
		
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI   
	 * Informix性能 xls格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportInformixSelfExcel(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			fileName = ResourceCenter.getInstance().getSysPath() + filename;
			wb = Workbook.createWorkbook(new File(fileName));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable)reportHash.get("dbValue");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			int row = 14;
			tmpLabel = new Label(0, row, "数据库表空间信息   ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "空间名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "空间所有者 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "该块文件的路径", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "空间大小", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "已使用的空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "空闲空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "空间使用率  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			// 数据库信息
			ArrayList dbspaces = new ArrayList();
			if(dbinfo!=null){
			    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
			}
			 if (dbspaces != null) {
			      if (dbspaces.size()>0){
			          DecimalFormat df=new DecimalFormat("#.###");
	           	      for(int i=0;i<dbspaces.size();i++){
	           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, (String)tablesVO.get("dbspace"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, (String)tablesVO.get("owner"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, (String)tablesVO.get("fname"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%", p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
			      }
			 }
			 row = row+2;
			 //Informix数据库会话信息  
			 tmpLabel = new Label(0, row, "数据库会话信息     ", labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, "", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, "命中次数", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, "锁的数量 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, "顺序扫描访问数据的次数 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, row, "排序总数 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(7, row, "不适合内存排序数  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
				if (dbsession != null && dbsession.size()>0){
                	for(int i=0;i<dbsession.size();i++){
                		Hashtable tablesVO = (Hashtable)dbsession.get(i);
                		String seqscans = String.valueOf(tablesVO.get("seqscans"));
	            		if("null".equals(seqscans)){
	            			seqscans = "";
	            		}
	            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
	            		if("null".equals(total_sorts)){
	            			total_sorts = "";
	            		}
	            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
	            		if("null".equals(dsksorts)){
	            			dsksorts = "";
	            		}
						tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, tablesVO.get("access")+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, tablesVO.get("locksheld")+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, seqscans, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(6, row, total_sorts, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(7, row, dsksorts, p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
				      }
				 }
				
				row = row +2;
				 //Informix数据库锁信息
				 tmpLabel = new Label(0, row, "数据库锁信息    ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "表名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "锁的类型  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
					 if (dblock != null && dblock.size()>0){
		             	for(int i=0;i<dblock.size();i++){
		             		Hashtable tablesVO = (Hashtable)dblock.get(i);
		             		String type = (String)tablesVO.get("type");
		             		String desc = "";
		             		if("B".equals(type)){
		             			desc = "字节锁";
		             		}else if("IS".equals(type)){
		             			desc = "意向共享锁";
		             		}else if("S".equals(type)){
		             			desc = "共享锁";
		             		}else if("XS".equals(type)){
		             			desc = "由可重复阅读器持有的共享键值";
		             		}else if("U".equals(type)){
		             			desc = "更新锁";
		             		}else if("IX".equals(type)){
		             			desc = "意向互斥锁";
		             		}else if("SIX".equals(type)){
		             			desc = "共享的意向互斥锁";
		             		}else if("X".equals(type)){
		             			desc = "互斥锁";
		             		}else if("XR".equals(type)){
		             			desc = "由可重复阅读器持有的互斥键值";
		             		}
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, tablesVO.get("dbsname")+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, tablesVO.get("tabname")+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, desc, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
					      }
					 }


			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * @author HONGLI   
	 * Informix性能 pdf格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportInformixSelfPdf(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable)reportHash.get("dbValue");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
		
			//Informix数据库表空间信息   
			document.add(new Paragraph("\n"));
			PdfPTable spaceTable = new PdfPTable(8);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			spaceTable.setWidths(width);
			spaceTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库表空间信息   ",
					titleFont));
			cell.setColspan(8);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间所有者 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("该块文件的路径 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("已使用的空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell); 
			cell = new PdfPCell(new Phrase("空闲空间 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间使用率 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			// spaceTable.endHeaders();
		
			ArrayList dbspaces = new ArrayList();
			if(dbinfo!=null){
			    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
			}
			 if (dbspaces != null) {
			      if (dbspaces.size()>0){
			          DecimalFormat df=new DecimalFormat("#.###");
	           	      for(int i=0;i<dbspaces.size();i++){
	           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
						cell = new PdfPCell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("dbspace")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("owner")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("fname")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
	           	      }
			      }
			 }
			 document.add(spaceTable);
			 
//				Informix数据库会话信息    
					document.add(new Paragraph("\n"));
					PdfPTable hhTable = new PdfPTable(8);
					float[] hhWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
					hhTable.setWidths(hhWidth);
					hhTable.setWidthPercentage(100);
					cell = new PdfPCell(new Phrase("数据库会话信息",
							titleFont));
					cell.setColspan(8);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase(" ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("用户名  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("主机 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("命中次数  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("锁的数量", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("顺序扫描访问数据的次数", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell); 
					cell = new PdfPCell(new Phrase("排序总数 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("不适合内存排序数  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					// hhTable.endHeaders();
				
					List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
					if (dbsession != null && dbsession.size()>0){
		            	for(int i=0;i<dbsession.size();i++){
		            		Hashtable tablesVO = (Hashtable)dbsession.get(i);
		            		String seqscans = String.valueOf(tablesVO.get("seqscans"));
		            		if("null".equals(seqscans)){
		            			seqscans = "";
		            		}
		            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
		            		if("null".equals(total_sorts)){
		            			total_sorts = "";
		            		}
		            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
		            		if("null".equals(dsksorts)){
		            			dsksorts = "";
		            		}
							cell = new PdfPCell(new Phrase((i+1)+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase((String)tablesVO.get("username")));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase((String)tablesVO.get("hostname")));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(tablesVO.get("access")+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(tablesVO.get("locksheld")+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(seqscans));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(total_sorts));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(dsksorts));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
	           	      }
			      }
					document.add(hhTable);

					//	Informix数据库锁信息     
						document.add(new Paragraph("\n"));
						PdfPTable lockTable = new PdfPTable(6);
						float[] lockWidth = { 220f, 220f, 220f, 220f, 220f, 220f};
						lockTable.setWidths(lockWidth);
						lockTable.setWidthPercentage(100);
						cell = new PdfPCell(new Phrase("数据库锁信息  ",
								titleFont));
						cell.setColspan(6);
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase(" ", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase("用户名 ", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase("主机  ", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase("数据库名称  ", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase("表名称 ", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase("锁的类型", titleFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell); 
						// lockTable.endHeaders();
					
						List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
						 if (dblock != null && dblock.size()>0){
			             	for(int i=0;i<dblock.size();i++){
			             		Hashtable tablesVO = (Hashtable)dblock.get(i);
			             		String type = (String)tablesVO.get("type");
			             		String desc = "";
			             		if("B".equals(type)){
			             			desc = "字节锁";
			             		}else if("IS".equals(type)){
			             			desc = "意向共享锁";
			             		}else if("S".equals(type)){
			             			desc = "共享锁";
			             		}else if("XS".equals(type)){
			             			desc = "由可重复阅读器持有的共享键值";
			             		}else if("U".equals(type)){
			             			desc = "更新锁";
			             		}else if("IX".equals(type)){
			             			desc = "意向互斥锁";
			             		}else if("SIX".equals(type)){
			             			desc = "共享的意向互斥锁";
			             		}else if("X".equals(type)){
			             			desc = "互斥锁";
			             		}else if("XR".equals(type)){
			             			desc = "由可重复阅读器持有的互斥键值";
			             		}
								cell = new PdfPCell(new Phrase((i+1)+""));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
								cell = new PdfPCell(new Phrase((String)tablesVO.get("username")));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
								cell = new PdfPCell(new Phrase((String)tablesVO.get("hostname")));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
								cell = new PdfPCell(new Phrase((String)tablesVO.get("dbsname")));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
								cell = new PdfPCell(new Phrase((String)tablesVO.get("tabname")));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
								cell = new PdfPCell(new Phrase(desc));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								lockTable.addCell(cell);
		           	      }
				      }
				 

			document.add(lockTable);
					 
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 打印Informix综合性能word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_InformixCldDoc(String filename) throws
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				RtfWriter2.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
						BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				Hashtable dbinfo = new Hashtable();
				dbinfo = (Hashtable)reportHash.get("dbValue");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
			
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				Table dbTable = new Table(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidth(100); // 占页面宽度 90%
				dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbTable.setAutoFillEmptyCells(true); // 自动填满
				dbTable.setBorderWidth(1); // 边框宽度
				dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbTable.setSpacing(0);// 即单元格之间的间距
				dbTable.setBorder(2);// 边框
				dbTable.endHeaders();
				
				Cell dbCell = null;
				dbCell = new Cell(new Phrase("数据库信息",
						titleFont));
				dbCell.setColspan(5);
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("数据库名称", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("IP", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("类型", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("当前状态", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase("运行评价", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(ip,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(typename,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(runstr,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new Cell(new Phrase(grade,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				
				
				Table aTable = new Table(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidth(100); // 占页面宽度 90%
				aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				aTable.setAutoFillEmptyCells(true); // 自动填满
				aTable.setBorderWidth(1); // 边框宽度
				aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				aTable.setPadding(2);// 衬距，看效果就知道什么意思了
				aTable.setSpacing(0);// 即单元格之间的间距
				aTable.setBorder(2);// 边框
				aTable.endHeaders();
				Cell cell = null;
				cell = new Cell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingnow+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingmin+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new Cell(new Phrase(pingconavg+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				// 设置图片
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
				img.setAbsolutePosition(0, 0);
				img.setAlignment(Image.LEFT);// 设置图片显示位置
				document.add(dbTable);
				document.add(aTable);
				document.add(img);
				document.add(new Paragraph("\n"));
				
				
//				Informix数据库表空间信息 
				Table spaceTable = new Table(8);
				float[] width = { 220f, 220f, 220f, 220f, 220f, 220f , 220f, 220f };
				spaceTable.setWidths(width);
				spaceTable.setWidth(100); // 占页面宽度 90%
				spaceTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				spaceTable.setAutoFillEmptyCells(true); // 自动填满
				spaceTable.setBorderWidth(1); // 边框宽度
				spaceTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				spaceTable.setPadding(2);// 衬距，看效果就知道什么意思了
				spaceTable.setSpacing(0);// 即单元格之间的间距
				spaceTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("数据库表空间信息   ",
						titleFont));
				cell.setColspan(8);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间所有者 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("该块文件的路径 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间大小", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("已使用的空间", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空闲空间", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				cell = new Cell(new Phrase("空间使用率 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				spaceTable.addCell(cell);
				// spaceTable.endHeaders();
				ArrayList dbspaces = new ArrayList();
				if(dbinfo!=null){
				    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
				}
				 if (dbspaces != null) {
				      if (dbspaces.size()>0){
				          DecimalFormat df=new DecimalFormat("#.###");
		           	      for(int i=0;i<dbspaces.size();i++){
		           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
							cell = new Cell(new Phrase((i+1)+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase((String)tablesVO.get("dbspace"), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase((String)tablesVO.get("owner"), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase((String)tablesVO.get("fname"), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
							cell = new Cell(new Phrase(df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							spaceTable.addCell(cell);
			
	           	      	}
				     }
				 }
				document.add(spaceTable);
				
				//Informix数据库会话信息    
				Table hhTable = new Table(8);
				float[] hhWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
				hhTable.setWidths(hhWidth);
				hhTable.setWidth(100); // 占页面宽度 90%
				hhTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				hhTable.setAutoFillEmptyCells(true); // 自动填满
				hhTable.setBorderWidth(1); // 边框宽度
				hhTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				hhTable.setPadding(2);// 衬距，看效果就知道什么意思了
				hhTable.setSpacing(0);// 即单元格之间的间距
				hhTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("数据库会话信息   ",
						titleFont));
				cell.setColspan(8);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("用户名  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("主机 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("命中次数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("锁的数量", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("顺序扫描访问数据的次数", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("排序总数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				cell = new Cell(new Phrase("不适合内存排序数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				hhTable.addCell(cell);
				// hhTable.endHeaders();
				List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
				if (dbsession != null && dbsession.size()>0){
	            	for(int i=0;i<dbsession.size();i++){
	            		Hashtable tablesVO = (Hashtable)dbsession.get(i);
	            		String seqscans = String.valueOf(tablesVO.get("seqscans"));
	            		if("null".equals(seqscans)){
	            			seqscans = "";
	            		}
	            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
	            		if("null".equals(total_sorts)){
	            			total_sorts = "";
	            		}
	            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
	            		if("null".equals(dsksorts)){
	            			dsksorts = "";
	            		}
							cell = new Cell(new Phrase((i+1)+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase((String)tablesVO.get("username"), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase((String)tablesVO.get("hostname"), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase(tablesVO.get("access")+"", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase(tablesVO.get("locksheld")+"", contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase(seqscans, contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase(total_sorts, contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new Cell(new Phrase(dsksorts, contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
	           	      	}
				 }
				 
				document.add(hhTable);
				
				//Informix数据库锁信息 
				Table lockTable = new Table(6);
				float[] lockWidth = { 220f, 220f, 220f, 220f, 220f, 220f};
				lockTable.setWidths(lockWidth);
				lockTable.setWidth(100); // 占页面宽度 90%
				lockTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				lockTable.setAutoFillEmptyCells(true); // 自动填满
				lockTable.setBorderWidth(1); // 边框宽度
				lockTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				lockTable.setPadding(2);// 衬距，看效果就知道什么意思了
				lockTable.setSpacing(0);// 即单元格之间的间距
				lockTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("数据库锁信息 ",
						titleFont));
				cell.setColspan(6);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("用户名  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("主机 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("数据库名称  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("表名称", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new Cell(new Phrase("锁的类型 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				// lockTable.endHeaders();
				List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
				 if (dblock != null && dblock.size()>0){
	             	for(int i=0;i<dblock.size();i++){
	             		Hashtable tablesVO = (Hashtable)dblock.get(i);
	             		String type = (String)tablesVO.get("type");
	             		String desc = "";
	             		if("B".equals(type)){
	             			desc = "字节锁";
	             		}else if("IS".equals(type)){
	             			desc = "意向共享锁";
	             		}else if("S".equals(type)){
	             			desc = "共享锁";
	             		}else if("XS".equals(type)){
	             			desc = "由可重复阅读器持有的共享键值";
	             		}else if("U".equals(type)){
	             			desc = "更新锁";
	             		}else if("IX".equals(type)){
	             			desc = "意向互斥锁";
	             		}else if("SIX".equals(type)){
	             			desc = "共享的意向互斥锁";
	             		}else if("X".equals(type)){
	             			desc = "互斥锁";
	             		}else if("XR".equals(type)){
	             			desc = "由可重复阅读器持有的互斥键值";
	             		}
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("username"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("hostname"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("dbsname"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new Cell(new Phrase((String)tablesVO.get("tabname"), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new Cell(new Phrase(desc, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
	           	      }
				 }
				document.add(lockTable);
				
//				Informix数据库日志信息  
				Table logTable = new Table(9);
				float[] logWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
				logTable.setWidths(logWidth);
				logTable.setWidth(100); // 占页面宽度 90%
				logTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				logTable.setAutoFillEmptyCells(true); // 自动填满
				logTable.setBorderWidth(1); // 边框宽度
				logTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				logTable.setPadding(2);// 衬距，看效果就知道什么意思了
				logTable.setSpacing(0);// 即单元格之间的间距
				logTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("数据库日志信息 ",
						titleFont));
				cell.setColspan(9);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("文件ID   ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("日志文件的页数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("日志文件已用的页数  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("是否被使用", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("是否是当前文件 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("是否已经备份过  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("是否已置于备份磁盘上 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				cell = new Cell(new Phrase("是否为临时日志文件  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				logTable.addCell(cell);
				// logTable.endHeaders();
				List dblog = (ArrayList)dbinfo.get("informixlog");//锁信息
				 if (dblog != null && dblog.size()>0){
                 	for(int i=0;i<dblog.size();i++){
                 		Hashtable tablesVO = (Hashtable)dblog.get(i);
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("uniqid")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("size")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("used")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("is_used")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("is_current")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("is_backed_up")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("is_archived")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("is_temp")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						logTable.addCell(cell);
	           	      }
				 }
				document.add(logTable);
				
//				Informix数据库IO信息
				Table ioTable = new Table(10);
				float[] ioWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f};
				ioTable.setWidths(ioWidth);
				ioTable.setWidth(100); // 占页面宽度 90%
				ioTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				ioTable.setAutoFillEmptyCells(true); // 自动填满
				ioTable.setBorderWidth(1); // 边框宽度
				ioTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				ioTable.setPadding(2);// 衬距，看效果就知道什么意思了
				ioTable.setSpacing(0);// 即单元格之间的间距
				ioTable.setBorder(2);// 边框
				cell = new Cell(new Phrase("数据库IO信息 ",
						titleFont));
				cell.setColspan(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("块编号   ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("物理读取数  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("读取的页数   ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("物理写入数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("写入的页数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("物理读取（镜像）数  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("读取（镜像）的页数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("物理写入（镜像）数   ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				cell = new Cell(new Phrase("写入（镜像）的页数 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				ioTable.addCell(cell);
				// ioTable.endHeaders();
				List dbio = (ArrayList)dbinfo.get("iolist");//IO信息
				 if (dbio != null && dbio.size()>0){
                 	for(int i=0;i<dbio.size();i++){
                 		Hashtable tablesVO = (Hashtable)dbio.get(i);
						cell = new Cell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("chunknum")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("reads")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("pagesread")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("writes")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("pageswritten")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("mreads")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("mpagesread")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("mwrites")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
						cell = new Cell(new Phrase(String.valueOf(tablesVO.get("mpageswritten")), contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						ioTable.addCell(cell);
	           	      }
				 }
				document.add(ioTable);
				
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置

					document.add(img1);
				}

				
				
				//事 件 汇 报 
				Table evenInfoTable = new Table(2);
				float[] evenInfoWidths = { 220f, 220f};
				evenInfoTable.setWidths(evenInfoWidths);
				evenInfoTable.setWidth(100); // 占页面宽度 90%
				evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
				evenInfoTable.setBorderWidth(1); // 边框宽度
				evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
				evenInfoTable.setSpacing(0);// 即单元格之间的间距
				evenInfoTable.setBorder(2);// 边框
				String downnum = (String)reportHash.get("downnum");
				String count = (Integer)reportHash.get("count")+"";
				cell = new Cell(new Phrase("事件汇报",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(downnum, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				cell = new Cell(new Phrase(count, contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				evenInfoTable.addCell(cell);
				document.add(evenInfoTable);
				
				//添加事件列表
				addEventListToDoc(document, titleFont, contextFont);
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
	}
	
	/**
	 * @author HONGLI 打印Informix综合性能pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_InformixCldPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable)reportHash.get("dbValue");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			PdfPTable aTable = new PdfPTable(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			// 设置图片显示位置 document.add(aTable);
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
		
			//Informix数据库表空间信息   
			document.add(new Paragraph("\n"));
			PdfPTable spaceTable = new PdfPTable(8);
			float[] width = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			spaceTable.setWidths(width);
			spaceTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库表空间信息   ",
					titleFont));
			cell.setColspan(8);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间名称 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间所有者 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("该块文件的路径 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间大小", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("已使用的空间", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell); 
			cell = new PdfPCell(new Phrase("空闲空间 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			cell = new PdfPCell(new Phrase("空间使用率 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			spaceTable.addCell(cell);
			// spaceTable.endHeaders();
		
			ArrayList dbspaces = new ArrayList();
			if(dbinfo!=null){
			    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
			}
			 if (dbspaces != null) {
			      if (dbspaces.size()>0){
			          DecimalFormat df=new DecimalFormat("#.###");
	           	      for(int i=0;i<dbspaces.size();i++){
	           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
						cell = new PdfPCell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("dbspace")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("owner")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("fname")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
						cell = new PdfPCell(new Phrase(df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%"));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						spaceTable.addCell(cell);
	           	      }
			      }
			 }
			 document.add(spaceTable);
			 
//				Informix数据库会话信息    
					document.add(new Paragraph("\n"));
					PdfPTable hhTable = new PdfPTable(8);
					float[] hhWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
					hhTable.setWidths(hhWidth);
					hhTable.setWidthPercentage(100);
					cell = new PdfPCell(new Phrase("数据库会话信息",
							titleFont));
					cell.setColspan(8);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase(" ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("用户名  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("主机 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("命中次数  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("锁的数量", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("顺序扫描访问数据的次数", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell); 
					cell = new PdfPCell(new Phrase("排序总数 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					cell = new PdfPCell(new Phrase("不适合内存排序数  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					hhTable.addCell(cell);
					// hhTable.endHeaders();
				
					List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
					if (dbsession != null && dbsession.size()>0){
		            	for(int i=0;i<dbsession.size();i++){
		            		Hashtable tablesVO = (Hashtable)dbsession.get(i);
		            		String seqscans = String.valueOf(tablesVO.get("seqscans"));
		            		if("null".equals(seqscans)){
		            			seqscans = "";
		            		}
		            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
		            		if("null".equals(total_sorts)){
		            			total_sorts = "";
		            		}
		            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
		            		if("null".equals(dsksorts)){
		            			dsksorts = "";
		            		}
							cell = new PdfPCell(new Phrase((i+1)+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase((String)tablesVO.get("username")));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase((String)tablesVO.get("hostname")));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(tablesVO.get("access")+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(tablesVO.get("locksheld")+""));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(seqscans));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(total_sorts));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
							cell = new PdfPCell(new Phrase(dsksorts));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							hhTable.addCell(cell);
	           	      }
			      }
					document.add(hhTable);

			//	Informix数据库锁信息     
				document.add(new Paragraph("\n"));
				PdfPTable lockTable = new PdfPTable(6);
				float[] lockWidth = { 220f, 220f, 220f, 220f, 220f, 220f};
				lockTable.setWidths(lockWidth);
				lockTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase("数据库锁信息  ",
						titleFont));
				cell.setColspan(6);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase(" ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase("用户名 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase("主机  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase("数据库名称  ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase("表名称 ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell);
				cell = new PdfPCell(new Phrase("锁的类型", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				lockTable.addCell(cell); 
				// lockTable.endHeaders();
			
				List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
				 if (dblock != null && dblock.size()>0){
	             	for(int i=0;i<dblock.size();i++){
	             		Hashtable tablesVO = (Hashtable)dblock.get(i);
	             		String type = (String)tablesVO.get("type");
	             		String desc = "";
	             		if("B".equals(type)){
	             			desc = "字节锁";
	             		}else if("IS".equals(type)){
	             			desc = "意向共享锁";
	             		}else if("S".equals(type)){
	             			desc = "共享锁";
	             		}else if("XS".equals(type)){
	             			desc = "由可重复阅读器持有的共享键值";
	             		}else if("U".equals(type)){
	             			desc = "更新锁";
	             		}else if("IX".equals(type)){
	             			desc = "意向互斥锁";
	             		}else if("SIX".equals(type)){
	             			desc = "共享的意向互斥锁";
	             		}else if("X".equals(type)){
	             			desc = "互斥锁";
	             		}else if("XR".equals(type)){
	             			desc = "由可重复阅读器持有的互斥键值";
	             		}
						cell = new PdfPCell(new Phrase((i+1)+""));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("username")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("hostname")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("dbsname")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase((String)tablesVO.get("tabname")));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
						cell = new PdfPCell(new Phrase(desc));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						lockTable.addCell(cell);
           	      }
		      }
			document.add(lockTable);
					 
			 
			//Informix数据库日志信息     
			document.add(new Paragraph("\n"));
			PdfPTable logTable = new PdfPTable(9);
			float[] logWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			logTable.setWidths(logWidth);
			logTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库日志信息   ",
					titleFont));
			cell.setColspan(9);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("文件ID   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("日志文件的页数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("日志文件已用的页数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("是否被使用 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("是否是当前文件", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell); 
			cell = new PdfPCell(new Phrase("是否已经备份过  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("是否已置于备份磁盘上  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			cell = new PdfPCell(new Phrase("是否为临时日志文件   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			logTable.addCell(cell);
			// logTable.endHeaders();
		
			List dblog = (ArrayList)dbinfo.get("informixlog");//锁信息
			 if (dblog != null && dblog.size()>0){
            	for(int i=0;i<dblog.size();i++){
            		Hashtable tablesVO = (Hashtable)dblog.get(i);
					cell = new PdfPCell(new Phrase((i+1)+""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("uniqid"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("size"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("used"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("is_used"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("is_current"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("is_backed_up"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("is_archived"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("is_temp"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					logTable.addCell(cell);
            	}
			}
			document.add(logTable);
			
			//Informix数据库IO信息  
			document.add(new Paragraph("\n"));
			PdfPTable ioTable = new PdfPTable(10);
			float[] ioWidth = { 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f, 220f };
			ioTable.setWidths(ioWidth);
			ioTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("数据库IO信息   ",
					titleFont));
			cell.setColspan(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase(" ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("块编号 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("物理读取数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("读取的页数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写入数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("写入的页数 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell); 
			cell = new PdfPCell(new Phrase("物理读取（镜像）数  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("读取（镜像）的页数   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("物理写入（镜像）数   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			cell = new PdfPCell(new Phrase("写入（镜像）的页数   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			ioTable.addCell(cell);
			// ioTable.endHeaders();
		
			List dbio = (ArrayList)dbinfo.get("iolist");//IO信息
			 if (dbio != null && dbio.size()>0){
            	for(int i=0;i<dbio.size();i++){
            		Hashtable tablesVO = (Hashtable)dbio.get(i);
					cell = new PdfPCell(new Phrase((i+1)+""));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("chunknum"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("reads"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("pagesread"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("writes"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("pageswritten"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("mreads"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("mpagesread"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("mwrites"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
					cell = new PdfPCell(new Phrase(String.valueOf(tablesVO.get("mpageswritten"))));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					ioTable.addCell(cell);
            	}
			}
			document.add(ioTable);
			
//			添加事件汇报信息等
			document.add(new Paragraph("\n"));
			PdfPTable eventTable = new PdfPTable(2);
			float[] eventWidths = { 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件汇报",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			document.add(eventTable);
			
			document.add(new Paragraph("\n"));
			//添加事件列表
			addEventLisToPdf(document);
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 打印Informix综合报表excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_InformixCldXls(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			// fileName = ResourceCenter.getInstance().getSysPath() +
			// "temp\\dhcnms_report.xls";
			// fileName = CommonAppUtil.getAppName() +
			// "/temp/hostnms_report.xls";
			wb = Workbook.createWorkbook(new File(filename));

			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable dbinfo = new Hashtable();
			dbinfo = (Hashtable)reportHash.get("dbValue");
			Hashtable maxping = (Hashtable) reportHash.get("ping");

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(1, 4, "最小连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "平均连通率", b_labelFormat);
			sheet.addCell(tmpLabel);

			tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
					p_labelFormat);
			sheet.addCell(tmpLabel);

			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip
					+ "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			// allRow = allRow+2;
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			// allRow = allRow+7;
			int row = 14;
			tmpLabel = new Label(0, row, "数据库表空间信息   ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "空间名称 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "空间所有者 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "该块文件的路径", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "空间大小", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "已使用的空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "空闲空间 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "空间使用率  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			// 数据库信息
			ArrayList dbspaces = new ArrayList();
			if(dbinfo!=null){
			    dbspaces = (ArrayList)dbinfo.get("informixspaces");//数据库空间信息
			}
			 if (dbspaces != null) {
			      if (dbspaces.size()>0){
			          DecimalFormat df=new DecimalFormat("#.###");
	           	      for(int i=0;i<dbspaces.size();i++){
	           	          Hashtable tablesVO = (Hashtable)dbspaces.get(i);
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, (String)tablesVO.get("dbspace"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, (String)tablesVO.get("owner"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, (String)tablesVO.get("fname"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, df.format(Float.parseFloat(tablesVO.get("pages_size")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, df.format(Float.parseFloat(tablesVO.get("pages_used")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, df.format(Float.parseFloat(tablesVO.get("pages_free")+""))+"M", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, df.format(100-Float.parseFloat(tablesVO.get("percent_free")+""))+"%", p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
			      }
			 }
			 row = row+2;
			 //Informix数据库会话信息  
			 tmpLabel = new Label(0, row, "数据库会话信息     ", labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, "", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, "命中次数", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, "锁的数量 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, "顺序扫描访问数据的次数 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(6, row, "排序总数 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(7, row, "不适合内存排序数  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				List dbsession = (ArrayList)dbinfo.get("sessionList");//会话信息
				if (dbsession != null && dbsession.size()>0){
                	for(int i=0;i<dbsession.size();i++){
                		Hashtable tablesVO = (Hashtable)dbsession.get(i);
                		String seqscans = String.valueOf(tablesVO.get("seqscans"));
	            		if("null".equals(seqscans)){
	            			seqscans = "";
	            		}
	            		String total_sorts = String.valueOf(tablesVO.get("total_sorts"));
	            		if("null".equals(total_sorts)){
	            			total_sorts = "";
	            		}
	            		String dsksorts = String.valueOf(tablesVO.get("dsksorts"));
	            		if("null".equals(dsksorts)){
	            			dsksorts = "";
	            		}
						tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(3, row, tablesVO.get("access")+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(4, row, tablesVO.get("locksheld")+"", p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(5, row, seqscans, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(6, row, total_sorts, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(7, row, dsksorts, p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;
				      }
				 }
				
				row = row +2;
				 //Informix数据库锁信息
				 tmpLabel = new Label(0, row, "数据库锁信息    ", labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					tmpLabel = new Label(0, row, "", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(1, row, "用户名  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(2, row, "主机 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(3, row, "数据库名称", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(4, row, "表名称 ", b_labelFormat);
					sheet.addCell(tmpLabel);
					tmpLabel = new Label(5, row, "锁的类型  ", b_labelFormat);
					sheet.addCell(tmpLabel);
					row++;
					List dblock = (ArrayList)dbinfo.get("lockList");//锁信息
					 if (dblock != null && dblock.size()>0){
		             	for(int i=0;i<dblock.size();i++){
		             		Hashtable tablesVO = (Hashtable)dblock.get(i);
		             		String type = (String)tablesVO.get("type");
		             		String desc = "";
		             		if("B".equals(type)){
		             			desc = "字节锁";
		             		}else if("IS".equals(type)){
		             			desc = "意向共享锁";
		             		}else if("S".equals(type)){
		             			desc = "共享锁";
		             		}else if("XS".equals(type)){
		             			desc = "由可重复阅读器持有的共享键值";
		             		}else if("U".equals(type)){
		             			desc = "更新锁";
		             		}else if("IX".equals(type)){
		             			desc = "意向互斥锁";
		             		}else if("SIX".equals(type)){
		             			desc = "共享的意向互斥锁";
		             		}else if("X".equals(type)){
		             			desc = "互斥锁";
		             		}else if("XR".equals(type)){
		             			desc = "由可重复阅读器持有的互斥键值";
		             		}
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, (String)tablesVO.get("username"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, (String)tablesVO.get("hostname"), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, tablesVO.get("dbsname")+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, tablesVO.get("tabname")+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, desc, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
					      }
					 }
		    row = row+2;
		    
//Informix数据库日志信息  
		    tmpLabel = new Label(0, row, "数据库日志信息     ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "文件ID  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "日志文件的页数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "日志文件已用的页数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "是否被使用 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "是否是当前文件  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "是否已经备份过 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "是否已置于备份磁盘上  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row, "是否为临时日志文件  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			List dblog = (ArrayList)dbinfo.get("informixlog");//锁信息
			 if (dblog != null && dblog.size()>0){
	        	for(int i=0;i<dblog.size();i++){
	        		Hashtable tablesVO = (Hashtable)dblog.get(i);
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, String.valueOf(tablesVO.get("uniqid")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, String.valueOf(tablesVO.get("size")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, String.valueOf(tablesVO.get("used")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, String.valueOf(tablesVO.get("is_used")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, String.valueOf(tablesVO.get("is_current")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, String.valueOf(tablesVO.get("is_backed_up")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, String.valueOf(tablesVO.get("is_archived")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(8, row, String.valueOf(tablesVO.get("is_temp")), p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
			      }
			 row = row+2;
			 
			 //Informix数据库IO信息   
		    tmpLabel = new Label(0, row, "数据库IO信息 ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "块编号   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "物理读取数  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "读取的页数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "物理写入数 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "写入的页数  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(6, row, "物理读取（镜像）数  ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(7, row, "读取（镜像）的页数   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(8, row, "物理写入（镜像）数   ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(9, row, "写入（镜像）的页数    ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			List dbio = (ArrayList)dbinfo.get("iolist");//IO信息
			 if (dbio != null && dbio.size()>0){
            	for(int i=0;i<dbio.size();i++){
            		Hashtable tablesVO = (Hashtable)dbio.get(i);
							tmpLabel = new Label(0, row, (i+1)+"", p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, String.valueOf(tablesVO.get("chunknum")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(2, row, String.valueOf(tablesVO.get("reads")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(3, row, String.valueOf(tablesVO.get("pagesread")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(4, row, String.valueOf(tablesVO.get("writes")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(5, row, String.valueOf(tablesVO.get("pageswritten")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(6, row, String.valueOf(tablesVO.get("mreads")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(7, row, String.valueOf(tablesVO.get("mpagesread")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(8, row, String.valueOf(tablesVO.get("mwrites")), p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(9, row, String.valueOf(tablesVO.get("mpageswritten")), p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
						}
			      }
			 row = row+2;
			 
			 //事 件 汇 报 
			tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, reportHash.get("count")+"",
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
			//增加事件列表
			addEventListToExcel(sheet, row);
			 
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
						.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	//#####HONGLI 连通率报表打印和事件报表打印方法可以重用
	/**
	 * @author HONGLI 
	 * date 2010-11-11
	 * 连通率 doc格式报表 
	 */
	public void createReportPingDoc(String filename) {
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String dbtype = (String) reportHash.get("dbtype");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			//System.out.println("newi ========================"+newip);
			Paragraph title = new Paragraph(dbtype+"("+ip+")" + "可用性报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"+ "数据统计时间段:" + starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			Table aTable = new Table(4);
			float[] widths = { 220f, 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell("");
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new Cell(new Phrase((String) maxping.get("pingmax"),contextFont));
			cell = new Cell(new Phrase(reportHash.get("pingnow")+"%",contextFont));//HONGLI MODIFY   
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new Cell(new Phrase((String) maxping.get("ping"),contextFont));
			cell = new Cell(new Phrase(reportHash.get("pingmin")+"%",contextFont));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase(reportHash.get("avgpingcon")+"%",contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/"+ newip+ "ConnectUtilization" + ".png");
			document.add(aTable);
			document.add(img);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 
	 * date 2010-11-11
	 * 连通率 pdf格式报表
	 * @param filename
	 */
	public void createReportPingPdf(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light","UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			Font contextFont1 = new Font(bfChinese, 11, Font.NORMAL);
			String dbtype = (String) reportHash.get("dbtype");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(dbtype+"("+ip+")" + "可用性报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			document.add(title);
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
			Paragraph context = new Paragraph(contextString, contextFont1);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			PdfPTable aTable = new PdfPTable(4);
			float[] widths = { 220f, 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("当前连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(""));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("pingmax"))); 
			cell = new PdfPCell(new Phrase(reportHash.get("pingnow")+"%"));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
//			cell = new PdfPCell(new Phrase((String) maxping.get("ping")));
			cell = new PdfPCell(new Phrase(reportHash.get("pingmin")+"%"));//HONGLI MODIFY
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new PdfPCell(new Phrase(reportHash.get("avgpingcon")+"%"));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			// 设置图片
			Image img = Image.getInstance(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/"+ newip+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.MIDDLE);// 设置图片显示位置
			img.scalePercent(76);
			document.add(aTable);
			document.add(img);
			document.add(new Paragraph("\n"));
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
				document.add(img1);
			}
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @author HONGLI 
	 * 连通率 xls格式报表
	 * @param filename
	 */
	public void createReportPingExcel(String filename) {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			wb = Workbook.createWorkbook(new File(filename)); 
			String dbtype = (String) reportHash.get("dbtype");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			WritableSheet sheet = wb.createSheet(dbtype+"("+ip+")" + "可用性报表", 0);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			WritableFont labelFont = new WritableFont(WritableFont.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, dbtype+"("+ip+")" + "可用性报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "当前连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "最小连通率", _labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "平均连通率", _labelFormat);
			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),p_labelFormat);
			tmpLabel = new Label(1, 5, reportHash.get("pingnow")+"%",p_labelFormat);//HONGLI MODIFY
			sheet.addCell(tmpLabel);
//			tmpLabel = new Label(2, 5, (String) maxping.get("ping"),p_labelFormat);
			tmpLabel = new Label(2, 5, reportHash.get("pingmin")+"%",p_labelFormat);//HONGLI MODIFY
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, reportHash.get("avgpingcon")+"%",p_labelFormat);
			sheet.addCell(tmpLabel);
			// 设置图片
			File file = new File(ResourceCenter.getInstance().getSysPath()
					+ "/resource/image/jfreechart/" + newip + "ConnectUtilization" + ".png");
			// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
			sheet.addImage(new WritableImage(1, 6, 7, 7, file));
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	/**
	 * @author HONGLI 打印事件word报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_EventDoc(String filename) throws
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				RtfWriter2.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
						BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				DBVo vo = (DBVo) reportHash.get("vo");
				String downnum = (String)reportHash.get("downnum");
				String count = (Integer)reportHash.get("count")+"";
				
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "事件报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
			
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				Table dbTable = new Table(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidth(100); // 占页面宽度 90%
				dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
				dbTable.setAutoFillEmptyCells(true); // 自动填满
				dbTable.setBorderWidth(1); // 边框宽度
				dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
				dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
				dbTable.setSpacing(0);// 即单元格之间的间距
				dbTable.setBorder(2);// 边框
				dbTable.endHeaders();
				
				Cell cell = null;
				cell = new Cell(new Phrase("数据库信息",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase("数据库名称", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase("IP", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase("类型", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase("库空间超过阀值事件（次） ", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase(vo.getDbName(),contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase(ip,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase(typename,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase(downnum,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				cell = new Cell(new Phrase(count,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(cell);
				document.add(dbTable);
				
				addEventListToDoc(document, titleFont, contextFont);
			
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
	}
	
	/**
	 * @author HONGLI 打印事件报表excel格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_EventXls(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		WritableWorkbook wb = null;
		try {
			wb = Workbook.createWorkbook(new File(filename)); 
			String hostname = (String) reportHash.get("dbname");
			WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			DBVo vo = (DBVo) reportHash.get("vo");
			String downnum = (String)reportHash.get("downnum");
			String count = (Integer)reportHash.get("count")+"";
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			
			String newip = doip(ip);

			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat _labelFormat = new WritableCellFormat();
			_labelFormat.setBackground(jxl.format.Colour.GRAY_25);

			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);

			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			WritableCellFormat red_labelFormat = new WritableCellFormat();
			red_labelFormat.setBackground(jxl.format.Colour.RED);
			
			WritableCellFormat orange_labelFormat = new WritableCellFormat();
			orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
			
			WritableCellFormat yellow_labelFormat = new WritableCellFormat();
			yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);

			Label tmpLabel = null;
			tmpLabel = new Label(1, 0, hostname + "事件报表", labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
			sheet.addCell(tmpLabel);
			
			//数据库ip信息
			tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 4, "IP", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 4, "类型", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 4, "发生连通率事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 4, "库空间超过阀值事件（次）", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(0, 5, vo.getDbName(),
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, 5, ip,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, 5, typename,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, 5, downnum,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, 5, count,
					p_labelFormat);
			sheet.addCell(tmpLabel);
			
//			事件信息
			int row = 7;
			tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "登记人", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			int index = 0;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
		  	List list = (ArrayList)reportHash.get("list");
		  	if(list != null && list.size()>0){
			  	for(int i=0;i<list.size();i++){
			 	index++;
			  	EventList eventlist = (EventList)list.get(i);
			  	Date cc = eventlist.getRecordtime().getTime();
			  	Integer eventid = eventlist.getId();
			  	String eventlocation = eventlist.getEventlocation();
			  	String content = eventlist.getContent();
			  	String level = String.valueOf(eventlist.getLevel1());
			  	String status = String.valueOf(eventlist.getManagesign());
			  	String s = status;
				String showlevel = null;
			  	String act="处理报告";
			  	if("1".equals(level)){
			  		showlevel="普通事件";
			  	}
			  	if("2".equals(level)){
			  		showlevel="严重事件";
			  	}else{
				    showlevel="紧急告警";
				}
			   	  	if("0".equals(status)){
			  		status = "未处理";
			  	}
			  	if("1".equals(status)){
			  		status = "处理中";  	
			  	}
			  	if("2".equals(status)){
			  	  	status = "处理完成";
			  	}
			  	String rptman = eventlist.getReportman();
			  	String rtime1 = _sdf.format(cc);


			  	tmpLabel = new Label(0, row, String.valueOf(index),
						p_labelFormat);
				sheet.addCell(tmpLabel);
			  	if("3".equals(level)){
					tmpLabel = new Label(1, row, showlevel,
							red_labelFormat);
					sheet.addCell(tmpLabel);
			  	}else if("2".equals(level)){
			  		tmpLabel = new Label(1, row, showlevel,
			  				orange_labelFormat);
					sheet.addCell(tmpLabel);
			  	}else {
			  		tmpLabel = new Label(1, row, showlevel,
			  				yellow_labelFormat);
					sheet.addCell(tmpLabel);
			  	}
			  	tmpLabel = new Label(2, row, content,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, rtime1,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, rptman,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, status,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
			  	}
		  	}
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
				sheet.addImage(wi);
			}
			wb.write();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (wb != null)
					wb.close();
			} catch (Exception e) {
			}
		}
	}
	
	
	/**
	 * @author HONGLI 打印事件pdf报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReport_EventPdf(String filename)
			throws DocumentException, IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String ip = (String) reportHash.get("ip");
			String typename = (String) reportHash.get("typename");
			DBVo vo = (DBVo) reportHash.get("vo");
			String downnum = (String)reportHash.get("downnum");
			String count = (Integer)reportHash.get("count")+"";
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
			String hostname = (String) reportHash.get("dbname");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "事件报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			document.add(new Paragraph("\n"));
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			//数据库表
			PdfPTable dbTable = new PdfPTable(5);
			float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
			dbTable.setWidths(cellWidths);
			dbTable.setWidthPercentage(100);
			PdfPCell cell = null;
			cell = new PdfPCell(new Phrase("数据库信息",
					titleFont));
			cell.setColspan(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase("数据库名称", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase("IP", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase("类型", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase(ip,contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase(typename,contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase(downnum,contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			cell = new PdfPCell(new Phrase(count,contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			dbTable.addCell(cell);
			document.add(dbTable);
			document.add(new Paragraph("\n"));
			
			//事件列表
			PdfPTable eventTable = new PdfPTable(6);
			float[] eventWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件列表",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("编号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("事件等级 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("事件描述 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("登记日期", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("登记人 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new PdfPCell(new Phrase("处理状态 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			int index = 0;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
		  	List list = (ArrayList)reportHash.get("list");
		  	if(list != null && list.size()>0){
			  	for(int i=0;i<list.size();i++){
				 	index++;
				  	EventList eventlist = (EventList)list.get(i);
				  	Date cc = eventlist.getRecordtime().getTime();
				  	Integer eventid = eventlist.getId();
				  	String eventlocation = eventlist.getEventlocation();
				  	String content = eventlist.getContent();
				  	String level = String.valueOf(eventlist.getLevel1());
				  	String status = String.valueOf(eventlist.getManagesign());
				  	String s = status;
					String showlevel = null;
				  	String act="处理报告";
				  	if("1".equals(level)){
				  		showlevel="普通事件";
				  	}
				  	if("2".equals(level)){
				  		showlevel="严重事件";
				  	}else{
					    showlevel="紧急告警";
					}
				   	  	if("0".equals(status)){
				  		status = "未处理";
				  	}
				  	if("1".equals(status)){
				  		status = "处理中";  	
				  	}
				  	if("2".equals(status)){
				  	  	status = "处理完成";
				  	}
				  	String rptman = eventlist.getReportman();
				  	String rtime1 = _sdf.format(cc);
					cell = new PdfPCell(new Phrase(String.valueOf(index),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventTable.addCell(cell);
				  	if("3".equals(level)){
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.red);
						eventTable.addCell(cell);
				  	}else if("2".equals(level)){
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.orange);
						eventTable.addCell(cell);
				  	}else {
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.yellow);
						eventTable.addCell(cell);
				  	}
					cell = new PdfPCell(new Phrase(content,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rtime1,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rptman,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventTable.addCell(cell);
					cell = new PdfPCell(new Phrase(status,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventTable.addCell(cell);
			  	}
		  	}
			
			document.add(eventTable);
			document.close();
		} catch (Exception e) {
			// SysLogger.error("Error in ExcelReport.createReport()",e);
			e.printStackTrace();
		}
	}

	/**
	 * @author HONGLI   
	 * MySQL性能 doc格式报表
	 * @param filename
	 * @throws DocumentException
	 * @throws IOException
	 */
	public void createReportMySQLSelfDoc(String filename) throws DocumentException,
	IOException {
		if (impReport.getTable() == null) {
			fileName = null;
			return;
		}
		try {
			// 设置纸张大小
			Document document = new Document(PageSize.A4);
			// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
			RtfWriter2.getInstance(document, new FileOutputStream(filename));
			document.open();
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
					BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			String hostname = (String) reportHash.get("dbname");
			String ip = (String) reportHash.get("ip");
			String newip = doip(ip);
			Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
			// 设置标题格式对齐方式
			title.setAlignment(Element.ALIGN_CENTER);
			// title.setFont(titleFont);
			document.add(title);
			String Ping = (String) reportHash.get("Ping");
			String starttime = (String) reportHash.get("starttime");
			String totime = (String) reportHash.get("totime");
			Vector val = (Vector) reportHash.get("Val");
			Hashtable maxping = (Hashtable) reportHash.get("ping");
		
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
			String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
					+ "数据统计时间段:" + starttime + " 至 " + totime;
		
			Paragraph context = new Paragraph(contextString, contextFont);
			// 正文格式左对齐
			context.setAlignment(Element.ALIGN_LEFT);
			// context.setFont(contextFont);
			// 离上一段落（标题）空的行数
			context.setSpacingBefore(5);
			// 设置第一行空的列数
			context.setFirstLineIndent(5);
			document.add(context);
			/*
			 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
			 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
			 * starttime + " 至 " + totime);
			 */
			Table aTable = new Table(3);
			float[] widths = { 220f, 220f, 220f };
			aTable.setWidths(widths);
			aTable.setWidth(100); // 占页面宽度 90%
			aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable.setAutoFillEmptyCells(true); // 自动填满
			aTable.setBorderWidth(1); // 边框宽度
			aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable.setSpacing(0);// 即单元格之间的间距
			aTable.setBorder(2);// 边框
			aTable.endHeaders();
			Cell cell = null;
			cell = new Cell(new Phrase("连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("最小连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase("平均连通率", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingnow"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("pingmax"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
			cell = new Cell(new Phrase((String) maxping.get("avgpingcon"),
					contextFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable.addCell(cell);
		
			// 设置图片
		
			document.add(aTable);
			Image img = Image.getInstance(ResourceCenter.getInstance()
					.getSysPath()
					+ "/resource/image/jfreechart/"
					+ newip
					+ "ConnectUtilization" + ".png");
			img.setAlignment(Image.LEFT);//
			document.add(img);
		
			document.add(new Paragraph("\n"));
			Table aTable1 = new Table(2);
			float[] width = { 220f, 220f };
			aTable1.setWidths(width);
			aTable1.setWidth(100); // 占页面宽度 90%
			aTable1.setAlignment(Element.ALIGN_CENTER);// 居中显示
			aTable1.setAutoFillEmptyCells(true); // 自动填满
			aTable1.setBorderWidth(1); // 边框宽度
			aTable1.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			aTable1.setPadding(2);// 衬距，看效果就知道什么意思了
			aTable1.setSpacing(0);// 即单元格之间的间距
			aTable1.setBorder(2);// 边框
			cell = new Cell(new Phrase("数据库性能信息",
					titleFont));
			cell.setColspan(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			aTable1.addCell(cell);
			//数据库性能信息
			if(val != null && val.size()>0){
        		for(int i=0;i<val.size();i++){
        			Hashtable return_value = (Hashtable)val.get(i);
        			if(return_value != null && return_value.size()>0){
        				String name=return_value.get("variable_name").toString();
        				String value=return_value.get("value").toString();
        				if(name.equalsIgnoreCase("Max_used_connections"))
						{
						 name="服务器相应的最大连接数";
						}
						if(name.equalsIgnoreCase("Handler_read_first"))
						{
						 name="索引中第一条被读的次数";
						}
						if(name.equalsIgnoreCase("Handler_read_key"))
						{
						 name="根据键读一行的请求数";
						}
						if(name.equalsIgnoreCase("Handler_read_next"))
						{
						 name="按照键顺序读下一行的请求数";
						}
						if(name.equalsIgnoreCase("Handler_read_prev"))
						{
						 name="按照键顺序读前一行的请求数";
						}
						if(name.equalsIgnoreCase("Handler_read_rnd"))
						{
						 name="H根据固定位置读一行的请求数";
						}
						if(name.equalsIgnoreCase("Handler_read_rnd_next"))
						{
						 name="在数据文件中读下一行的请求数";
						}
						if(name.equalsIgnoreCase("Open_tables"))
						{
						 name="当前打开的表的数量";
						}
						if(name.equalsIgnoreCase("Opened_tables"))
						{
						 name="已经打开的表的数量";
						}
						if(name.equalsIgnoreCase("Threads_cached"))
						{
						 name="线程缓存内的线程的数量";
						}
						if(name.equalsIgnoreCase("Threads_connected"))
						{
						 name="当前打开的连接的数量";
						}
						if(name.equalsIgnoreCase("Threads_created"))
						{
						 name="创建用来处理连接的线程数";
						}
						if(name.equalsIgnoreCase("Threads_running"))
						{
						 name="激活的非睡眠状态的线程数";
						}
						if(name.equalsIgnoreCase("Table_locks_immediate"))
						{
						 name="立即获得的表的锁的次数";
						}
						if(name.equalsIgnoreCase("Table_locks_waited"))
						{
						 name="不能立即获得的表的锁的次数";
						}
						if(name.equalsIgnoreCase("Key_read_requests"))
						{
						 name="从缓存读键的数据块的请求数";
						}
						if(name.equalsIgnoreCase("Key_reads"))
						{
						 name="从硬盘读取键的数据块的次数";
						}
						if(name.equalsIgnoreCase("log_slow_queries"))
						{
						 name="是否记录慢查询";
						}
						if(name.equalsIgnoreCase("slow_launch_time"))
						{
						 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
						}
						cell = new Cell(new Phrase(name, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
						cell = new Cell(new Phrase(value, contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						aTable1.addCell(cell);
					}
				}
			}
			if (impReport.getChart() != null) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
							.getChart(), impReport.getChart().getWidth(),
							impReport.getChart().getHeight());
				} catch (IOException ioe) {
				}
				Image img1 = Image.getInstance(baos.toByteArray());
				img1.setAbsolutePosition(0, 0);
				img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
		
				document.add(img1);
			}
		
			document.add(aTable1);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
		 * @author HONGLI   
		 * MySQL性能 xls格式报表
		 * @param filename
		 * @throws DocumentException
		 * @throws IOException
		 */
		public void createReportMySQLSelfExcel(String filename) {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			WritableWorkbook wb = null;
			try {
				// fileName = ResourceCenter.getInstance().getSysPath() +
				// "temp\\dhcnms_report.xls";
				// fileName = CommonAppUtil.getAppName() +
				// "/temp/hostnms_report.xls";
				fileName = ResourceCenter.getInstance().getSysPath() + filename;
				wb = Workbook.createWorkbook(new File(fileName));
	
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String newip = doip(ip);
				WritableSheet sheet = wb.createSheet(hostname + "性能报表", 0);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
				Vector val = (Vector) reportHash.get("Val");
				Hashtable maxping = (Hashtable) reportHash.get("ping");
	
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
				WritableFont labelFont = new WritableFont(WritableFont
						.createFont("宋体"), 12, WritableFont.BOLD, false);
				WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
	
				WritableCellFormat _labelFormat = new WritableCellFormat();
				_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	
				WritableCellFormat p_labelFormat = new WritableCellFormat();
				p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	
				WritableCellFormat b_labelFormat = new WritableCellFormat();
				b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	
				Label tmpLabel = null;
				tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 4, "连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
	
				tmpLabel = new Label(1, 4, "最小连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 4, "平均连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
	
				tmpLabel = new Label(0, 5, (String) maxping.get("pingnow"),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 5, (String) maxping.get("pingmax"),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 5, (String) maxping.get("avgpingcon"),
						p_labelFormat);
				sheet.addCell(tmpLabel);
	
				// 设置图片
				File file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip
						+ "ConnectUtilization" + ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				// allRow = allRow+2;
				sheet.addImage(new WritableImage(1, 6, 7, 7, file));
				// allRow = allRow+7;
	
				tmpLabel = new Label(0, 14, " 数据库性能信息", b_labelFormat);
				sheet.addCell(tmpLabel);
				int row = 15;
				if(val != null && val.size()>0){
            		for(int i=0;i<val.size();i++){
            			Hashtable return_value = (Hashtable)val.get(i);
            			if(return_value != null && return_value.size()>0){
            				String name=return_value.get("variable_name").toString();
            				String value=return_value.get("value").toString();
            				if(name.equalsIgnoreCase("Max_used_connections"))
							{
							 name="服务器相应的最大连接数";
							}
							if(name.equalsIgnoreCase("Handler_read_first"))
							{
							 name="索引中第一条被读的次数";
							}
							if(name.equalsIgnoreCase("Handler_read_key"))
							{
							 name="根据键读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_next"))
							{
							 name="按照键顺序读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_prev"))
							{
							 name="按照键顺序读前一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd"))
							{
							 name="H根据固定位置读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd_next"))
							{
							 name="在数据文件中读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Open_tables"))
							{
							 name="当前打开的表的数量";
							}
							if(name.equalsIgnoreCase("Opened_tables"))
							{
							 name="已经打开的表的数量";
							}
							if(name.equalsIgnoreCase("Threads_cached"))
							{
							 name="线程缓存内的线程的数量";
							}
							if(name.equalsIgnoreCase("Threads_connected"))
							{
							 name="当前打开的连接的数量";
							}
							if(name.equalsIgnoreCase("Threads_created"))
							{
							 name="创建用来处理连接的线程数";
							}
							if(name.equalsIgnoreCase("Threads_running"))
							{
							 name="激活的非睡眠状态的线程数";
							}
							if(name.equalsIgnoreCase("Table_locks_immediate"))
							{
							 name="立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Table_locks_waited"))
							{
							 name="不能立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Key_read_requests"))
							{
							 name="从缓存读键的数据块的请求数";
							}
							if(name.equalsIgnoreCase("Key_reads"))
							{
							 name="从硬盘读取键的数据块的次数";
							}
							if(name.equalsIgnoreCase("log_slow_queries"))
							{
							 name="是否记录慢查询";
							}
							if(name.equalsIgnoreCase("slow_launch_time"))
							{
							 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
							}
							tmpLabel = new Label(0, row, name, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, value, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
					}
				}
				}
	
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos
							.toByteArray());
					sheet.addImage(wi);
				}
				wb.write();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			} finally {
				try {
					if (wb != null)
						wb.close();
				} catch (Exception e) {
				}
			}
		}

	/**
		 * @author HONGLI   
		 * MySQL性能 pdf格式报表
		 * @param filename
		 * @throws DocumentException
		 * @throws IOException
		 */
		public void createReportMySQLSelfPdf(String filename) throws DocumentException,
		IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				PdfWriter.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("STSong-Light",
						"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "性能报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
				Vector val = (Vector) reportHash.get("Val");
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				document.add(new Paragraph("\n"));
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				PdfPTable aTable = new PdfPTable(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidthPercentage(100);
				PdfPCell cell = null;
				cell = new PdfPCell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase((String) maxping.get("pingnow")));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase((String) maxping.get("pingmax")));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase((String) maxping.get("avgpingcon")));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
				img.setAlignment(Image.LEFT);//
				// 设置图片显示位置 document.add(aTable);
				img.scalePercent(76);
				document.add(aTable);
				document.add(img);
			
				document.add(new Paragraph("\n"));
				PdfPTable aTable1 = new PdfPTable(2);
				float[] width = { 220f, 220f };
				aTable1.setWidths(width);
				aTable1.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase(" 数据库性能信息    ",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable1.addCell(cell);
				if(val != null && val.size()>0){
            		for(int i=0;i<val.size();i++){
            			Hashtable return_value = (Hashtable)val.get(i);
            			if(return_value != null && return_value.size()>0){
            				String name=return_value.get("variable_name").toString();
            				String value=return_value.get("value").toString();
            				if(name.equalsIgnoreCase("Max_used_connections"))
							{
							 name="服务器相应的最大连接数";
							}
							if(name.equalsIgnoreCase("Handler_read_first"))
							{
							 name="索引中第一条被读的次数";
							}
							if(name.equalsIgnoreCase("Handler_read_key"))
							{
							 name="根据键读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_next"))
							{
							 name="按照键顺序读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_prev"))
							{
							 name="按照键顺序读前一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd"))
							{
							 name="H根据固定位置读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd_next"))
							{
							 name="在数据文件中读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Open_tables"))
							{
							 name="当前打开的表的数量";
							}
							if(name.equalsIgnoreCase("Opened_tables"))
							{
							 name="已经打开的表的数量";
							}
							if(name.equalsIgnoreCase("Threads_cached"))
							{
							 name="线程缓存内的线程的数量";
							}
							if(name.equalsIgnoreCase("Threads_connected"))
							{
							 name="当前打开的连接的数量";
							}
							if(name.equalsIgnoreCase("Threads_created"))
							{
							 name="创建用来处理连接的线程数";
							}
							if(name.equalsIgnoreCase("Threads_running"))
							{
							 name="激活的非睡眠状态的线程数";
							}
							if(name.equalsIgnoreCase("Table_locks_immediate"))
							{
							 name="立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Table_locks_waited"))
							{
							 name="不能立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Key_read_requests"))
							{
							 name="从缓存读键的数据块的请求数";
							}
							if(name.equalsIgnoreCase("Key_reads"))
							{
							 name="从硬盘读取键的数据块的次数";
							}
							if(name.equalsIgnoreCase("log_slow_queries"))
							{
							 name="是否记录慢查询";
							}
							if(name.equalsIgnoreCase("slow_launch_time"))
							{
							 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
							}
							cell = new PdfPCell(new Phrase(name,titleFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable1.addCell(cell);
							cell = new PdfPCell(new Phrase(value));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							aTable1.addCell(cell);
							// aTable1.endHeaders();
            			}
            		}
				}
			
			
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					Image img1 = Image.getInstance(baos.toByteArray());
					img1.setAbsolutePosition(0, 0);
					img1.setAlignment(Image.MIDDLE);// 设置图片显示位置
			
					document.add(img1);
				}
			
				document.add(aTable1);
				document.close();
			} catch (Exception e) {
				// TODO: handle exception
			}
			}

	/**
		 * @author HONGLI 打印MySQL综合性能word报表
		 * @param filename
		 * @throws DocumentException
		 * @throws IOException
		 */
		public void createReport_MySQLCldDoc(String filename) throws
			IOException {
				if (impReport.getTable() == null) {
					fileName = null;
					return;
				}
				try {
					// 设置纸张大小
					Document document = new Document(PageSize.A4);
					// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
					RtfWriter2.getInstance(document, new FileOutputStream(filename));
					document.open();
					// 设置中文字体
					BaseFont bfChinese = BaseFont.createFont("Times-Roman", "",
							BaseFont.NOT_EMBEDDED);
					// 标题字体风格
					Font titleFont = new Font(bfChinese, 12, Font.BOLD);
					// 正文字体风格
					Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
					String hostname = (String) reportHash.get("dbname");
					String ip = (String) reportHash.get("ip");
					String typename = (String) reportHash.get("typename");
					String runstr = (String) reportHash.get("runstr");
					String grade = (String) reportHash.get("grade");
					String pingnow = (String) reportHash.get("pingnow");
					String pingmin = (String) reportHash.get("pingmin");
					String pingconavg = (String) reportHash.get("pingconavg");
					DBVo vo = (DBVo) reportHash.get("vo");
					
					Vector val = (Vector)reportHash.get("Val");
					if(val == null){
						val = new Vector();	
					}
					List sessionlist = (ArrayList)reportHash.get("sessionlist");
					if(sessionlist == null) {
						sessionlist = new ArrayList();
					}
					Hashtable tablesHash = (Hashtable)reportHash.get("tablesHash");
					if(tablesHash == null) {
						tablesHash = new Hashtable();
					}
					Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
					if(tableinfo_v == null){
						tableinfo_v = new Vector();	
					}
					String newip = doip(ip);
					Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
					// 设置标题格式对齐方式
					title.setAlignment(Element.ALIGN_CENTER);
					// title.setFont(titleFont);
					document.add(title);
					String Ping = (String) reportHash.get("Ping");
					String starttime = (String) reportHash.get("starttime");
					String totime = (String) reportHash.get("totime");
				
					Hashtable maxping = (Hashtable) reportHash.get("ping");
				
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				
					String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
							+ "数据统计时间段:" + starttime + " 至 " + totime;
				
					Paragraph context = new Paragraph(contextString, contextFont);
					// 正文格式左对齐
					context.setAlignment(Element.ALIGN_LEFT);
					// context.setFont(contextFont);
					// 离上一段落（标题）空的行数
					context.setSpacingBefore(5);
					// 设置第一行空的列数
					context.setFirstLineIndent(5);
					document.add(context);
					/*
					 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
					 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
					 * starttime + " 至 " + totime);
					 */
					//数据库表
					Table dbTable = new Table(5);
					float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
					dbTable.setWidths(cellWidths);
					dbTable.setWidth(100); // 占页面宽度 90%
					dbTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					dbTable.setAutoFillEmptyCells(true); // 自动填满
					dbTable.setBorderWidth(1); // 边框宽度
					dbTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					dbTable.setPadding(2);// 衬距，看效果就知道什么意思了
					dbTable.setSpacing(0);// 即单元格之间的间距
					dbTable.setBorder(2);// 边框
					dbTable.endHeaders();
					
					Cell dbCell = null;
					dbCell = new Cell(new Phrase("数据库信息",
							titleFont));
					dbCell.setColspan(5);
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase("数据库名称", titleFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase("IP", titleFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase("类型", titleFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase("当前状态", titleFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase("运行评价", titleFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase(vo.getDbName(),contextFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase(ip,contextFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase(typename,contextFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase(runstr,contextFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					dbCell = new Cell(new Phrase(grade,contextFont));
					dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbTable.addCell(dbCell);
					
					
					Table aTable = new Table(3);
					float[] widths = { 220f, 220f, 220f };
					aTable.setWidths(widths);
					aTable.setWidth(100); // 占页面宽度 90%
					aTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					aTable.setAutoFillEmptyCells(true); // 自动填满
					aTable.setBorderWidth(1); // 边框宽度
					aTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					aTable.setPadding(2);// 衬距，看效果就知道什么意思了
					aTable.setSpacing(0);// 即单元格之间的间距
					aTable.setBorder(2);// 边框
					aTable.endHeaders();
					Cell cell = null;
					cell = new Cell(new Phrase("当前连通率", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase("最小连通率", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase("平均连通率", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(pingnow+"%",contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(pingmin+"%",contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
					cell = new Cell(new Phrase(pingconavg+"%",contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					aTable.addCell(cell);
				
					// 设置图片
					Image img = Image.getInstance(ResourceCenter.getInstance()
							.getSysPath()
							+ "/resource/image/jfreechart/"
							+ newip
							+ "ConnectUtilization" + ".png");
					img.setAbsolutePosition(0, 0);
					img.setAlignment(Image.LEFT);// 设置图片显示位置
					document.add(dbTable);
					document.add(aTable);
					document.add(img);
					document.add(new Paragraph("\n"));
					
					Table xnTable = new Table(2);
					float[] width = { 220f, 220f };
					xnTable.setWidths(width);
					xnTable.setWidth(100); // 占页面宽度 90%
					xnTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					xnTable.setAutoFillEmptyCells(true); // 自动填满
					xnTable.setBorderWidth(1); // 边框宽度
					xnTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					xnTable.setPadding(2);// 衬距，看效果就知道什么意思了
					xnTable.setSpacing(0);// 即单元格之间的间距
					xnTable.setBorder(2);// 边框
					cell = new Cell(new Phrase("数据库性能信息",
							titleFont));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					xnTable.addCell(cell);
					//数据库性能信息
					if(val != null && val.size()>0){
		        		for(int i=0;i<val.size();i++){
		        			Hashtable return_value = (Hashtable)val.get(i);
		        			if(return_value != null && return_value.size()>0){
		        				String name=return_value.get("variable_name").toString();
		        				String value=return_value.get("value").toString();
		        				if(name.equalsIgnoreCase("Max_used_connections"))
								{
								 name="服务器相应的最大连接数";
								}
								if(name.equalsIgnoreCase("Handler_read_first"))
								{
								 name="索引中第一条被读的次数";
								}
								if(name.equalsIgnoreCase("Handler_read_key"))
								{
								 name="根据键读一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_next"))
								{
								 name="按照键顺序读下一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_prev"))
								{
								 name="按照键顺序读前一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_rnd"))
								{
								 name="H根据固定位置读一行的请求数";
								}
								if(name.equalsIgnoreCase("Handler_read_rnd_next"))
								{
								 name="在数据文件中读下一行的请求数";
								}
								if(name.equalsIgnoreCase("Open_tables"))
								{
								 name="当前打开的表的数量";
								}
								if(name.equalsIgnoreCase("Opened_tables"))
								{
								 name="已经打开的表的数量";
								}
								if(name.equalsIgnoreCase("Threads_cached"))
								{
								 name="线程缓存内的线程的数量";
								}
								if(name.equalsIgnoreCase("Threads_connected"))
								{
								 name="当前打开的连接的数量";
								}
								if(name.equalsIgnoreCase("Threads_created"))
								{
								 name="创建用来处理连接的线程数";
								}
								if(name.equalsIgnoreCase("Threads_running"))
								{
								 name="激活的非睡眠状态的线程数";
								}
								if(name.equalsIgnoreCase("Table_locks_immediate"))
								{
								 name="立即获得的表的锁的次数";
								}
								if(name.equalsIgnoreCase("Table_locks_waited"))
								{
								 name="不能立即获得的表的锁的次数";
								}
								if(name.equalsIgnoreCase("Key_read_requests"))
								{
								 name="从缓存读键的数据块的请求数";
								}
								if(name.equalsIgnoreCase("Key_reads"))
								{
								 name="从硬盘读取键的数据块的次数";
								}
								if(name.equalsIgnoreCase("log_slow_queries"))
								{
								 name="是否记录慢查询";
								}
								if(name.equalsIgnoreCase("slow_launch_time"))
								{
								 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
								}
								cell = new Cell(new Phrase(name, contextFont));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								xnTable.addCell(cell);
								cell = new Cell(new Phrase(value, contextFont));
								cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
								cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
								xnTable.addCell(cell);
							}
						}
					}
					document.add(xnTable);
					
					
					
					
					//  连接信息 
					Table dbInfoTable = new Table(6);
					float[] dbInfoWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
					dbInfoTable.setWidths(dbInfoWidths);
					dbInfoTable.setWidth(100); // 占页面宽度 90%
					dbInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					dbInfoTable.setAutoFillEmptyCells(true); // 自动填满
					dbInfoTable.setBorderWidth(1); // 边框宽度
					dbInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					dbInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
					dbInfoTable.setSpacing(0);// 即单元格之间的间距
					dbInfoTable.setBorder(2);// 边框
					cell = new Cell(new Phrase("连 接 信 息",
							titleFont));
					cell.setColspan(6);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
	
					cell = new Cell(new Phrase("序号", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase("数据库", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase("用户名 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase("主机  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase("命令  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					cell = new Cell(new Phrase("连接时间", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					dbInfoTable.addCell(cell);
					 if(sessionlist != null && sessionlist.size()>0){
		                  	for(int i=0;i<sessionlist.size();i++){
		                  		List ipsessionlist = (List)sessionlist.get(i);
		                  		if(ipsessionlist != null && ipsessionlist.size()>0){
		                  			for(int k=0;k<ipsessionlist.size();k++){
		                  				String[] sessions = (String[])ipsessionlist.get(k);
		                  				if(sessions != null && sessions.length ==5){
											cell = new Cell(new Phrase((k+1)+"", contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
											cell = new Cell(new Phrase(sessions[4], contextFont)); 
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
											cell = new Cell(new Phrase(sessions[0], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
											cell = new Cell(new Phrase(sessions[1], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
											cell = new Cell(new Phrase(sessions[2], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
											cell = new Cell(new Phrase(sessions[3], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											dbInfoTable.addCell(cell);
		                  				}
		                  			}
		                  		}
		                  	}
					 }
					document.add(dbInfoTable);
					
					//表信息 
					Table tabTable = new Table(5);
					float[] sysInfoWidths = { 220f, 220f, 220f, 220f, 220f};
					dbInfoTable.setWidths(dbInfoWidths);
					tabTable.setWidth(100); // 占页面宽度 90%
					tabTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					tabTable.setAutoFillEmptyCells(true); // 自动填满
					tabTable.setBorderWidth(1); // 边框宽度
					tabTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					tabTable.setPadding(2);// 衬距，看效果就知道什么意思了
					tabTable.setSpacing(0);// 即单元格之间的间距
					tabTable.setBorder(2);// 边框
					Hashtable sysValue = (Hashtable)reportHash.get("sysValue");//内存信息
					cell = new Cell(new Phrase("表信息 ",
							titleFont));
					cell.setColspan(5);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
	
					cell = new Cell(new Phrase("序号 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
					cell = new Cell(new Phrase("表名 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
					cell = new Cell(new Phrase("表行数  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
					cell = new Cell(new Phrase("表大小 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
					cell = new Cell(new Phrase("创建时间 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					tabTable.addCell(cell);
					String[] dbs = vo.getDbName().split(","); 
	                  if(dbs != null && dbs.length>0){
	                  	for(int i=0;i<dbs.length;i++){
	                  		String dbStr = dbs[i];
	                  		//System.out.println(dbStr+"====="+tablesHash.size());
	                  		if(tablesHash.containsKey(dbStr)){
	                  			List tableslist = (List)tablesHash.get(dbStr);
	                  			if(tableslist != null && tableslist.size()>0){
			              			for(int k=0;k<tableslist.size();k++){
			              				String[] tables = (String[])tableslist.get(k);
			              				if(tables != null && tables.length ==4){
											cell = new Cell(new Phrase((k+1)+"", contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											tabTable.addCell(cell);
											cell = new Cell(new Phrase(tables[0], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											tabTable.addCell(cell);
											cell = new Cell(new Phrase(tables[1], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											tabTable.addCell(cell);
											cell = new Cell(new Phrase(tables[2], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											tabTable.addCell(cell);
											cell = new Cell(new Phrase(tables[3], contextFont));
											cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
											cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
											tabTable.addCell(cell);
			              				}
			              			}
	                  			}
	                  		}
	                  	}
	                  }
					document.add(tabTable);
					
//					数据库状态信息
					Table stateTable = new Table(3);
					float[] statewidth = { 220f, 220f, 220f};
					stateTable.setWidths(statewidth);
					stateTable.setWidth(100); // 占页面宽度 90%
					stateTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					stateTable.setAutoFillEmptyCells(true); // 自动填满
					stateTable.setBorderWidth(1); // 边框宽度
					stateTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					stateTable.setPadding(2);// 衬距，看效果就知道什么意思了
					stateTable.setSpacing(0);// 即单元格之间的间距
					stateTable.setBorder(2);// 边框
					cell = new Cell(new Phrase("数据库状态信息",
							titleFont));
					cell.setColspan(3);//HONGLILI
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					stateTable.addCell(cell);
					cell = new Cell(new Phrase("序号 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					stateTable.addCell(cell);
					cell = new Cell(new Phrase("名称 ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					stateTable.addCell(cell);
					cell = new Cell(new Phrase("状态信息  ", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					stateTable.addCell(cell);
					if(tableinfo_v != null)
					{
						for(int i=0;i<tableinfo_v.size();i++){
							Hashtable ht = (Hashtable)tableinfo_v.get(i);
							String size = ht.get("variable_name").toString();
							String free = ht.get("value").toString();
							if(size.equalsIgnoreCase("auto_increment_increment"))
							{
							 size="控制列中的值的增量值";
							}
							if(size.equalsIgnoreCase("auto_increment_offset"))
							{
							 size="确定AUTO_INCREMENT列值的起点";
							}
							if(size.equalsIgnoreCase("automatic_sp_privileges"))
							{
							 size="automatic_sp_privileges";
							}
							if(size.equalsIgnoreCase("back_log"))
							{
							 size="连接请求的数量";
							}
							if(size.equalsIgnoreCase("basedir"))
							{
							 size="MySQL安装基准目录";
							}
							if(size.equalsIgnoreCase("binlog_cache_size"))
							{
							 size="容纳二进制日志SQL语句的缓存大小";
							}
							if(size.equalsIgnoreCase("bulk_insert_buffer_size"))
							{
							 size="每线程的字节数限制缓存树的大小";
							}
							if(size.equalsIgnoreCase("character_set_client"))
							{
							 size="来自客户端的语句的字符集";
							}
							if(size.equalsIgnoreCase("character_set_connection"))
							{
							 size="没有字符集导入符的字符串转换";
							}
							if(size.equalsIgnoreCase("character_set_database"))
							{
							 size="默认数据库使用的字符集";
							}
							if(size.equalsIgnoreCase("character_set_filesystem"))
							{
							 size="character_set_filesystem";
							}
							if(size.equalsIgnoreCase("character_set_results"))
							{
							 size="用于向客户端返回查询结果的字符集";
							}
							if(size.equalsIgnoreCase("character_set_server"))
							{
							 size="服务器的默认字符集";
							}
							if(size.equalsIgnoreCase("character_set_system"))
							{
							 size="服务器用来保存识别符的字符集";
							}
							if(size.equalsIgnoreCase("character_sets_dir"))
							{
							 size="字符集安装目录";
							}
							if(size.equalsIgnoreCase("collation_connection"))
							{
							 size="连接字符集的校对规则";
							}
							if(size.equalsIgnoreCase("collation_database"))
							{
							 size="默认数据库使用的校对规则";
							}
							if(size.equalsIgnoreCase("collation_server"))
							{
							 size="服务器的默认校对规则";
							}
							if(size.equalsIgnoreCase("completion_type"))
							{
							 size="事务结束类型";
							}
							if(size.equalsIgnoreCase("concurrent_insert"))
							{
							 size="存储值情况";
							}
							if(size.equalsIgnoreCase("connect_timeout"))
							{
							 size="服务器用Bad handshake响应前等待连接包的秒数";
							}
							if(size.equalsIgnoreCase("datadir"))
							{
							 size="MySQL数据目录";
							}
							if(size.equalsIgnoreCase("date_format"))
							{
							 size="date_format(为被使用)";
							}
							if(size.equalsIgnoreCase("datetime_format"))
							{
							 size="datetime_format(为被使用)";
							}
							if(size.equalsIgnoreCase("default_week_format"))
							{
							 size="WEEK() 函数使用的默认模式";
							}
							if(size.equalsIgnoreCase("delay_key_write"))
							{
							 size="使用的DELAY_KEY_WRITE表选项的处理";
							}
							if(size.equalsIgnoreCase("delayed_insert_limit"))
							{
							 size="INSERT DELAYED处理器线程检查是否有挂起的SELECT语句";
							}
							if(size.equalsIgnoreCase("delayed_insert_timeout"))
							{
							 size="INSERT DELAYED处理器线程终止前应等待INSERT语句的时间";
							}
							if(size.equalsIgnoreCase("delayed_queue_size"))
							{
							 size="处理INSERT DELAYED语句时队列中行的数量限制";
							}
							if(size.equalsIgnoreCase("div_precision_increment"))
							{
							 size="用/操作符执行除操作的结果可增加的精确度的位数";
							}
							if(size.equalsIgnoreCase("engine_condition_pushdown"))
							{
							 size="适用于NDB的检测";
							}
							if(size.equalsIgnoreCase("expire_logs_days"))
							{
							 size="二进制日志自动删除的天数";
							}
							if(size.equalsIgnoreCase("flush"))
							{
							 size="flush选项启动mysqld值";
							}
							if(size.equalsIgnoreCase("flush_time"))
							{
							 size="查看释放资源情况";
							}
							if(size.equalsIgnoreCase("ft_boolean_syntax"))
							{
							 size="使用IN BOOLEAN MODE执行的布尔全文搜索支持的操作符系列";
							}
							if(size.equalsIgnoreCase("ft_max_word_len"))
							{
							 size="FULLTEXT索引中所包含的字的最大长度";
							}
							if(size.equalsIgnoreCase("ft_min_word_len"))
							{
							 size="FULLTEXT索引中所包含的字的最小长度";
							}
							if(size.equalsIgnoreCase("ft_query_expansion_limit"))
							{
							 size="使用WITH QUERY EXPANSION进行全文搜索的最大匹配数";
							}
							if(size.equalsIgnoreCase("ft_stopword_file"))
							{
							 size="用于读取全文搜索的停止字清单的文件";
							}
							if(size.equalsIgnoreCase("group_concat_max_len"))
							{
							 size="允许的GROUP_CONCAT()函数结果的最大长度";
							}
							if(size.equalsIgnoreCase("have_archive"))
							{
							 size="mysqld支持ARCHIVE表支持表情况";
							}
							if(size.equalsIgnoreCase("have_bdb"))
							{
							 size="mysqld支持BDB表情况";
							}
							if(size.equalsIgnoreCase("have_blackhole_engine"))
							{
							 size="mysqld支持BLACKHOLE表情况";
							}
							if(size.equalsIgnoreCase("have_compress"))
							{
							 size="是否zlib压缩库适合该服务器";
							}
							if(size.equalsIgnoreCase("have_crypt"))
							{
							 size="是否crypt()系统调用适合该服务器";
							}
							if(size.equalsIgnoreCase("have_csv"))
							{
							 size="mysqld支持ARCHIVE表情况";
							}
							if(size.equalsIgnoreCase("have_example_engine"))
							{
							 size="mysqld支持EXAMPLE表情况";
							}
							if(size.equalsIgnoreCase("have_federated_engine"))
							{
							 size="mysqld支持FEDERATED表情况";
							}
							if(size.equalsIgnoreCase("have_geometry"))
							{
							 size="是否服务器支持空间数据类型";
							}
							if(size.equalsIgnoreCase("have_innodb"))
							{
							 size="mysqld支持InnoDB表情况";
							}
							if(size.equalsIgnoreCase("have_isam"))
							{
							 size="向后兼容";
							}
							if(size.equalsIgnoreCase("have_ndbcluster"))
							{
							 size="mysqld支持NDB CLUSTER表情况";
							}
							if(size.equalsIgnoreCase("have_openssl"))
							{
							 size="mysqld支持客户端/服务器协议的SSL(加密)情况";
							}
							if(size.equalsIgnoreCase("have_query_cache"))
							{
							 size="mysqld支持查询缓存情况";
							}
							if(size.equalsIgnoreCase("have_raid"))
							{
							 size="mysqld支持RAID选项情况";
							}
							if(size.equalsIgnoreCase("have_rtree_keys"))
							{
							 size="RTREE索引是否可用";
							}
							if(size.equalsIgnoreCase("have_symlink"))
							{
							 size="是否启用符号链接支持";
							}
							if(size.equalsIgnoreCase("init_connect"))
							{
							 size="字符串处理";
							}
							if(size.equalsIgnoreCase("init_file"))
							{
							 size="启动服务器时用--init-file选项指定的文件名";
							}
							if(size.equalsIgnoreCase("init_slave"))
							{
							 size="SQL线程启动时从服务器应执行该字符串";
							}
							if(size.equalsIgnoreCase("innodb_additional_mem_pool_size"))
							{
							 size="InnoDB用来存储数据内存大小情况";
							}
							if(size.equalsIgnoreCase("innodb_autoextend_increment"))
							{
							 size="表空间被填满之时扩展表空间的尺寸";
							}
							if(size.equalsIgnoreCase("innodb_buffer_pool_awe_mem_mb"))
							{
							 size="缓冲池被放在32位Windows的AWE内存里缓存池大小";
							}
							if(size.equalsIgnoreCase("innodb_buffer_pool_size"))
							{
							 size="InnoDB用来缓存它的数据和索引的内存缓冲区的大小";
							}
							if(size.equalsIgnoreCase("innodb_checksums"))
							{
							 size="InnoDB在所有对磁盘的页面读取上的状态";
							}
							if(size.equalsIgnoreCase("innodb_commit_concurrency"))
							{
							 size="innodb_commit_concurrency";
							}
							if(size.equalsIgnoreCase("innodb_concurrency_tickets"))
							{
							 size="innodb_concurrency_tickets";
							}
							if(size.equalsIgnoreCase("innodb_data_file_path"))
							{
							 size="单独数据文件和它们尺寸的路径";
							}
							if(size.equalsIgnoreCase("innodb_data_home_dir"))
							{
							 size="目录路径对所有InnoDB数据文件的共同部分";
							}
							if(size.equalsIgnoreCase("innodb_doublewrite"))
							{
							 size="InnoDB存储所有数据情况";
							}
							if(size.equalsIgnoreCase("innodb_fast_shutdown"))
							{
							 size="InnoDB在关闭情况的值选择";
							}
							if(size.equalsIgnoreCase("innodb_file_io_threads"))
							{
							 size="InnoDB中文件I/O线程的数";
							}
							if(size.equalsIgnoreCase("innodb_file_per_table"))
							{
							 size="确定是否InnoDB用自己的.ibd文件为存储数据和索引创建每一个新表";
							}
							if(size.equalsIgnoreCase("innodb_flush_log_at_trx_commit"))
							{
							 size="InnoDB对日志操作情况";
							}
							if(size.equalsIgnoreCase("innodb_flush_method"))
							{
							 size="InnoDB使用fsync()来刷新数据和日志文件";
							}
							if(size.equalsIgnoreCase("innodb_force_recovery"))
							{
							 size="损坏的数据库转储表的方案";
							}
							if(size.equalsIgnoreCase("innodb_lock_wait_timeout"))
							{
							 size="InnoDB事务在被回滚之前可以等待一个锁定的超时秒数";
							}
							if(size.equalsIgnoreCase("innodb_locks_unsafe_for_binlog"))
							{
							 size="InnoDB搜索和索引扫描中关闭下一键锁定";
							}
							if(size.equalsIgnoreCase("innodb_log_arch_dir"))
							{
							 size="使用日志档案 被完整写入的日志文件所在的目录的归档值";
							}
							if(size.equalsIgnoreCase("innodb_log_archive"))
							{
							 size="日志处理情况";
							}
							if(size.equalsIgnoreCase("innodb_log_buffer_size"))
							{
							 size="InnoDB用来往磁盘上的日志文件写操作的缓冲区的大小";
							}
							if(size.equalsIgnoreCase("innodb_log_file_size"))
							{
							 size="日志组里每个日志文件的大小";
							}
							if(size.equalsIgnoreCase("innodb_log_files_in_group"))
							{
							 size="日志组里日志文件的数目";
							}
							if(size.equalsIgnoreCase("innodb_log_group_home_dir"))
							{
							 size="InnoDB日志文件的目录路径";
							}
							if(size.equalsIgnoreCase("innodb_max_dirty_pages_pct"))
							{
							 size="InnoDB中处理脏页的情况";
							}
							if(size.equalsIgnoreCase("innodb_max_purge_lag"))
							{
							 size="净化操作被滞后之时，如何延迟INSERT,UPDATE和DELETE操作";
							}
							if(size.equalsIgnoreCase("innodb_mirrored_log_groups"))
							{
							 size="为数据库保持的日志组内同样拷贝的数量";
							}
							if(size.equalsIgnoreCase("innodb_open_files"))
							{
							 size="定InnoDB一次可以保持打开的.ibd文件的最大数";
							}
							if(size.equalsIgnoreCase("innodb_support_xa"))
							{
							 size="InnoDB支持在XA事务中的双向提交情况";
							}
							if(size.equalsIgnoreCase("innodb_sync_spin_loops"))
							{
							 size="innodb_sync_spin_loops";
							}
							if(size.equalsIgnoreCase("innodb_table_locks"))
							{
							 size="InnoDB对表的锁定情况";
							}
							if(size.equalsIgnoreCase("innodb_thread_concurrency"))
							{
							 size="InnoDB试着在InnoDB内保持操作系统线程的数量少于或等于这个参数给出的限制范围";
							}
							if(size.equalsIgnoreCase("innodb_thread_sleep_delay"))
							{
							 size="让InnoDB为周期的SHOW INNODB STATUS输出创建一个文件<datadir>/innodb_status";
							}
							if(size.equalsIgnoreCase("interactive_timeout"))
							{
							 size="服务器关闭交互式连接前等待活动的秒数";
							}
							if(size.equalsIgnoreCase("join_buffer_size"))
							{
							 size="用于完全联接的缓冲区的大小";
							}
							if(size.equalsIgnoreCase("key_buffer_size"))
							{
							 size="索引块缓冲区的大小";
							}
							if(size.equalsIgnoreCase("key_cache_age_threshold"))
							{
							 size="控制将缓冲区从键值缓存热子链(sub-chain)降级到温子链(sub-chain)的值";
							}
							if(size.equalsIgnoreCase("key_cache_block_size"))
							{
							 size="键值缓存内块的字节大小";
							}
							if(size.equalsIgnoreCase("key_cache_division_limit"))
							{
							 size="键值缓存缓冲区链热子链和温子链的划分点";
							}
							if(size.equalsIgnoreCase("language"))
							{
							 size="错误消息所用语言";
							}
							if(size.equalsIgnoreCase("large_files_support"))
							{
							 size="mysqld编译时是否使用了大文件支持选项";
							}
							if(size.equalsIgnoreCase("large_page_size"))
							{
							 size="large_page_size";
							}
							if(size.equalsIgnoreCase("large_pages"))
							{
							 size="是否启用了大页面支持";
							}
							if(size.equalsIgnoreCase("license"))
							{
							 size="服务器的许可类型";
							}
							if(size.equalsIgnoreCase("local_infile"))
							{
							 size="是否LOCAL支持LOAD DATA INFILE语句";
							}
							if(size.equalsIgnoreCase("log"))
							{
							 size="是否启用将所有查询记录到常规查询日志中";
							}
							if(size.equalsIgnoreCase("log_bin"))
							{
							 size="是否启用二进制日志";
							}
							if(size.equalsIgnoreCase("log_bin_trust_function_creators"))
							{
							 size="是否可以信任保存的程序的作者不会创建向二进制日志写入不安全事件的程序";
							}
							if(size.equalsIgnoreCase("log_error"))
							{
							 size="错误日志的位置";
							}
							if(size.equalsIgnoreCase("log_slave_updates"))
							{
							 size="是否从服务器从主服务器收到的更新应记入从服务器自己的二进制日志";
							}
							if(size.equalsIgnoreCase("log_slow_queries"))
							{
							 size="是否记录慢查询";
							}
							if(size.equalsIgnoreCase("log_warnings"))
							{
							 size="是否产生其它警告消息";
							}
							if(size.equalsIgnoreCase("long_query_time"))
							{
							 size="查询时间超过该值，则增加Slow_queries状态变量";
							}
							if(size.equalsIgnoreCase("low_priority_updates"))
							{
							 size="表示sql语句等待语句将等待直到受影响的表没有挂起的SELECT或LOCK TABLE READ";
							}
							if(size.equalsIgnoreCase("lower_case_file_system"))
							{
							 size="说明是否数据目录所在的文件系统对文件名的大小写敏感";
							}
							if(size.equalsIgnoreCase("lower_case_table_names"))
							{
							 size="为1表示表名用小写保存到硬盘上，并且表名比较时不对大小写敏感";
							}
							if(size.equalsIgnoreCase("max_allowed_packet"))
							{
							 size="包或任何生成的/中间字符串的最大大小";
							}
							if(size.equalsIgnoreCase("max_binlog_cache_size"))
							{
							 size="多语句事务需要更大的内存时出现的情况";
							}
							if(size.equalsIgnoreCase("max_binlog_size"))
							{
							 size="多语句事务需要更大的内存时出现的情况";
							}
							if(size.equalsIgnoreCase("max_connect_errors"))
							{
							 size="断的与主机的连接的最大限制数";
							}
							if(size.equalsIgnoreCase("max_connections"))
							{
							 size="允许的并行客户端连接数目";
							}
							if(size.equalsIgnoreCase("max_delayed_threads"))
							{
							 size="启动线程来处理INSERT DELAYED语句的限制数";
							}
							if(size.equalsIgnoreCase("max_error_count"))
							{
							 size="存由SHOW ERRORS或SHOW WARNINGS显示的错误、警告和注解的最大数目";
							}
							if(size.equalsIgnoreCase("max_heap_table_size"))
							{
							 size="设置MEMORY (HEAP)表可以增长到的最大空间大小";
							}
							if(size.equalsIgnoreCase("max_insert_delayed_threads"))
							{
							 size="启动线程来处理INSERT DELAYED语句的限制数(同max_delayed_threads)";
							}
							if(size.equalsIgnoreCase("max_join_size"))
							{
							 size="不允许可能需要检查多于max_join_size行的情况";
							}
							if(size.equalsIgnoreCase("max_length_for_sort_data"))
							{
							 size="确定使用的filesort算法的索引值大小的限值";
							}
							if(size.equalsIgnoreCase("max_prepared_stmt_count"))
							{
							 size="max_prepared_stmt_count";
							}
							if(size.equalsIgnoreCase("max_relay_log_size"))
							{
							 size="如果复制从服务器写入中继日志时超出给定值，则滚动中继日";
							}
							if(size.equalsIgnoreCase("max_seeks_for_key"))
							{
							 size="限制根据键值寻找行时的最大搜索数";
							}
							if(size.equalsIgnoreCase("max_sort_length"))
							{
							 size="排序BLOB或TEXT值时使用的字节数";
							}
							if(size.equalsIgnoreCase("max_sp_recursion_depth"))
							{
							 size="max_sp_recursion_depth";
							}
							if(size.equalsIgnoreCase("max_tmp_tables"))
							{
							 size="客户端可以同时打开的临时表的最大数";
							}
							if(size.equalsIgnoreCase("max_user_connections"))
							{
							 size="给定的MySQL账户允许的最大同时连接数";
							}
							if(size.equalsIgnoreCase("max_write_lock_count"))
							{
							 size="超过写锁定限制后，允许部分读锁定";
							}
							if(size.equalsIgnoreCase("multi_range_count"))
							{
							 size="multi_range_count";
							}
							if(size.equalsIgnoreCase("myisam_data_pointer_size"))
							{
							 size="默认指针大小的值";
							}
							if(size.equalsIgnoreCase("myisam_max_sort_file_size"))
							{
							 size="重建MyISAM索引时，允许MySQL使用的临时文件的最大空间大小";
							}
							if(size.equalsIgnoreCase("myisam_recover_options"))
							{
							 size="myisam-recover选项的值";
							}
							if(size.equalsIgnoreCase("myisam_repair_threads"))
							{
							 size="如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引";
							}
							if(size.equalsIgnoreCase("myisam_sort_buffer_size"))
							{
							 size="在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序MyISAM索引分配的缓冲区";
							}
							if(size.equalsIgnoreCase("myisam_stats_method"))
							{
							 size="MyISAM表搜集关于索引值分发的统计信息时服务器如何处理NULL值";
							}
							if(size.equalsIgnoreCase("named_pipe"))
							{
							 size="明服务器是否支持命名管道连接";
							}
							if(size.equalsIgnoreCase("net_buffer_length"))
							{
							 size="在查询之间将通信缓冲区重设为该值";
							}
							if(size.equalsIgnoreCase("net_read_timeout"))
							{
							 size="中断读前等待连接的其它数据的秒数";
							}
							if(size.equalsIgnoreCase("net_retry_count"))
							{
							 size="表示某个通信端口的读操作中断了，在放弃前重试多次";
							}
							if(size.equalsIgnoreCase("net_write_timeout"))
							{
							 size="中断写之前等待块写入连接的秒数";
							}
							if(size.equalsIgnoreCase("new"))
							{
							 size="表示在MySQL 4.0中使用该变量来打开4.1中的一些行为，并用于向后兼容性";
							}
							if(size.equalsIgnoreCase("old_passwords"))
							{
							 size="是否服务器应为MySQL用户账户使用pre-4.1-style密码性";
							}
							if(size.equalsIgnoreCase("open_files_limit"))
							{
							 size="操作系统允许mysqld打开的文件的数量";
							}
							if(size.equalsIgnoreCase("optimizer_prune_level"))
							{
							 size="在查询优化从优化器搜索空间裁减低希望局部计划中使用的控制方法 0表示禁用方法";
							}
							if(size.equalsIgnoreCase("optimizer_search_depth"))
							{
							 size="查询优化器进行的搜索的最大深度";
							}
							if(size.equalsIgnoreCase("pid_file"))
							{
							 size="进程ID (PID)文件的路径名";
							}
							if(size.equalsIgnoreCase("prepared_stmt_count"))
							{
							 size="prepared_stmt_count";
							}
							if(size.equalsIgnoreCase("port"))
							{
							 size="服务器帧听TCP/IP连接所用端口";
							}
							if(size.equalsIgnoreCase("preload_buffer_size"))
							{
							 size="重载索引时分配的缓冲区大小";
							}
							if(size.equalsIgnoreCase("protocol_version"))
							{
							 size="MySQL服务器使用的客户端/服务器协议的版本";
							}
							if(size.equalsIgnoreCase("query_alloc_block_size"))
							{
							 size="为查询分析和执行过程中创建的对象分配的内存块大小";
							}
							if(size.equalsIgnoreCase("query_cache_limit"))
							{
							 size="不要缓存大于该值的结果";
							}
							if(size.equalsIgnoreCase("query_cache_min_res_unit"))
							{
							 size="查询缓存分配的最小块的大小(字节)";
							}
							if(size.equalsIgnoreCase("query_cache_size"))
							{
							 size="为缓存查询结果分配的内存的数量";
							}
							if(size.equalsIgnoreCase("query_cache_type"))
							{
							 size="设置查询缓存类型";
							}
							if(size.equalsIgnoreCase("query_cache_wlock_invalidate"))
							{
							 size="对表进行WRITE锁定的设置值";
							}
							if(size.equalsIgnoreCase("query_prealloc_size"))
							{
							 size="用于查询分析和执行的固定缓冲区的大小";
							}
							if(size.equalsIgnoreCase("range_alloc_block_size"))
							{
							 size="范围优化时分配的块的大小";
							}
							if(size.equalsIgnoreCase("read_buffer_size"))
							{
							 size="每个线程连续扫描时为扫描的每个表分配的缓冲区的大小(字节)";
							}
							if(size.equalsIgnoreCase("read_only"))
							{
							 size="变量对复制从服务器设置为ON时，服务器是否允许更新";
							}
							if(size.equalsIgnoreCase("read_only"))
							{
							 size="变量对复制从服务器设置为ON时，从服务器不允许更新";
							}
							if(size.equalsIgnoreCase("relay_log_purge"))
							{
							 size="当不再需要中继日志时禁用或启用自动清空中继日志";
							}
							if(size.equalsIgnoreCase("read_rnd_buffer_size"))
							{
							 size="当排序后按排序后的顺序读取行时，则通过该缓冲区读取行，避免搜索硬盘";
							}
							if(size.equalsIgnoreCase("secure_auth"))
							{
							 size="如果用--secure-auth选项启动了MySQL服务器，是否将阻塞有旧格式(4.1之前)密码的所有账户所发起的连接";
							}
							if(size.equalsIgnoreCase("shared_memory"))
							{
							 size="(只用于Windows)服务器是否允许共享内存连接";
							}
							if(size.equalsIgnoreCase("shared_memory_base_name"))
							{
							 size="(只用于Windows)说明服务器是否允许共享内存连接，并为共享内存设置识别符";
							}
							if(size.equalsIgnoreCase("server_id"))
							{
							 size="用于主复制服务器和从复制服务器";
							}
							if(size.equalsIgnoreCase("skip_external_locking"))
							{
							 size="mysqld是否使用外部锁定";
							}
							if(size.equalsIgnoreCase("skip_networking"))
							{
							 size="如果服务器只允许本地(非TCP/IP)连接";
							}
							if(size.equalsIgnoreCase("skip_show_database"))
							{
							 size="防止不具有SHOW DATABASES权限的人们使用SHOW DATABASES语句";
							}
							if(size.equalsIgnoreCase("slave_compressed_protocol"))
							{
							 size="如果主、从服务器均支持，确定是否使用从/主压缩协议";
							}
							if(size.equalsIgnoreCase("slave_load_tmpdir"))
							{
							 size="从服务器为复制LOAD DATA INFILE语句创建临时文件的目录名";
							}
							if(size.equalsIgnoreCase("slave_net_timeout"))
							{
							 size="放弃读操作前等待主/从连接的更多数据的等待秒数";
							}
							if(size.equalsIgnoreCase("slave_skip_errors"))
							{
							 size="从服务器应跳过(忽视)的复制错误";
							}
							if(size.equalsIgnoreCase("slave_transaction_retries"))
							{
							 size="复制从服务器SQL线程未能执行事务，在提示错误并停止前它自动重复slave_transaction_retries次";
							}
							if(size.equalsIgnoreCase("slow_launch_time"))
							{
							 size="如果创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
							}
							if(size.equalsIgnoreCase("sort_buffer_size"))
							{
							 size="每个排序线程分配的缓冲区的大小";
							}
							if(size.equalsIgnoreCase("sql_mode"))
							{
							 size="当前的服务器SQL模式，可以动态设置";
							}
							if(size.equalsIgnoreCase("storage_engine"))
							{
							 size="该变量是table_typeis的同义词。在MySQL 5.1中,首选storage_engine";
							}
							if(size.equalsIgnoreCase("sync_binlog"))
							{
							 size="如果为正，当每个sync_binlog'th写入该二进制日志后，MySQL服务器将它的二进制日志同步到硬盘上";
							}
							if(size.equalsIgnoreCase("sync_frm"))
							{
							 size="如果该变量设为1,当创建非临时表时它的.frm文件是否被同步到硬盘上";
							}
							if(size.equalsIgnoreCase("system_time_zone"))
							{
							 size="服务器系统时区";
							}
							if(size.equalsIgnoreCase("table_cache"))
							{
							 size="所有线程打开的表的数目";
							}
							if(size.equalsIgnoreCase("table_type"))
							{
							 size="默认表类型(存储引擎)";
							}
							if(size.equalsIgnoreCase("thread_cache_size"))
							{
							 size="服务器应缓存多少线程以便重新使用";
							}
							if(size.equalsIgnoreCase("thread_stack"))
							{
							 size="每个线程的堆栈大小";
							}
							if(size.equalsIgnoreCase("time_format"))
							{
							 size="该变量为使用";
							}
							if(size.equalsIgnoreCase("time_zone"))
							{
							 size="当前的时区";
							}
							if(size.equalsIgnoreCase("tmp_table_size"))
							{
							 size="如果内存内的临时表超过该值，MySQL自动将它转换为硬盘上的MyISAM表";
							}
							if(size.equalsIgnoreCase("tmpdir"))
							{
							 size="保存临时文件和临时表的目录";
							}
							if(size.equalsIgnoreCase("transaction_alloc_block_size"))
							{
							 size="为保存将保存到二进制日志中的事务的查询而分配的内存块的大小(字节)";
							}
							if(size.equalsIgnoreCase("transaction_prealloc_size"))
							{
							 size="transaction_alloc_blocks分配的固定缓冲区的大小（字节），在两次查询之间不会释放";
							}
							if(size.equalsIgnoreCase("tx_isolation"))
							{
							 size="默认事务隔离级别";
							}
							if(size.equalsIgnoreCase("updatable_views_with_limit"))
							{
							 size="该变量控制如果更新包含LIMIT子句，是否可以在当前表中使用不包含主关键字的视图进行更新";
							}
							if(size.equalsIgnoreCase("version"))
							{
							 size="服务器版本号";
							}
							if(size.equalsIgnoreCase("version_bdb"))
							{
							 size="BDB存储引擎版本";
							}
							if(size.equalsIgnoreCase("version_comment"))
							{
							 size="configure脚本有一个--with-comment选项，当构建MySQL时可以进行注释";
							}
							if(size.equalsIgnoreCase("version_compile_machine"))
							{
							 size="MySQL构建的机器或架构的类型";
							}
							if(size.equalsIgnoreCase("version_compile_os"))
							{
							 size="MySQL构建的操作系统的类型";
							}
							if(size.equalsIgnoreCase("wait_timeout"))
							{
							 size="服务器关闭非交互连接之前等待活动的秒数";
							}
							cell = new Cell(new Phrase(String.valueOf(i+1), contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							stateTable.addCell(cell);
							cell = new Cell(new Phrase(size, contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							stateTable.addCell(cell);
							cell = new Cell(new Phrase(free, contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							stateTable.addCell(cell);
							// stateTable.endHeaders();
						}
					}//HONGLILI
					document.add(stateTable);
					
					//事 件 汇 报 
					Table evenInfoTable = new Table(2);
					float[] evenInfoWidths = { 220f, 220f};
					evenInfoTable.setWidths(evenInfoWidths);
					evenInfoTable.setWidth(100); // 占页面宽度 90%
					evenInfoTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
					evenInfoTable.setAutoFillEmptyCells(true); // 自动填满
					evenInfoTable.setBorderWidth(1); // 边框宽度
					evenInfoTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
					evenInfoTable.setPadding(2);// 衬距，看效果就知道什么意思了
					evenInfoTable.setSpacing(0);// 即单元格之间的间距
					evenInfoTable.setBorder(2);// 边框
					String downnum = (String)reportHash.get("downnum");
					String count = (Integer)reportHash.get("count")+"";
					cell = new Cell(new Phrase("事件汇报",
							titleFont));
					cell.setColspan(2);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					evenInfoTable.addCell(cell);
					cell = new Cell(new Phrase("发生连通率事件（次）", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					evenInfoTable.addCell(cell);
					cell = new Cell(new Phrase("库空间超过阀值事件（次）", titleFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					evenInfoTable.addCell(cell);
					cell = new Cell(new Phrase(downnum, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					evenInfoTable.addCell(cell);
					cell = new Cell(new Phrase(count, contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					evenInfoTable.addCell(cell);
					document.add(evenInfoTable);
					
					//添加事件列表
					addEventListToDoc(document, titleFont, contextFont);
					document.close();
				} catch (Exception e) {
					// SysLogger.error("Error in ExcelReport.createReport()",e);
					e.printStackTrace();
				}
		}

	/**
		 * @author HONGLI 打印MySQL综合性能pdf报表
		 * @param filename
		 * @throws DocumentException
		 * @throws IOException
		 */
		public void createReport_MySQLCldPdf(String filename)
				throws DocumentException, IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			try {
				// 设置纸张大小
				Document document = new Document(PageSize.A4);
				// 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
				PdfWriter.getInstance(document, new FileOutputStream(filename));
				document.open();
				// 设置中文字体
				BaseFont bfChinese = BaseFont.createFont("STSong-Light",
						"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
				// 标题字体风格
				Font titleFont = new Font(bfChinese, 12, Font.BOLD);
				// 正文字体风格
				Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				Vector val = (Vector)reportHash.get("Val");
				if(val == null){
					val = new Vector();	
				}
				List sessionlist = (ArrayList)reportHash.get("sessionlist");
				if(sessionlist == null) {
					sessionlist = new ArrayList();
				}
				Hashtable tablesHash = (Hashtable)reportHash.get("tablesHash");
				if(tablesHash == null) {
					tablesHash = new Hashtable();
				}
				Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
				if(tableinfo_v == null){
					tableinfo_v = new Vector();	
				}
				String newip = doip(ip);
				Paragraph title = new Paragraph(hostname + "综合报表", titleFont);
				// 设置标题格式对齐方式
				title.setAlignment(Element.ALIGN_CENTER);
				// title.setFont(titleFont);
				document.add(title);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
			
				Hashtable maxping = (Hashtable) reportHash.get("ping");
			
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
				String contextString = "报表生成时间:" + impReport.getTimeStamp() + " \n"// 换行
						+ "数据统计时间段:" + starttime + " 至 " + totime;
			
				Paragraph context = new Paragraph(contextString, contextFont);
				// 正文格式左对齐
				context.setAlignment(Element.ALIGN_LEFT);
				// context.setFont(contextFont);
				// 离上一段落（标题）空的行数
				context.setSpacingBefore(5);
				// 设置第一行空的列数
				context.setFirstLineIndent(5);
				document.add(context);
				document.add(new Paragraph("\n"));
				/*
				 * tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				 * sheet.addCell(tmpLabel); tmpLabel = new Label(0, 2, "数据统计时间段: " +
				 * starttime + " 至 " + totime);
				 */
				//数据库表
				PdfPTable dbTable = new PdfPTable(5);
				float[] cellWidths = { 220f, 220f, 220f, 220f, 220f };
				dbTable.setWidths(cellWidths);
				dbTable.setWidthPercentage(100);
				PdfPCell dbCell = null;
				dbCell = new PdfPCell(new Phrase("数据库信息",
						titleFont));
				dbCell.setColspan(5);
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase("数据库名称", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase("IP", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase("类型", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase("当前状态", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase("运行评价", titleFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase(vo.getDbName(),contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase(ip,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase(typename,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase(runstr,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				dbCell = new PdfPCell(new Phrase(grade,contextFont));
				dbCell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				dbCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				dbTable.addCell(dbCell);
				
				
				PdfPTable aTable = new PdfPTable(3);
				float[] widths = { 220f, 220f, 220f };
				aTable.setWidths(widths);
				aTable.setWidthPercentage(100);
				PdfPCell cell = null;
				cell = new PdfPCell(new Phrase("连通率信息",
						titleFont));
				cell.setColspan(3);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase("当前连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase("最小连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase("平均连通率", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase(pingnow+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase(pingmin+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
				cell = new PdfPCell(new Phrase(pingconavg+"%",contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				aTable.addCell(cell);
			
				// 设置图片
				Image img = Image.getInstance(ResourceCenter.getInstance()
						.getSysPath()
						+ "/resource/image/jfreechart/"
						+ newip
						+ "ConnectUtilization" + ".png");
	//			img.setAbsolutePosition(0, 0);
				img.scalePercent(76);
				img.setAlignment(Image.MIDDLE);// 设置图片显示位置
				document.add(dbTable);
				document.add(new Paragraph("\n"));
				document.add(aTable);
				document.add(img);
				document.add(new Paragraph("\n"));
				
				//数据库性能信息
				PdfPTable xnTable = new PdfPTable(2);
				float[] width = { 220f, 220f };
				xnTable.setWidths(width);
				xnTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase(" 数据库性能信息    ",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				xnTable.addCell(cell);
				if(val != null && val.size()>0){
            		for(int i=0;i<val.size();i++){
            			Hashtable return_value = (Hashtable)val.get(i);
            			if(return_value != null && return_value.size()>0){
            				String name=return_value.get("variable_name").toString();
            				String value=return_value.get("value").toString();
            				if(name.equalsIgnoreCase("Max_used_connections"))
							{
							 name="服务器相应的最大连接数";
							}
							if(name.equalsIgnoreCase("Handler_read_first"))
							{
							 name="索引中第一条被读的次数";
							}
							if(name.equalsIgnoreCase("Handler_read_key"))
							{
							 name="根据键读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_next"))
							{
							 name="按照键顺序读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_prev"))
							{
							 name="按照键顺序读前一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd"))
							{
							 name="H根据固定位置读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd_next"))
							{
							 name="在数据文件中读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Open_tables"))
							{
							 name="当前打开的表的数量";
							}
							if(name.equalsIgnoreCase("Opened_tables"))
							{
							 name="已经打开的表的数量";
							}
							if(name.equalsIgnoreCase("Threads_cached"))
							{
							 name="线程缓存内的线程的数量";
							}
							if(name.equalsIgnoreCase("Threads_connected"))
							{
							 name="当前打开的连接的数量";
							}
							if(name.equalsIgnoreCase("Threads_created"))
							{
							 name="创建用来处理连接的线程数";
							}
							if(name.equalsIgnoreCase("Threads_running"))
							{
							 name="激活的非睡眠状态的线程数";
							}
							if(name.equalsIgnoreCase("Table_locks_immediate"))
							{
							 name="立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Table_locks_waited"))
							{
							 name="不能立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Key_read_requests"))
							{
							 name="从缓存读键的数据块的请求数";
							}
							if(name.equalsIgnoreCase("Key_reads"))
							{
							 name="从硬盘读取键的数据块的次数";
							}
							if(name.equalsIgnoreCase("log_slow_queries"))
							{
							 name="是否记录慢查询";
							}
							if(name.equalsIgnoreCase("slow_launch_time"))
							{
							 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
							}
							cell = new PdfPCell(new Phrase(name,titleFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							xnTable.addCell(cell);
							cell = new PdfPCell(new Phrase(value,contextFont));
							cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
							cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
							xnTable.addCell(cell);
							// xnTable.endHeaders();
            			}
            		}
				}
				document.add(xnTable);
				document.add(new Paragraph("\n"));
//				连接信息 
				PdfPTable connTable = new PdfPTable(6);
				float[] cwidth = { 220f, 220f , 220f, 220f, 220f, 220f};
				connTable.setWidths(cwidth);
				connTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase(" 连接信息     ",
						titleFont));
				cell.setColspan(6);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("序号",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("数据库",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("用户名 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("主机 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("命令 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				cell = new PdfPCell(new Phrase("连接时间",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				connTable.addCell(cell);
				if(sessionlist != null && sessionlist.size()>0){
                  	int rowI = 1;
					for(int i=0;i<sessionlist.size();i++){
                  		List ipsessionlist = (List)sessionlist.get(i);
                  		if(ipsessionlist != null && ipsessionlist.size()>0){
                  			for(int k=0;k<ipsessionlist.size();k++){
                  				String[] sessions = (String[])ipsessionlist.get(k);
                  				if(sessions != null && sessions.length ==5){
                  					cell = new PdfPCell(new Phrase(String.valueOf(rowI),contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									cell = new PdfPCell(new Phrase(sessions[4],contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									cell = new PdfPCell(new Phrase(sessions[0],contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									cell = new PdfPCell(new Phrase(sessions[1],contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									cell = new PdfPCell(new Phrase(sessions[2],contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									cell = new PdfPCell(new Phrase(sessions[3],contextFont));
									cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
									cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
									connTable.addCell(cell);
									// connTable.endHeaders();
									rowI++;
                  				}
                  			}
                  		}
                  	}
				}
				document.add(connTable);
				document.add(new Paragraph("\n"));
				//表信息 
				PdfPTable tabTable = new PdfPTable(5);
				float[] tabwidth = { 220f, 220f,220f, 220f , 220f};
				tabTable.setWidths(tabwidth);
				tabTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase(" 表信息     ",
						titleFont));
				cell.setColspan(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				cell = new PdfPCell(new Phrase("序号",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				cell = new PdfPCell(new Phrase("表名 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				cell = new PdfPCell(new Phrase("表行数 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				cell = new PdfPCell(new Phrase("表大小  ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				cell = new PdfPCell(new Phrase("创建时间 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				tabTable.addCell(cell);
				String[] dbs = vo.getDbName().split(","); 
                if(dbs != null && dbs.length>0){
                	int rowI = 1;
                	for(int i=0;i<dbs.length;i++){
                		String dbStr = dbs[i];
                		//System.out.println(dbStr+"====="+tablesHash.size());
                		if(tablesHash.containsKey(dbStr)){
                			List tableslist = (List)tablesHash.get(dbStr);
                			if(tableslist != null && tableslist.size()>0){
		              			for(int k=0;k<tableslist.size();k++){
		              				String[] tables = (String[])tableslist.get(k);
		              				if(tables != null && tables.length ==4){
										cell = new PdfPCell(new Phrase(String.valueOf(rowI),contextFont));
										cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
										cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
										tabTable.addCell(cell);
										cell = new PdfPCell(new Phrase(tables[0],contextFont));
										cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
										cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
										tabTable.addCell(cell);
										cell = new PdfPCell(new Phrase(tables[1],contextFont));
										cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
										cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
										tabTable.addCell(cell);
										cell = new PdfPCell(new Phrase(tables[2],contextFont));
										cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
										cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
										tabTable.addCell(cell);
										cell = new PdfPCell(new Phrase(tables[3],contextFont));
										cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
										cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
										tabTable.addCell(cell);
										// tabTable.endHeaders();
										rowI++;
		              				}
		              			}
                			}
                		}
                	}
                }
				document.add(tabTable);
				document.add(new Paragraph("\n"));
				
				//数据库状态信息
				PdfPTable stateTable = new PdfPTable(3);
				float[] swidth = { 220f, 220f,220f};
				stateTable.setWidths(swidth);
				stateTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase(" 数据库状态信息   ",
						titleFont));
				cell.setColspan(3);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				stateTable.addCell(cell);
				cell = new PdfPCell(new Phrase("序号",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				stateTable.addCell(cell);
				cell = new PdfPCell(new Phrase("名称 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				stateTable.addCell(cell);
				cell = new PdfPCell(new Phrase("状态信息 ",titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				stateTable.addCell(cell);
				if(tableinfo_v != null)
				{
					int rowI = 1;
					for(int i=0;i<tableinfo_v.size();i++){
						Hashtable ht = (Hashtable)tableinfo_v.get(i);
						String size = ht.get("variable_name").toString();
						String free = ht.get("value").toString();
						if(size.equalsIgnoreCase("auto_increment_increment"))
						{
						 size="控制列中的值的增量值";
						}
						if(size.equalsIgnoreCase("auto_increment_offset"))
						{
						 size="确定AUTO_INCREMENT列值的起点";
						}
						if(size.equalsIgnoreCase("automatic_sp_privileges"))
						{
						 size="automatic_sp_privileges";
						}
						if(size.equalsIgnoreCase("back_log"))
						{
						 size="连接请求的数量";
						}
						if(size.equalsIgnoreCase("basedir"))
						{
						 size="MySQL安装基准目录";
						}
						if(size.equalsIgnoreCase("binlog_cache_size"))
						{
						 size="容纳二进制日志SQL语句的缓存大小";
						}
						if(size.equalsIgnoreCase("bulk_insert_buffer_size"))
						{
						 size="每线程的字节数限制缓存树的大小";
						}
						if(size.equalsIgnoreCase("character_set_client"))
						{
						 size="来自客户端的语句的字符集";
						}
						if(size.equalsIgnoreCase("character_set_connection"))
						{
						 size="没有字符集导入符的字符串转换";
						}
						if(size.equalsIgnoreCase("character_set_database"))
						{
						 size="默认数据库使用的字符集";
						}
						if(size.equalsIgnoreCase("character_set_filesystem"))
						{
						 size="character_set_filesystem";
						}
						if(size.equalsIgnoreCase("character_set_results"))
						{
						 size="用于向客户端返回查询结果的字符集";
						}
						if(size.equalsIgnoreCase("character_set_server"))
						{
						 size="服务器的默认字符集";
						}
						if(size.equalsIgnoreCase("character_set_system"))
						{
						 size="服务器用来保存识别符的字符集";
						}
						if(size.equalsIgnoreCase("character_sets_dir"))
						{
						 size="字符集安装目录";
						}
						if(size.equalsIgnoreCase("collation_connection"))
						{
						 size="连接字符集的校对规则";
						}
						if(size.equalsIgnoreCase("collation_database"))
						{
						 size="默认数据库使用的校对规则";
						}
						if(size.equalsIgnoreCase("collation_server"))
						{
						 size="服务器的默认校对规则";
						}
						if(size.equalsIgnoreCase("completion_type"))
						{
						 size="事务结束类型";
						}
						if(size.equalsIgnoreCase("concurrent_insert"))
						{
						 size="存储值情况";
						}
						if(size.equalsIgnoreCase("connect_timeout"))
						{
						 size="服务器用Bad handshake响应前等待连接包的秒数";
						}
						if(size.equalsIgnoreCase("datadir"))
						{
						 size="MySQL数据目录";
						}
						if(size.equalsIgnoreCase("date_format"))
						{
						 size="date_format(为被使用)";
						}
						if(size.equalsIgnoreCase("datetime_format"))
						{
						 size="datetime_format(为被使用)";
						}
						if(size.equalsIgnoreCase("default_week_format"))
						{
						 size="WEEK() 函数使用的默认模式";
						}
						if(size.equalsIgnoreCase("delay_key_write"))
						{
						 size="使用的DELAY_KEY_WRITE表选项的处理";
						}
						if(size.equalsIgnoreCase("delayed_insert_limit"))
						{
						 size="INSERT DELAYED处理器线程检查是否有挂起的SELECT语句";
						}
						if(size.equalsIgnoreCase("delayed_insert_timeout"))
						{
						 size="INSERT DELAYED处理器线程终止前应等待INSERT语句的时间";
						}
						if(size.equalsIgnoreCase("delayed_queue_size"))
						{
						 size="处理INSERT DELAYED语句时队列中行的数量限制";
						}
						if(size.equalsIgnoreCase("div_precision_increment"))
						{
						 size="用/操作符执行除操作的结果可增加的精确度的位数";
						}
						if(size.equalsIgnoreCase("engine_condition_pushdown"))
						{
						 size="适用于NDB的检测";
						}
						if(size.equalsIgnoreCase("expire_logs_days"))
						{
						 size="二进制日志自动删除的天数";
						}
						if(size.equalsIgnoreCase("flush"))
						{
						 size="flush选项启动mysqld值";
						}
						if(size.equalsIgnoreCase("flush_time"))
						{
						 size="查看释放资源情况";
						}
						if(size.equalsIgnoreCase("ft_boolean_syntax"))
						{
						 size="使用IN BOOLEAN MODE执行的布尔全文搜索支持的操作符系列";
						}
						if(size.equalsIgnoreCase("ft_max_word_len"))
						{
						 size="FULLTEXT索引中所包含的字的最大长度";
						}
						if(size.equalsIgnoreCase("ft_min_word_len"))
						{
						 size="FULLTEXT索引中所包含的字的最小长度";
						}
						if(size.equalsIgnoreCase("ft_query_expansion_limit"))
						{
						 size="使用WITH QUERY EXPANSION进行全文搜索的最大匹配数";
						}
						if(size.equalsIgnoreCase("ft_stopword_file"))
						{
						 size="用于读取全文搜索的停止字清单的文件";
						}
						if(size.equalsIgnoreCase("group_concat_max_len"))
						{
						 size="允许的GROUP_CONCAT()函数结果的最大长度";
						}
						if(size.equalsIgnoreCase("have_archive"))
						{
						 size="mysqld支持ARCHIVE表支持表情况";
						}
						if(size.equalsIgnoreCase("have_bdb"))
						{
						 size="mysqld支持BDB表情况";
						}
						if(size.equalsIgnoreCase("have_blackhole_engine"))
						{
						 size="mysqld支持BLACKHOLE表情况";
						}
						if(size.equalsIgnoreCase("have_compress"))
						{
						 size="是否zlib压缩库适合该服务器";
						}
						if(size.equalsIgnoreCase("have_crypt"))
						{
						 size="是否crypt()系统调用适合该服务器";
						}
						if(size.equalsIgnoreCase("have_csv"))
						{
						 size="mysqld支持ARCHIVE表情况";
						}
						if(size.equalsIgnoreCase("have_example_engine"))
						{
						 size="mysqld支持EXAMPLE表情况";
						}
						if(size.equalsIgnoreCase("have_federated_engine"))
						{
						 size="mysqld支持FEDERATED表情况";
						}
						if(size.equalsIgnoreCase("have_geometry"))
						{
						 size="是否服务器支持空间数据类型";
						}
						if(size.equalsIgnoreCase("have_innodb"))
						{
						 size="mysqld支持InnoDB表情况";
						}
						if(size.equalsIgnoreCase("have_isam"))
						{
						 size="向后兼容";
						}
						if(size.equalsIgnoreCase("have_ndbcluster"))
						{
						 size="mysqld支持NDB CLUSTER表情况";
						}
						if(size.equalsIgnoreCase("have_openssl"))
						{
						 size="mysqld支持客户端/服务器协议的SSL(加密)情况";
						}
						if(size.equalsIgnoreCase("have_query_cache"))
						{
						 size="mysqld支持查询缓存情况";
						}
						if(size.equalsIgnoreCase("have_raid"))
						{
						 size="mysqld支持RAID选项情况";
						}
						if(size.equalsIgnoreCase("have_rtree_keys"))
						{
						 size="RTREE索引是否可用";
						}
						if(size.equalsIgnoreCase("have_symlink"))
						{
						 size="是否启用符号链接支持";
						}
						if(size.equalsIgnoreCase("init_connect"))
						{
						 size="字符串处理";
						}
						if(size.equalsIgnoreCase("init_file"))
						{
						 size="启动服务器时用--init-file选项指定的文件名";
						}
						if(size.equalsIgnoreCase("init_slave"))
						{
						 size="SQL线程启动时从服务器应执行该字符串";
						}
						if(size.equalsIgnoreCase("innodb_additional_mem_pool_size"))
						{
						 size="InnoDB用来存储数据内存大小情况";
						}
						if(size.equalsIgnoreCase("innodb_autoextend_increment"))
						{
						 size="表空间被填满之时扩展表空间的尺寸";
						}
						if(size.equalsIgnoreCase("innodb_buffer_pool_awe_mem_mb"))
						{
						 size="缓冲池被放在32位Windows的AWE内存里缓存池大小";
						}
						if(size.equalsIgnoreCase("innodb_buffer_pool_size"))
						{
						 size="InnoDB用来缓存它的数据和索引的内存缓冲区的大小";
						}
						if(size.equalsIgnoreCase("innodb_checksums"))
						{
						 size="InnoDB在所有对磁盘的页面读取上的状态";
						}
						if(size.equalsIgnoreCase("innodb_commit_concurrency"))
						{
						 size="innodb_commit_concurrency";
						}
						if(size.equalsIgnoreCase("innodb_concurrency_tickets"))
						{
						 size="innodb_concurrency_tickets";
						}
						if(size.equalsIgnoreCase("innodb_data_file_path"))
						{
						 size="单独数据文件和它们尺寸的路径";
						}
						if(size.equalsIgnoreCase("innodb_data_home_dir"))
						{
						 size="目录路径对所有InnoDB数据文件的共同部分";
						}
						if(size.equalsIgnoreCase("innodb_doublewrite"))
						{
						 size="InnoDB存储所有数据情况";
						}
						if(size.equalsIgnoreCase("innodb_fast_shutdown"))
						{
						 size="InnoDB在关闭情况的值选择";
						}
						if(size.equalsIgnoreCase("innodb_file_io_threads"))
						{
						 size="InnoDB中文件I/O线程的数";
						}
						if(size.equalsIgnoreCase("innodb_file_per_table"))
						{
						 size="确定是否InnoDB用自己的.ibd文件为存储数据和索引创建每一个新表";
						}
						if(size.equalsIgnoreCase("innodb_flush_log_at_trx_commit"))
						{
						 size="InnoDB对日志操作情况";
						}
						if(size.equalsIgnoreCase("innodb_flush_method"))
						{
						 size="InnoDB使用fsync()来刷新数据和日志文件";
						}
						if(size.equalsIgnoreCase("innodb_force_recovery"))
						{
						 size="损坏的数据库转储表的方案";
						}
						if(size.equalsIgnoreCase("innodb_lock_wait_timeout"))
						{
						 size="InnoDB事务在被回滚之前可以等待一个锁定的超时秒数";
						}
						if(size.equalsIgnoreCase("innodb_locks_unsafe_for_binlog"))
						{
						 size="InnoDB搜索和索引扫描中关闭下一键锁定";
						}
						if(size.equalsIgnoreCase("innodb_log_arch_dir"))
						{
						 size="使用日志档案 被完整写入的日志文件所在的目录的归档值";
						}
						if(size.equalsIgnoreCase("innodb_log_archive"))
						{
						 size="日志处理情况";
						}
						if(size.equalsIgnoreCase("innodb_log_buffer_size"))
						{
						 size="InnoDB用来往磁盘上的日志文件写操作的缓冲区的大小";
						}
						if(size.equalsIgnoreCase("innodb_log_file_size"))
						{
						 size="日志组里每个日志文件的大小";
						}
						if(size.equalsIgnoreCase("innodb_log_files_in_group"))
						{
						 size="日志组里日志文件的数目";
						}
						if(size.equalsIgnoreCase("innodb_log_group_home_dir"))
						{
						 size="InnoDB日志文件的目录路径";
						}
						if(size.equalsIgnoreCase("innodb_max_dirty_pages_pct"))
						{
						 size="InnoDB中处理脏页的情况";
						}
						if(size.equalsIgnoreCase("innodb_max_purge_lag"))
						{
						 size="净化操作被滞后之时，如何延迟INSERT,UPDATE和DELETE操作";
						}
						if(size.equalsIgnoreCase("innodb_mirrored_log_groups"))
						{
						 size="为数据库保持的日志组内同样拷贝的数量";
						}
						if(size.equalsIgnoreCase("innodb_open_files"))
						{
						 size="定InnoDB一次可以保持打开的.ibd文件的最大数";
						}
						if(size.equalsIgnoreCase("innodb_support_xa"))
						{
						 size="InnoDB支持在XA事务中的双向提交情况";
						}
						if(size.equalsIgnoreCase("innodb_sync_spin_loops"))
						{
						 size="innodb_sync_spin_loops";
						}
						if(size.equalsIgnoreCase("innodb_table_locks"))
						{
						 size="InnoDB对表的锁定情况";
						}
						if(size.equalsIgnoreCase("innodb_thread_concurrency"))
						{
						 size="InnoDB试着在InnoDB内保持操作系统线程的数量少于或等于这个参数给出的限制范围";
						}
						if(size.equalsIgnoreCase("innodb_thread_sleep_delay"))
						{
						 size="让InnoDB为周期的SHOW INNODB STATUS输出创建一个文件<datadir>/innodb_status";
						}
						if(size.equalsIgnoreCase("interactive_timeout"))
						{
						 size="服务器关闭交互式连接前等待活动的秒数";
						}
						if(size.equalsIgnoreCase("join_buffer_size"))
						{
						 size="用于完全联接的缓冲区的大小";
						}
						if(size.equalsIgnoreCase("key_buffer_size"))
						{
						 size="索引块缓冲区的大小";
						}
						if(size.equalsIgnoreCase("key_cache_age_threshold"))
						{
						 size="控制将缓冲区从键值缓存热子链(sub-chain)降级到温子链(sub-chain)的值";
						}
						if(size.equalsIgnoreCase("key_cache_block_size"))
						{
						 size="键值缓存内块的字节大小";
						}
						if(size.equalsIgnoreCase("key_cache_division_limit"))
						{
						 size="键值缓存缓冲区链热子链和温子链的划分点";
						}
						if(size.equalsIgnoreCase("language"))
						{
						 size="错误消息所用语言";
						}
						if(size.equalsIgnoreCase("large_files_support"))
						{
						 size="mysqld编译时是否使用了大文件支持选项";
						}
						if(size.equalsIgnoreCase("large_page_size"))
						{
						 size="large_page_size";
						}
						if(size.equalsIgnoreCase("large_pages"))
						{
						 size="是否启用了大页面支持";
						}
						if(size.equalsIgnoreCase("license"))
						{
						 size="服务器的许可类型";
						}
						if(size.equalsIgnoreCase("local_infile"))
						{
						 size="是否LOCAL支持LOAD DATA INFILE语句";
						}
						if(size.equalsIgnoreCase("log"))
						{
						 size="是否启用将所有查询记录到常规查询日志中";
						}
						if(size.equalsIgnoreCase("log_bin"))
						{
						 size="是否启用二进制日志";
						}
						if(size.equalsIgnoreCase("log_bin_trust_function_creators"))
						{
						 size="是否可以信任保存的程序的作者不会创建向二进制日志写入不安全事件的程序";
						}
						if(size.equalsIgnoreCase("log_error"))
						{
						 size="错误日志的位置";
						}
						if(size.equalsIgnoreCase("log_slave_updates"))
						{
						 size="是否从服务器从主服务器收到的更新应记入从服务器自己的二进制日志";
						}
						if(size.equalsIgnoreCase("log_slow_queries"))
						{
						 size="是否记录慢查询";
						}
						if(size.equalsIgnoreCase("log_warnings"))
						{
						 size="是否产生其它警告消息";
						}
						if(size.equalsIgnoreCase("long_query_time"))
						{
						 size="查询时间超过该值，则增加Slow_queries状态变量";
						}
						if(size.equalsIgnoreCase("low_priority_updates"))
						{
						 size="表示sql语句等待语句将等待直到受影响的表没有挂起的SELECT或LOCK TABLE READ";
						}
						if(size.equalsIgnoreCase("lower_case_file_system"))
						{
						 size="说明是否数据目录所在的文件系统对文件名的大小写敏感";
						}
						if(size.equalsIgnoreCase("lower_case_table_names"))
						{
						 size="为1表示表名用小写保存到硬盘上，并且表名比较时不对大小写敏感";
						}
						if(size.equalsIgnoreCase("max_allowed_packet"))
						{
						 size="包或任何生成的/中间字符串的最大大小";
						}
						if(size.equalsIgnoreCase("max_binlog_cache_size"))
						{
						 size="多语句事务需要更大的内存时出现的情况";
						}
						if(size.equalsIgnoreCase("max_binlog_size"))
						{
						 size="多语句事务需要更大的内存时出现的情况";
						}
						if(size.equalsIgnoreCase("max_connect_errors"))
						{
						 size="断的与主机的连接的最大限制数";
						}
						if(size.equalsIgnoreCase("max_connections"))
						{
						 size="允许的并行客户端连接数目";
						}
						if(size.equalsIgnoreCase("max_delayed_threads"))
						{
						 size="启动线程来处理INSERT DELAYED语句的限制数";
						}
						if(size.equalsIgnoreCase("max_error_count"))
						{
						 size="存由SHOW ERRORS或SHOW WARNINGS显示的错误、警告和注解的最大数目";
						}
						if(size.equalsIgnoreCase("max_heap_table_size"))
						{
						 size="设置MEMORY (HEAP)表可以增长到的最大空间大小";
						}
						if(size.equalsIgnoreCase("max_insert_delayed_threads"))
						{
						 size="启动线程来处理INSERT DELAYED语句的限制数(同max_delayed_threads)";
						}
						if(size.equalsIgnoreCase("max_join_size"))
						{
						 size="不允许可能需要检查多于max_join_size行的情况";
						}
						if(size.equalsIgnoreCase("max_length_for_sort_data"))
						{
						 size="确定使用的filesort算法的索引值大小的限值";
						}
						if(size.equalsIgnoreCase("max_prepared_stmt_count"))
						{
						 size="max_prepared_stmt_count";
						}
						if(size.equalsIgnoreCase("max_relay_log_size"))
						{
						 size="如果复制从服务器写入中继日志时超出给定值，则滚动中继日";
						}
						if(size.equalsIgnoreCase("max_seeks_for_key"))
						{
						 size="限制根据键值寻找行时的最大搜索数";
						}
						if(size.equalsIgnoreCase("max_sort_length"))
						{
						 size="排序BLOB或TEXT值时使用的字节数";
						}
						if(size.equalsIgnoreCase("max_sp_recursion_depth"))
						{
						 size="max_sp_recursion_depth";
						}
						if(size.equalsIgnoreCase("max_tmp_tables"))
						{
						 size="客户端可以同时打开的临时表的最大数";
						}
						if(size.equalsIgnoreCase("max_user_connections"))
						{
						 size="给定的MySQL账户允许的最大同时连接数";
						}
						if(size.equalsIgnoreCase("max_write_lock_count"))
						{
						 size="超过写锁定限制后，允许部分读锁定";
						}
						if(size.equalsIgnoreCase("multi_range_count"))
						{
						 size="multi_range_count";
						}
						if(size.equalsIgnoreCase("myisam_data_pointer_size"))
						{
						 size="默认指针大小的值";
						}
						if(size.equalsIgnoreCase("myisam_max_sort_file_size"))
						{
						 size="重建MyISAM索引时，允许MySQL使用的临时文件的最大空间大小";
						}
						if(size.equalsIgnoreCase("myisam_recover_options"))
						{
						 size="myisam-recover选项的值";
						}
						if(size.equalsIgnoreCase("myisam_repair_threads"))
						{
						 size="如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引";
						}
						if(size.equalsIgnoreCase("myisam_sort_buffer_size"))
						{
						 size="在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序MyISAM索引分配的缓冲区";
						}
						if(size.equalsIgnoreCase("myisam_stats_method"))
						{
						 size="MyISAM表搜集关于索引值分发的统计信息时服务器如何处理NULL值";
						}
						if(size.equalsIgnoreCase("named_pipe"))
						{
						 size="明服务器是否支持命名管道连接";
						}
						if(size.equalsIgnoreCase("net_buffer_length"))
						{
						 size="在查询之间将通信缓冲区重设为该值";
						}
						if(size.equalsIgnoreCase("net_read_timeout"))
						{
						 size="中断读前等待连接的其它数据的秒数";
						}
						if(size.equalsIgnoreCase("net_retry_count"))
						{
						 size="表示某个通信端口的读操作中断了，在放弃前重试多次";
						}
						if(size.equalsIgnoreCase("net_write_timeout"))
						{
						 size="中断写之前等待块写入连接的秒数";
						}
						if(size.equalsIgnoreCase("new"))
						{
						 size="表示在MySQL 4.0中使用该变量来打开4.1中的一些行为，并用于向后兼容性";
						}
						if(size.equalsIgnoreCase("old_passwords"))
						{
						 size="是否服务器应为MySQL用户账户使用pre-4.1-style密码性";
						}
						if(size.equalsIgnoreCase("open_files_limit"))
						{
						 size="操作系统允许mysqld打开的文件的数量";
						}
						if(size.equalsIgnoreCase("optimizer_prune_level"))
						{
						 size="在查询优化从优化器搜索空间裁减低希望局部计划中使用的控制方法 0表示禁用方法";
						}
						if(size.equalsIgnoreCase("optimizer_search_depth"))
						{
						 size="查询优化器进行的搜索的最大深度";
						}
						if(size.equalsIgnoreCase("pid_file"))
						{
						 size="进程ID (PID)文件的路径名";
						}
						if(size.equalsIgnoreCase("prepared_stmt_count"))
						{
						 size="prepared_stmt_count";
						}
						if(size.equalsIgnoreCase("port"))
						{
						 size="服务器帧听TCP/IP连接所用端口";
						}
						if(size.equalsIgnoreCase("preload_buffer_size"))
						{
						 size="重载索引时分配的缓冲区大小";
						}
						if(size.equalsIgnoreCase("protocol_version"))
						{
						 size="MySQL服务器使用的客户端/服务器协议的版本";
						}
						if(size.equalsIgnoreCase("query_alloc_block_size"))
						{
						 size="为查询分析和执行过程中创建的对象分配的内存块大小";
						}
						if(size.equalsIgnoreCase("query_cache_limit"))
						{
						 size="不要缓存大于该值的结果";
						}
						if(size.equalsIgnoreCase("query_cache_min_res_unit"))
						{
						 size="查询缓存分配的最小块的大小(字节)";
						}
						if(size.equalsIgnoreCase("query_cache_size"))
						{
						 size="为缓存查询结果分配的内存的数量";
						}
						if(size.equalsIgnoreCase("query_cache_type"))
						{
						 size="设置查询缓存类型";
						}
						if(size.equalsIgnoreCase("query_cache_wlock_invalidate"))
						{
						 size="对表进行WRITE锁定的设置值";
						}
						if(size.equalsIgnoreCase("query_prealloc_size"))
						{
						 size="用于查询分析和执行的固定缓冲区的大小";
						}
						if(size.equalsIgnoreCase("range_alloc_block_size"))
						{
						 size="范围优化时分配的块的大小";
						}
						if(size.equalsIgnoreCase("read_buffer_size"))
						{
						 size="每个线程连续扫描时为扫描的每个表分配的缓冲区的大小(字节)";
						}
						if(size.equalsIgnoreCase("read_only"))
						{
						 size="变量对复制从服务器设置为ON时，服务器是否允许更新";
						}
						if(size.equalsIgnoreCase("read_only"))
						{
						 size="变量对复制从服务器设置为ON时，从服务器不允许更新";
						}
						if(size.equalsIgnoreCase("relay_log_purge"))
						{
						 size="当不再需要中继日志时禁用或启用自动清空中继日志";
						}
						if(size.equalsIgnoreCase("read_rnd_buffer_size"))
						{
						 size="当排序后按排序后的顺序读取行时，则通过该缓冲区读取行，避免搜索硬盘";
						}
						if(size.equalsIgnoreCase("secure_auth"))
						{
						 size="如果用--secure-auth选项启动了MySQL服务器，是否将阻塞有旧格式(4.1之前)密码的所有账户所发起的连接";
						}
						if(size.equalsIgnoreCase("shared_memory"))
						{
						 size="(只用于Windows)服务器是否允许共享内存连接";
						}
						if(size.equalsIgnoreCase("shared_memory_base_name"))
						{
						 size="(只用于Windows)说明服务器是否允许共享内存连接，并为共享内存设置识别符";
						}
						if(size.equalsIgnoreCase("server_id"))
						{
						 size="用于主复制服务器和从复制服务器";
						}
						if(size.equalsIgnoreCase("skip_external_locking"))
						{
						 size="mysqld是否使用外部锁定";
						}
						if(size.equalsIgnoreCase("skip_networking"))
						{
						 size="如果服务器只允许本地(非TCP/IP)连接";
						}
						if(size.equalsIgnoreCase("skip_show_database"))
						{
						 size="防止不具有SHOW DATABASES权限的人们使用SHOW DATABASES语句";
						}
						if(size.equalsIgnoreCase("slave_compressed_protocol"))
						{
						 size="如果主、从服务器均支持，确定是否使用从/主压缩协议";
						}
						if(size.equalsIgnoreCase("slave_load_tmpdir"))
						{
						 size="从服务器为复制LOAD DATA INFILE语句创建临时文件的目录名";
						}
						if(size.equalsIgnoreCase("slave_net_timeout"))
						{
						 size="放弃读操作前等待主/从连接的更多数据的等待秒数";
						}
						if(size.equalsIgnoreCase("slave_skip_errors"))
						{
						 size="从服务器应跳过(忽视)的复制错误";
						}
						if(size.equalsIgnoreCase("slave_transaction_retries"))
						{
						 size="复制从服务器SQL线程未能执行事务，在提示错误并停止前它自动重复slave_transaction_retries次";
						}
						if(size.equalsIgnoreCase("slow_launch_time"))
						{
						 size="如果创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
						}
						if(size.equalsIgnoreCase("sort_buffer_size"))
						{
						 size="每个排序线程分配的缓冲区的大小";
						}
						if(size.equalsIgnoreCase("sql_mode"))
						{
						 size="当前的服务器SQL模式，可以动态设置";
						}
						if(size.equalsIgnoreCase("storage_engine"))
						{
						 size="该变量是table_typeis的同义词。在MySQL 5.1中,首选storage_engine";
						}
						if(size.equalsIgnoreCase("sync_binlog"))
						{
						 size="如果为正，当每个sync_binlog'th写入该二进制日志后，MySQL服务器将它的二进制日志同步到硬盘上";
						}
						if(size.equalsIgnoreCase("sync_frm"))
						{
						 size="如果该变量设为1,当创建非临时表时它的.frm文件是否被同步到硬盘上";
						}
						if(size.equalsIgnoreCase("system_time_zone"))
						{
						 size="服务器系统时区";
						}
						if(size.equalsIgnoreCase("table_cache"))
						{
						 size="所有线程打开的表的数目";
						}
						if(size.equalsIgnoreCase("table_type"))
						{
						 size="默认表类型(存储引擎)";
						}
						if(size.equalsIgnoreCase("thread_cache_size"))
						{
						 size="服务器应缓存多少线程以便重新使用";
						}
						if(size.equalsIgnoreCase("thread_stack"))
						{
						 size="每个线程的堆栈大小";
						}
						if(size.equalsIgnoreCase("time_format"))
						{
						 size="该变量为使用";
						}
						if(size.equalsIgnoreCase("time_zone"))
						{
						 size="当前的时区";
						}
						if(size.equalsIgnoreCase("tmp_table_size"))
						{
						 size="如果内存内的临时表超过该值，MySQL自动将它转换为硬盘上的MyISAM表";
						}
						if(size.equalsIgnoreCase("tmpdir"))
						{
						 size="保存临时文件和临时表的目录";
						}
						if(size.equalsIgnoreCase("transaction_alloc_block_size"))
						{
						 size="为保存将保存到二进制日志中的事务的查询而分配的内存块的大小(字节)";
						}
						if(size.equalsIgnoreCase("transaction_prealloc_size"))
						{
						 size="transaction_alloc_blocks分配的固定缓冲区的大小（字节），在两次查询之间不会释放";
						}
						if(size.equalsIgnoreCase("tx_isolation"))
						{
						 size="默认事务隔离级别";
						}
						if(size.equalsIgnoreCase("updatable_views_with_limit"))
						{
						 size="该变量控制如果更新包含LIMIT子句，是否可以在当前表中使用不包含主关键字的视图进行更新";
						}
						if(size.equalsIgnoreCase("version"))
						{
						 size="服务器版本号";
						}
						if(size.equalsIgnoreCase("version_bdb"))
						{
						 size="BDB存储引擎版本";
						}
						if(size.equalsIgnoreCase("version_comment"))
						{
						 size="configure脚本有一个--with-comment选项，当构建MySQL时可以进行注释";
						}
						if(size.equalsIgnoreCase("version_compile_machine"))
						{
						 size="MySQL构建的机器或架构的类型";
						}
						if(size.equalsIgnoreCase("version_compile_os"))
						{
						 size="MySQL构建的操作系统的类型";
						}
						if(size.equalsIgnoreCase("wait_timeout"))
						{
						 size="服务器关闭非交互连接之前等待活动的秒数";
						}
						cell = new PdfPCell(new Phrase(String.valueOf(rowI),contextFont));//mark
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						stateTable.addCell(cell);
						cell = new PdfPCell(new Phrase(size,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						stateTable.addCell(cell);
						cell = new PdfPCell(new Phrase(free,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						stateTable.addCell(cell);
						rowI++;
                  	}
				}
				document.add(stateTable);
				document.add(new Paragraph("\n"));
				
	//			添加事件汇报信息等
				PdfPTable eventTable = new PdfPTable(2);
				float[] eventWidths = { 220f, 220f};
				eventTable.setWidths(eventWidths);
				eventTable.setWidthPercentage(100);
				cell = new PdfPCell(new Phrase("事件汇报",
						titleFont));
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new PdfPCell(new Phrase("发生连通率事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new PdfPCell(new Phrase("库空间超过阀值事件（次）", titleFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new PdfPCell(new Phrase((String)reportHash.get("downnum"), contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new PdfPCell(new Phrase(reportHash.get("count")+"", contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				document.add(eventTable);
				
				document.add(new Paragraph("\n"));
				//添加事件列表
				addEventLisToPdf(document);
				document.close();
			} catch (Exception e) {
				// SysLogger.error("Error in ExcelReport.createReport()",e);
				e.printStackTrace();
			}
		}

	/**
		 * @author HONGLI 打印MySQL综合报表excel格式报表
		 * @param filename
		 * @throws DocumentException
		 * @throws IOException
		 */
		public void createReport_MySQLCldXls(String filename)
				throws DocumentException, IOException {
			if (impReport.getTable() == null) {
				fileName = null;
				return;
			}
			WritableWorkbook wb = null;
			try {
				wb = Workbook.createWorkbook(new File(filename)); 
	
				String hostname = (String) reportHash.get("dbname");
				String ip = (String) reportHash.get("ip");
				String newip = doip(ip);
				WritableSheet sheet = wb.createSheet(hostname + "综合报表", 0);
				String Ping = (String) reportHash.get("Ping");
				String starttime = (String) reportHash.get("starttime");
				String totime = (String) reportHash.get("totime");
				String typename = (String) reportHash.get("typename");
				String runstr = (String) reportHash.get("runstr");
				String grade = (String) reportHash.get("grade");
				String pingnow = (String) reportHash.get("pingnow");
				String pingmin = (String) reportHash.get("pingmin");
				String pingconavg = (String) reportHash.get("pingconavg");
				DBVo vo = (DBVo) reportHash.get("vo");
				Vector val = (Vector)reportHash.get("Val");
				if(val == null){
					val = new Vector();	
				}
				List sessionlist = (ArrayList)reportHash.get("sessionlist");
				if(sessionlist == null) {
					sessionlist = new ArrayList();
				}
				Hashtable tablesHash = (Hashtable)reportHash.get("tablesHash");
				if(tablesHash == null) {
					tablesHash = new Hashtable();
				}
				Vector tableinfo_v = (Vector)reportHash.get("tableinfo_v");
				if(tableinfo_v == null){
					tableinfo_v = new Vector();	
				}
				Hashtable maxping = (Hashtable) reportHash.get("ping");
	
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
				WritableFont labelFont = new WritableFont(WritableFont
						.createFont("宋体"), 12, WritableFont.BOLD, false);
				WritableCellFormat labelFormat = new WritableCellFormat(labelFont);
	
				WritableCellFormat _labelFormat = new WritableCellFormat();
				_labelFormat.setBackground(jxl.format.Colour.GRAY_25);
	
				WritableCellFormat p_labelFormat = new WritableCellFormat();
				p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
	
				WritableCellFormat b_labelFormat = new WritableCellFormat();
				b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
	
				Label tmpLabel = null;
				tmpLabel = new Label(1, 0, hostname + "性能报表", labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 1, "报表生成时间:" + impReport.getTimeStamp());
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 2, "数据统计时间段: " + starttime + " 至 " + totime);
				sheet.addCell(tmpLabel);
				
				//数据库ip信息
				tmpLabel = new Label(0, 4, "数据库名称", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 4, "IP", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 4, "类型", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 4, "当前状态", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 4, "运行评价", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 5, vo.getDbName(),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 5, ip,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 5, typename,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, 5, runstr,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, 5, grade,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				
				
				
				
				//连通率
				tmpLabel = new Label(0, 7, "连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 7, "最小连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 7, "平均连通率", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(0, 8, pingnow+"%",
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, 8, pingmin+"%",
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, 8, pingconavg+"%",
						p_labelFormat);
				sheet.addCell(tmpLabel);
	
				// 设置图片
				File file = new File(ResourceCenter.getInstance().getSysPath()
						+ "/resource/image/jfreechart/" + newip
						+ "ConnectUtilization" + ".png");
				// 向sheet里面增加图片,0,0,5,1分别代表列,行,图片宽度占位多少个列,高度占位多少个行
				// allRow = allRow+2;
				sheet.addImage(new WritableImage(1, 9, 7, 7, file));
				// allRow = allRow+7;
				
				tmpLabel = new Label(0, 14, " 数据库性能信息", b_labelFormat);
				sheet.addCell(tmpLabel);
				int row = 15;
				if(val != null && val.size()>0){
            		for(int i=0;i<val.size();i++){
            			Hashtable return_value = (Hashtable)val.get(i);
            			if(return_value != null && return_value.size()>0){
            				String name=return_value.get("variable_name").toString();
            				String value=return_value.get("value").toString();
            				if(name.equalsIgnoreCase("Max_used_connections"))
							{
							 name="服务器相应的最大连接数";
							}
							if(name.equalsIgnoreCase("Handler_read_first"))
							{
							 name="索引中第一条被读的次数";
							}
							if(name.equalsIgnoreCase("Handler_read_key"))
							{
							 name="根据键读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_next"))
							{
							 name="按照键顺序读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_prev"))
							{
							 name="按照键顺序读前一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd"))
							{
							 name="H根据固定位置读一行的请求数";
							}
							if(name.equalsIgnoreCase("Handler_read_rnd_next"))
							{
							 name="在数据文件中读下一行的请求数";
							}
							if(name.equalsIgnoreCase("Open_tables"))
							{
							 name="当前打开的表的数量";
							}
							if(name.equalsIgnoreCase("Opened_tables"))
							{
							 name="已经打开的表的数量";
							}
							if(name.equalsIgnoreCase("Threads_cached"))
							{
							 name="线程缓存内的线程的数量";
							}
							if(name.equalsIgnoreCase("Threads_connected"))
							{
							 name="当前打开的连接的数量";
							}
							if(name.equalsIgnoreCase("Threads_created"))
							{
							 name="创建用来处理连接的线程数";
							}
							if(name.equalsIgnoreCase("Threads_running"))
							{
							 name="激活的非睡眠状态的线程数";
							}
							if(name.equalsIgnoreCase("Table_locks_immediate"))
							{
							 name="立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Table_locks_waited"))
							{
							 name="不能立即获得的表的锁的次数";
							}
							if(name.equalsIgnoreCase("Key_read_requests"))
							{
							 name="从缓存读键的数据块的请求数";
							}
							if(name.equalsIgnoreCase("Key_reads"))
							{
							 name="从硬盘读取键的数据块的次数";
							}
							if(name.equalsIgnoreCase("log_slow_queries"))
							{
							 name="是否记录慢查询";
							}
							if(name.equalsIgnoreCase("slow_launch_time"))
							{
							 name="创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
							}
							tmpLabel = new Label(0, row, name, p_labelFormat);
							sheet.addCell(tmpLabel);
							tmpLabel = new Label(1, row, value, p_labelFormat);
							sheet.addCell(tmpLabel);
							row++;
					}
				}
				}
				//连接信息 
				row = row+2;
				tmpLabel = new Label(0, row, "连接信息 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, "序号", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "数据库 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, "用户名  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, "主机 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, "命令 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, "连接时间 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				 if(sessionlist != null && sessionlist.size()>0){
                  	for(int i=0;i<sessionlist.size();i++){
                  		List ipsessionlist = (List)sessionlist.get(i);
                  		if(ipsessionlist != null && ipsessionlist.size()>0){
                  			for(int k=0;k<ipsessionlist.size();k++){
                  				String[] sessions = (String[])ipsessionlist.get(k);
                  				if(sessions != null && sessions.length ==5){
									tmpLabel = new Label(0, row, String.valueOf(k+1), p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(1, row, sessions[4], p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(2, row, sessions[0], p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(3, row, sessions[1], p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(4, row, sessions[2], p_labelFormat);
									sheet.addCell(tmpLabel);
									tmpLabel = new Label(5, row, sessions[3], p_labelFormat);
									sheet.addCell(tmpLabel);
									row++;
                  				}
                  				
                  			}
                  		}
                  	}
				 }
				 
				 // 表信息
				 row = row+2;
				tmpLabel = new Label(0, row, "表信息 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, "序号", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "表名 ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(2, row, "表行数   ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, "表大小  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, "创建时间  ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				String[] dbs = vo.getDbName().split(","); 
                if(dbs != null && dbs.length>0){
                  	for(int i=0;i<dbs.length;i++){
                  		String dbStr = dbs[i];
                  		//System.out.println(dbStr+"====="+tablesHash.size());
                  		if(tablesHash.containsKey(dbStr)){
                  			List tableslist = (List)tablesHash.get(dbStr);
                  			if(tableslist != null && tableslist.size()>0){
		              			for(int k=0;k<tableslist.size();k++){
		              				String[] tables = (String[])tableslist.get(k);
		              				if(tables != null && tables.length ==4){
										tmpLabel = new Label(0, row, String.valueOf(k+1), p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(1, row, tables[0], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(2, row, tables[1], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(3, row, tables[2], p_labelFormat);
										sheet.addCell(tmpLabel);
										tmpLabel = new Label(4, row, tables[3], p_labelFormat);
										sheet.addCell(tmpLabel);
										row++;
                  				}
                  				
                  			}
                  		}
                  	}
				 }
               }
	                  	
//                数据库状态信息
   				 row = row+2;
   				tmpLabel = new Label(0, row, "数据库状态信息  ", b_labelFormat);
   				sheet.addCell(tmpLabel);
   				row++;
   				tmpLabel = new Label(0, row, "序号  ", b_labelFormat);
   				sheet.addCell(tmpLabel);
   				tmpLabel = new Label(1, row, "名称  ", b_labelFormat);
   				sheet.addCell(tmpLabel);
   				tmpLabel = new Label(2, row, "状态信息  ", b_labelFormat);
   				sheet.addCell(tmpLabel);
   				row++;
   				if(tableinfo_v != null)
   				{//HONGLILI
   					for(int i=0;i<tableinfo_v.size();i++){
   						Hashtable ht = (Hashtable)tableinfo_v.get(i);
   						String size = ht.get("variable_name").toString();
   						String free = ht.get("value").toString();
   						if(size.equalsIgnoreCase("auto_increment_increment"))
   						{
   						 size="控制列中的值的增量值";
   						}
   						if(size.equalsIgnoreCase("auto_increment_offset"))
   						{
   						 size="确定AUTO_INCREMENT列值的起点";
   						}
   						if(size.equalsIgnoreCase("automatic_sp_privileges"))
   						{
   						 size="automatic_sp_privileges";
   						}
   						if(size.equalsIgnoreCase("back_log"))
   						{
   						 size="连接请求的数量";
   						}
   						if(size.equalsIgnoreCase("basedir"))
   						{
   						 size="MySQL安装基准目录";
   						}
   						if(size.equalsIgnoreCase("binlog_cache_size"))
   						{
   						 size="容纳二进制日志SQL语句的缓存大小";
   						}
   						if(size.equalsIgnoreCase("bulk_insert_buffer_size"))
   						{
   						 size="每线程的字节数限制缓存树的大小";
   						}
   						if(size.equalsIgnoreCase("character_set_client"))
   						{
   						 size="来自客户端的语句的字符集";
   						}
   						if(size.equalsIgnoreCase("character_set_connection"))
   						{
   						 size="没有字符集导入符的字符串转换";
   						}
   						if(size.equalsIgnoreCase("character_set_database"))
   						{
   						 size="默认数据库使用的字符集";
   						}
   						if(size.equalsIgnoreCase("character_set_filesystem"))
   						{
   						 size="character_set_filesystem";
   						}
   						if(size.equalsIgnoreCase("character_set_results"))
   						{
   						 size="用于向客户端返回查询结果的字符集";
   						}
   						if(size.equalsIgnoreCase("character_set_server"))
   						{
   						 size="服务器的默认字符集";
   						}
   						if(size.equalsIgnoreCase("character_set_system"))
   						{
   						 size="服务器用来保存识别符的字符集";
   						}
   						if(size.equalsIgnoreCase("character_sets_dir"))
   						{
   						 size="字符集安装目录";
   						}
   						if(size.equalsIgnoreCase("collation_connection"))
   						{
   						 size="连接字符集的校对规则";
   						}
   						if(size.equalsIgnoreCase("collation_database"))
   						{
   						 size="默认数据库使用的校对规则";
   						}
   						if(size.equalsIgnoreCase("collation_server"))
   						{
   						 size="服务器的默认校对规则";
   						}
   						if(size.equalsIgnoreCase("completion_type"))
   						{
   						 size="事务结束类型";
   						}
   						if(size.equalsIgnoreCase("concurrent_insert"))
   						{
   						 size="存储值情况";
   						}
   						if(size.equalsIgnoreCase("connect_timeout"))
   						{
   						 size="服务器用Bad handshake响应前等待连接包的秒数";
   						}
   						if(size.equalsIgnoreCase("datadir"))
   						{
   						 size="MySQL数据目录";
   						}
   						if(size.equalsIgnoreCase("date_format"))
   						{
   						 size="date_format(为被使用)";
   						}
   						if(size.equalsIgnoreCase("datetime_format"))
   						{
   						 size="datetime_format(为被使用)";
   						}
   						if(size.equalsIgnoreCase("default_week_format"))
   						{
   						 size="WEEK() 函数使用的默认模式";
   						}
   						if(size.equalsIgnoreCase("delay_key_write"))
   						{
   						 size="使用的DELAY_KEY_WRITE表选项的处理";
   						}
   						if(size.equalsIgnoreCase("delayed_insert_limit"))
   						{
   						 size="INSERT DELAYED处理器线程检查是否有挂起的SELECT语句";
   						}
   						if(size.equalsIgnoreCase("delayed_insert_timeout"))
   						{
   						 size="INSERT DELAYED处理器线程终止前应等待INSERT语句的时间";
   						}
   						if(size.equalsIgnoreCase("delayed_queue_size"))
   						{
   						 size="处理INSERT DELAYED语句时队列中行的数量限制";
   						}
   						if(size.equalsIgnoreCase("div_precision_increment"))
   						{
   						 size="用/操作符执行除操作的结果可增加的精确度的位数";
   						}
   						if(size.equalsIgnoreCase("engine_condition_pushdown"))
   						{
   						 size="适用于NDB的检测";
   						}
   						if(size.equalsIgnoreCase("expire_logs_days"))
   						{
   						 size="二进制日志自动删除的天数";
   						}
   						if(size.equalsIgnoreCase("flush"))
   						{
   						 size="flush选项启动mysqld值";
   						}
   						if(size.equalsIgnoreCase("flush_time"))
   						{
   						 size="查看释放资源情况";
   						}
   						if(size.equalsIgnoreCase("ft_boolean_syntax"))
   						{
   						 size="使用IN BOOLEAN MODE执行的布尔全文搜索支持的操作符系列";
   						}
   						if(size.equalsIgnoreCase("ft_max_word_len"))
   						{
   						 size="FULLTEXT索引中所包含的字的最大长度";
   						}
   						if(size.equalsIgnoreCase("ft_min_word_len"))
   						{
   						 size="FULLTEXT索引中所包含的字的最小长度";
   						}
   						if(size.equalsIgnoreCase("ft_query_expansion_limit"))
   						{
   						 size="使用WITH QUERY EXPANSION进行全文搜索的最大匹配数";
   						}
   						if(size.equalsIgnoreCase("ft_stopword_file"))
   						{
   						 size="用于读取全文搜索的停止字清单的文件";
   						}
   						if(size.equalsIgnoreCase("group_concat_max_len"))
   						{
   						 size="允许的GROUP_CONCAT()函数结果的最大长度";
   						}
   						if(size.equalsIgnoreCase("have_archive"))
   						{
   						 size="mysqld支持ARCHIVE表支持表情况";
   						}
   						if(size.equalsIgnoreCase("have_bdb"))
   						{
   						 size="mysqld支持BDB表情况";
   						}
   						if(size.equalsIgnoreCase("have_blackhole_engine"))
   						{
   						 size="mysqld支持BLACKHOLE表情况";
   						}
   						if(size.equalsIgnoreCase("have_compress"))
   						{
   						 size="是否zlib压缩库适合该服务器";
   						}
   						if(size.equalsIgnoreCase("have_crypt"))
   						{
   						 size="是否crypt()系统调用适合该服务器";
   						}
   						if(size.equalsIgnoreCase("have_csv"))
   						{
   						 size="mysqld支持ARCHIVE表情况";
   						}
   						if(size.equalsIgnoreCase("have_example_engine"))
   						{
   						 size="mysqld支持EXAMPLE表情况";
   						}
   						if(size.equalsIgnoreCase("have_federated_engine"))
   						{
   						 size="mysqld支持FEDERATED表情况";
   						}
   						if(size.equalsIgnoreCase("have_geometry"))
   						{
   						 size="是否服务器支持空间数据类型";
   						}
   						if(size.equalsIgnoreCase("have_innodb"))
   						{
   						 size="mysqld支持InnoDB表情况";
   						}
   						if(size.equalsIgnoreCase("have_isam"))
   						{
   						 size="向后兼容";
   						}
   						if(size.equalsIgnoreCase("have_ndbcluster"))
   						{
   						 size="mysqld支持NDB CLUSTER表情况";
   						}
   						if(size.equalsIgnoreCase("have_openssl"))
   						{
   						 size="mysqld支持客户端/服务器协议的SSL(加密)情况";
   						}
   						if(size.equalsIgnoreCase("have_query_cache"))
   						{
   						 size="mysqld支持查询缓存情况";
   						}
   						if(size.equalsIgnoreCase("have_raid"))
   						{
   						 size="mysqld支持RAID选项情况";
   						}
   						if(size.equalsIgnoreCase("have_rtree_keys"))
   						{
   						 size="RTREE索引是否可用";
   						}
   						if(size.equalsIgnoreCase("have_symlink"))
   						{
   						 size="是否启用符号链接支持";
   						}
   						if(size.equalsIgnoreCase("init_connect"))
   						{
   						 size="字符串处理";
   						}
   						if(size.equalsIgnoreCase("init_file"))
   						{
   						 size="启动服务器时用--init-file选项指定的文件名";
   						}
   						if(size.equalsIgnoreCase("init_slave"))
   						{
   						 size="SQL线程启动时从服务器应执行该字符串";
   						}
   						if(size.equalsIgnoreCase("innodb_additional_mem_pool_size"))
   						{
   						 size="InnoDB用来存储数据内存大小情况";
   						}
   						if(size.equalsIgnoreCase("innodb_autoextend_increment"))
   						{
   						 size="表空间被填满之时扩展表空间的尺寸";
   						}
   						if(size.equalsIgnoreCase("innodb_buffer_pool_awe_mem_mb"))
   						{
   						 size="缓冲池被放在32位Windows的AWE内存里缓存池大小";
   						}
   						if(size.equalsIgnoreCase("innodb_buffer_pool_size"))
   						{
   						 size="InnoDB用来缓存它的数据和索引的内存缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("innodb_checksums"))
   						{
   						 size="InnoDB在所有对磁盘的页面读取上的状态";
   						}
   						if(size.equalsIgnoreCase("innodb_commit_concurrency"))
   						{
   						 size="innodb_commit_concurrency";
   						}
   						if(size.equalsIgnoreCase("innodb_concurrency_tickets"))
   						{
   						 size="innodb_concurrency_tickets";
   						}
   						if(size.equalsIgnoreCase("innodb_data_file_path"))
   						{
   						 size="单独数据文件和它们尺寸的路径";
   						}
   						if(size.equalsIgnoreCase("innodb_data_home_dir"))
   						{
   						 size="目录路径对所有InnoDB数据文件的共同部分";
   						}
   						if(size.equalsIgnoreCase("innodb_doublewrite"))
   						{
   						 size="InnoDB存储所有数据情况";
   						}
   						if(size.equalsIgnoreCase("innodb_fast_shutdown"))
   						{
   						 size="InnoDB在关闭情况的值选择";
   						}
   						if(size.equalsIgnoreCase("innodb_file_io_threads"))
   						{
   						 size="InnoDB中文件I/O线程的数";
   						}
   						if(size.equalsIgnoreCase("innodb_file_per_table"))
   						{
   						 size="确定是否InnoDB用自己的.ibd文件为存储数据和索引创建每一个新表";
   						}
   						if(size.equalsIgnoreCase("innodb_flush_log_at_trx_commit"))
   						{
   						 size="InnoDB对日志操作情况";
   						}
   						if(size.equalsIgnoreCase("innodb_flush_method"))
   						{
   						 size="InnoDB使用fsync()来刷新数据和日志文件";
   						}
   						if(size.equalsIgnoreCase("innodb_force_recovery"))
   						{
   						 size="损坏的数据库转储表的方案";
   						}
   						if(size.equalsIgnoreCase("innodb_lock_wait_timeout"))
   						{
   						 size="InnoDB事务在被回滚之前可以等待一个锁定的超时秒数";
   						}
   						if(size.equalsIgnoreCase("innodb_locks_unsafe_for_binlog"))
   						{
   						 size="InnoDB搜索和索引扫描中关闭下一键锁定";
   						}
   						if(size.equalsIgnoreCase("innodb_log_arch_dir"))
   						{
   						 size="使用日志档案 被完整写入的日志文件所在的目录的归档值";
   						}
   						if(size.equalsIgnoreCase("innodb_log_archive"))
   						{
   						 size="日志处理情况";
   						}
   						if(size.equalsIgnoreCase("innodb_log_buffer_size"))
   						{
   						 size="InnoDB用来往磁盘上的日志文件写操作的缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("innodb_log_file_size"))
   						{
   						 size="日志组里每个日志文件的大小";
   						}
   						if(size.equalsIgnoreCase("innodb_log_files_in_group"))
   						{
   						 size="日志组里日志文件的数目";
   						}
   						if(size.equalsIgnoreCase("innodb_log_group_home_dir"))
   						{
   						 size="InnoDB日志文件的目录路径";
   						}
   						if(size.equalsIgnoreCase("innodb_max_dirty_pages_pct"))
   						{
   						 size="InnoDB中处理脏页的情况";
   						}
   						if(size.equalsIgnoreCase("innodb_max_purge_lag"))
   						{
   						 size="净化操作被滞后之时，如何延迟INSERT,UPDATE和DELETE操作";
   						}
   						if(size.equalsIgnoreCase("innodb_mirrored_log_groups"))
   						{
   						 size="为数据库保持的日志组内同样拷贝的数量";
   						}
   						if(size.equalsIgnoreCase("innodb_open_files"))
   						{
   						 size="定InnoDB一次可以保持打开的.ibd文件的最大数";
   						}
   						if(size.equalsIgnoreCase("innodb_support_xa"))
   						{
   						 size="InnoDB支持在XA事务中的双向提交情况";
   						}
   						if(size.equalsIgnoreCase("innodb_sync_spin_loops"))
   						{
   						 size="innodb_sync_spin_loops";
   						}
   						if(size.equalsIgnoreCase("innodb_table_locks"))
   						{
   						 size="InnoDB对表的锁定情况";
   						}
   						if(size.equalsIgnoreCase("innodb_thread_concurrency"))
   						{
   						 size="InnoDB试着在InnoDB内保持操作系统线程的数量少于或等于这个参数给出的限制范围";
   						}
   						if(size.equalsIgnoreCase("innodb_thread_sleep_delay"))
   						{
   						 size="让InnoDB为周期的SHOW INNODB STATUS输出创建一个文件<datadir>/innodb_status";
   						}
   						if(size.equalsIgnoreCase("interactive_timeout"))
   						{
   						 size="服务器关闭交互式连接前等待活动的秒数";
   						}
   						if(size.equalsIgnoreCase("join_buffer_size"))
   						{
   						 size="用于完全联接的缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("key_buffer_size"))
   						{
   						 size="索引块缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("key_cache_age_threshold"))
   						{
   						 size="控制将缓冲区从键值缓存热子链(sub-chain)降级到温子链(sub-chain)的值";
   						}
   						if(size.equalsIgnoreCase("key_cache_block_size"))
   						{
   						 size="键值缓存内块的字节大小";
   						}
   						if(size.equalsIgnoreCase("key_cache_division_limit"))
   						{
   						 size="键值缓存缓冲区链热子链和温子链的划分点";
   						}
   						if(size.equalsIgnoreCase("language"))
   						{
   						 size="错误消息所用语言";
   						}
   						if(size.equalsIgnoreCase("large_files_support"))
   						{
   						 size="mysqld编译时是否使用了大文件支持选项";
   						}
   						if(size.equalsIgnoreCase("large_page_size"))
   						{
   						 size="large_page_size";
   						}
   						if(size.equalsIgnoreCase("large_pages"))
   						{
   						 size="是否启用了大页面支持";
   						}
   						if(size.equalsIgnoreCase("license"))
   						{
   						 size="服务器的许可类型";
   						}
   						if(size.equalsIgnoreCase("local_infile"))
   						{
   						 size="是否LOCAL支持LOAD DATA INFILE语句";
   						}
   						if(size.equalsIgnoreCase("log"))
   						{
   						 size="是否启用将所有查询记录到常规查询日志中";
   						}
   						if(size.equalsIgnoreCase("log_bin"))
   						{
   						 size="是否启用二进制日志";
   						}
   						if(size.equalsIgnoreCase("log_bin_trust_function_creators"))
   						{
   						 size="是否可以信任保存的程序的作者不会创建向二进制日志写入不安全事件的程序";
   						}
   						if(size.equalsIgnoreCase("log_error"))
   						{
   						 size="错误日志的位置";
   						}
   						if(size.equalsIgnoreCase("log_slave_updates"))
   						{
   						 size="是否从服务器从主服务器收到的更新应记入从服务器自己的二进制日志";
   						}
   						if(size.equalsIgnoreCase("log_slow_queries"))
   						{
   						 size="是否记录慢查询";
   						}
   						if(size.equalsIgnoreCase("log_warnings"))
   						{
   						 size="是否产生其它警告消息";
   						}
   						if(size.equalsIgnoreCase("long_query_time"))
   						{
   						 size="查询时间超过该值，则增加Slow_queries状态变量";
   						}
   						if(size.equalsIgnoreCase("low_priority_updates"))
   						{
   						 size="表示sql语句等待语句将等待直到受影响的表没有挂起的SELECT或LOCK TABLE READ";
   						}
   						if(size.equalsIgnoreCase("lower_case_file_system"))
   						{
   						 size="说明是否数据目录所在的文件系统对文件名的大小写敏感";
   						}
   						if(size.equalsIgnoreCase("lower_case_table_names"))
   						{
   						 size="为1表示表名用小写保存到硬盘上，并且表名比较时不对大小写敏感";
   						}
   						if(size.equalsIgnoreCase("max_allowed_packet"))
   						{
   						 size="包或任何生成的/中间字符串的最大大小";
   						}
   						if(size.equalsIgnoreCase("max_binlog_cache_size"))
   						{
   						 size="多语句事务需要更大的内存时出现的情况";
   						}
   						if(size.equalsIgnoreCase("max_binlog_size"))
   						{
   						 size="多语句事务需要更大的内存时出现的情况";
   						}
   						if(size.equalsIgnoreCase("max_connect_errors"))
   						{
   						 size="断的与主机的连接的最大限制数";
   						}
   						if(size.equalsIgnoreCase("max_connections"))
   						{
   						 size="允许的并行客户端连接数目";
   						}
   						if(size.equalsIgnoreCase("max_delayed_threads"))
   						{
   						 size="启动线程来处理INSERT DELAYED语句的限制数";
   						}
   						if(size.equalsIgnoreCase("max_error_count"))
   						{
   						 size="存由SHOW ERRORS或SHOW WARNINGS显示的错误、警告和注解的最大数目";
   						}
   						if(size.equalsIgnoreCase("max_heap_table_size"))
   						{
   						 size="设置MEMORY (HEAP)表可以增长到的最大空间大小";
   						}
   						if(size.equalsIgnoreCase("max_insert_delayed_threads"))
   						{
   						 size="启动线程来处理INSERT DELAYED语句的限制数(同max_delayed_threads)";
   						}
   						if(size.equalsIgnoreCase("max_join_size"))
   						{
   						 size="不允许可能需要检查多于max_join_size行的情况";
   						}
   						if(size.equalsIgnoreCase("max_length_for_sort_data"))
   						{
   						 size="确定使用的filesort算法的索引值大小的限值";
   						}
   						if(size.equalsIgnoreCase("max_prepared_stmt_count"))
   						{
   						 size="max_prepared_stmt_count";
   						}
   						if(size.equalsIgnoreCase("max_relay_log_size"))
   						{
   						 size="如果复制从服务器写入中继日志时超出给定值，则滚动中继日";
   						}
   						if(size.equalsIgnoreCase("max_seeks_for_key"))
   						{
   						 size="限制根据键值寻找行时的最大搜索数";
   						}
   						if(size.equalsIgnoreCase("max_sort_length"))
   						{
   						 size="排序BLOB或TEXT值时使用的字节数";
   						}
   						if(size.equalsIgnoreCase("max_sp_recursion_depth"))
   						{
   						 size="max_sp_recursion_depth";
   						}
   						if(size.equalsIgnoreCase("max_tmp_tables"))
   						{
   						 size="客户端可以同时打开的临时表的最大数";
   						}
   						if(size.equalsIgnoreCase("max_user_connections"))
   						{
   						 size="给定的MySQL账户允许的最大同时连接数";
   						}
   						if(size.equalsIgnoreCase("max_write_lock_count"))
   						{
   						 size="超过写锁定限制后，允许部分读锁定";
   						}
   						if(size.equalsIgnoreCase("multi_range_count"))
   						{
   						 size="multi_range_count";
   						}
   						if(size.equalsIgnoreCase("myisam_data_pointer_size"))
   						{
   						 size="默认指针大小的值";
   						}
   						if(size.equalsIgnoreCase("myisam_max_sort_file_size"))
   						{
   						 size="重建MyISAM索引时，允许MySQL使用的临时文件的最大空间大小";
   						}
   						if(size.equalsIgnoreCase("myisam_recover_options"))
   						{
   						 size="myisam-recover选项的值";
   						}
   						if(size.equalsIgnoreCase("myisam_repair_threads"))
   						{
   						 size="如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引";
   						}
   						if(size.equalsIgnoreCase("myisam_sort_buffer_size"))
   						{
   						 size="在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序MyISAM索引分配的缓冲区";
   						}
   						if(size.equalsIgnoreCase("myisam_stats_method"))
   						{
   						 size="MyISAM表搜集关于索引值分发的统计信息时服务器如何处理NULL值";
   						}
   						if(size.equalsIgnoreCase("named_pipe"))
   						{
   						 size="明服务器是否支持命名管道连接";
   						}
   						if(size.equalsIgnoreCase("net_buffer_length"))
   						{
   						 size="在查询之间将通信缓冲区重设为该值";
   						}
   						if(size.equalsIgnoreCase("net_read_timeout"))
   						{
   						 size="中断读前等待连接的其它数据的秒数";
   						}
   						if(size.equalsIgnoreCase("net_retry_count"))
   						{
   						 size="表示某个通信端口的读操作中断了，在放弃前重试多次";
   						}
   						if(size.equalsIgnoreCase("net_write_timeout"))
   						{
   						 size="中断写之前等待块写入连接的秒数";
   						}
   						if(size.equalsIgnoreCase("new"))
   						{
   						 size="表示在MySQL 4.0中使用该变量来打开4.1中的一些行为，并用于向后兼容性";
   						}
   						if(size.equalsIgnoreCase("old_passwords"))
   						{
   						 size="是否服务器应为MySQL用户账户使用pre-4.1-style密码性";
   						}
   						if(size.equalsIgnoreCase("open_files_limit"))
   						{
   						 size="操作系统允许mysqld打开的文件的数量";
   						}
   						if(size.equalsIgnoreCase("optimizer_prune_level"))
   						{
   						 size="在查询优化从优化器搜索空间裁减低希望局部计划中使用的控制方法 0表示禁用方法";
   						}
   						if(size.equalsIgnoreCase("optimizer_search_depth"))
   						{
   						 size="查询优化器进行的搜索的最大深度";
   						}
   						if(size.equalsIgnoreCase("pid_file"))
   						{
   						 size="进程ID (PID)文件的路径名";
   						}
   						if(size.equalsIgnoreCase("prepared_stmt_count"))
   						{
   						 size="prepared_stmt_count";
   						}
   						if(size.equalsIgnoreCase("port"))
   						{
   						 size="服务器帧听TCP/IP连接所用端口";
   						}
   						if(size.equalsIgnoreCase("preload_buffer_size"))
   						{
   						 size="重载索引时分配的缓冲区大小";
   						}
   						if(size.equalsIgnoreCase("protocol_version"))
   						{
   						 size="MySQL服务器使用的客户端/服务器协议的版本";
   						}
   						if(size.equalsIgnoreCase("query_alloc_block_size"))
   						{
   						 size="为查询分析和执行过程中创建的对象分配的内存块大小";
   						}
   						if(size.equalsIgnoreCase("query_cache_limit"))
   						{
   						 size="不要缓存大于该值的结果";
   						}
   						if(size.equalsIgnoreCase("query_cache_min_res_unit"))
   						{
   						 size="查询缓存分配的最小块的大小(字节)";
   						}
   						if(size.equalsIgnoreCase("query_cache_size"))
   						{
   						 size="为缓存查询结果分配的内存的数量";
   						}
   						if(size.equalsIgnoreCase("query_cache_type"))
   						{
   						 size="设置查询缓存类型";
   						}
   						if(size.equalsIgnoreCase("query_cache_wlock_invalidate"))
   						{
   						 size="对表进行WRITE锁定的设置值";
   						}
   						if(size.equalsIgnoreCase("query_prealloc_size"))
   						{
   						 size="用于查询分析和执行的固定缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("range_alloc_block_size"))
   						{
   						 size="范围优化时分配的块的大小";
   						}
   						if(size.equalsIgnoreCase("read_buffer_size"))
   						{
   						 size="每个线程连续扫描时为扫描的每个表分配的缓冲区的大小(字节)";
   						}
   						if(size.equalsIgnoreCase("read_only"))
   						{
   						 size="变量对复制从服务器设置为ON时，服务器是否允许更新";
   						}
   						if(size.equalsIgnoreCase("read_only"))
   						{
   						 size="变量对复制从服务器设置为ON时，从服务器不允许更新";
   						}
   						if(size.equalsIgnoreCase("relay_log_purge"))
   						{
   						 size="当不再需要中继日志时禁用或启用自动清空中继日志";
   						}
   						if(size.equalsIgnoreCase("read_rnd_buffer_size"))
   						{
   						 size="当排序后按排序后的顺序读取行时，则通过该缓冲区读取行，避免搜索硬盘";
   						}
   						if(size.equalsIgnoreCase("secure_auth"))
   						{
   						 size="如果用--secure-auth选项启动了MySQL服务器，是否将阻塞有旧格式(4.1之前)密码的所有账户所发起的连接";
   						}
   						if(size.equalsIgnoreCase("shared_memory"))
   						{
   						 size="(只用于Windows)服务器是否允许共享内存连接";
   						}
   						if(size.equalsIgnoreCase("shared_memory_base_name"))
   						{
   						 size="(只用于Windows)说明服务器是否允许共享内存连接，并为共享内存设置识别符";
   						}
   						if(size.equalsIgnoreCase("server_id"))
   						{
   						 size="用于主复制服务器和从复制服务器";
   						}
   						if(size.equalsIgnoreCase("skip_external_locking"))
   						{
   						 size="mysqld是否使用外部锁定";
   						}
   						if(size.equalsIgnoreCase("skip_networking"))
   						{
   						 size="如果服务器只允许本地(非TCP/IP)连接";
   						}
   						if(size.equalsIgnoreCase("skip_show_database"))
   						{
   						 size="防止不具有SHOW DATABASES权限的人们使用SHOW DATABASES语句";
   						}
   						if(size.equalsIgnoreCase("slave_compressed_protocol"))
   						{
   						 size="如果主、从服务器均支持，确定是否使用从/主压缩协议";
   						}
   						if(size.equalsIgnoreCase("slave_load_tmpdir"))
   						{
   						 size="从服务器为复制LOAD DATA INFILE语句创建临时文件的目录名";
   						}
   						if(size.equalsIgnoreCase("slave_net_timeout"))
   						{
   						 size="放弃读操作前等待主/从连接的更多数据的等待秒数";
   						}
   						if(size.equalsIgnoreCase("slave_skip_errors"))
   						{
   						 size="从服务器应跳过(忽视)的复制错误";
   						}
   						if(size.equalsIgnoreCase("slave_transaction_retries"))
   						{
   						 size="复制从服务器SQL线程未能执行事务，在提示错误并停止前它自动重复slave_transaction_retries次";
   						}
   						if(size.equalsIgnoreCase("slow_launch_time"))
   						{
   						 size="如果创建线程的时间超过该秒数，服务器增加Slow_launch_threads状态变量";
   						}
   						if(size.equalsIgnoreCase("sort_buffer_size"))
   						{
   						 size="每个排序线程分配的缓冲区的大小";
   						}
   						if(size.equalsIgnoreCase("sql_mode"))
   						{
   						 size="当前的服务器SQL模式，可以动态设置";
   						}
   						if(size.equalsIgnoreCase("storage_engine"))
   						{
   						 size="该变量是table_typeis的同义词。在MySQL 5.1中,首选storage_engine";
   						}
   						if(size.equalsIgnoreCase("sync_binlog"))
   						{
   						 size="如果为正，当每个sync_binlog'th写入该二进制日志后，MySQL服务器将它的二进制日志同步到硬盘上";
   						}
   						if(size.equalsIgnoreCase("sync_frm"))
   						{
   						 size="如果该变量设为1,当创建非临时表时它的.frm文件是否被同步到硬盘上";
   						}
   						if(size.equalsIgnoreCase("system_time_zone"))
   						{
   						 size="服务器系统时区";
   						}
   						if(size.equalsIgnoreCase("table_cache"))
   						{
   						 size="所有线程打开的表的数目";
   						}
   						if(size.equalsIgnoreCase("table_type"))
   						{
   						 size="默认表类型(存储引擎)";
   						}
   						if(size.equalsIgnoreCase("thread_cache_size"))
   						{
   						 size="服务器应缓存多少线程以便重新使用";
   						}
   						if(size.equalsIgnoreCase("thread_stack"))
   						{
   						 size="每个线程的堆栈大小";
   						}
   						if(size.equalsIgnoreCase("time_format"))
   						{
   						 size="该变量为使用";
   						}
   						if(size.equalsIgnoreCase("time_zone"))
   						{
   						 size="当前的时区";
   						}
   						if(size.equalsIgnoreCase("tmp_table_size"))
   						{
   						 size="如果内存内的临时表超过该值，MySQL自动将它转换为硬盘上的MyISAM表";
   						}
   						if(size.equalsIgnoreCase("tmpdir"))
   						{
   						 size="保存临时文件和临时表的目录";
   						}
   						if(size.equalsIgnoreCase("transaction_alloc_block_size"))
   						{
   						 size="为保存将保存到二进制日志中的事务的查询而分配的内存块的大小(字节)";
   						}
   						if(size.equalsIgnoreCase("transaction_prealloc_size"))
   						{
   						 size="transaction_alloc_blocks分配的固定缓冲区的大小（字节），在两次查询之间不会释放";
   						}
   						if(size.equalsIgnoreCase("tx_isolation"))
   						{
   						 size="默认事务隔离级别";
   						}
   						if(size.equalsIgnoreCase("updatable_views_with_limit"))
   						{
   						 size="该变量控制如果更新包含LIMIT子句，是否可以在当前表中使用不包含主关键字的视图进行更新";
   						}
   						if(size.equalsIgnoreCase("version"))
   						{
   						 size="服务器版本号";
   						}
   						if(size.equalsIgnoreCase("version_bdb"))
   						{
   						 size="BDB存储引擎版本";
   						}
   						if(size.equalsIgnoreCase("version_comment"))
   						{
   						 size="configure脚本有一个--with-comment选项，当构建MySQL时可以进行注释";
   						}
   						if(size.equalsIgnoreCase("version_compile_machine"))
   						{
   						 size="MySQL构建的机器或架构的类型";
   						}
   						if(size.equalsIgnoreCase("version_compile_os"))
   						{
   						 size="MySQL构建的操作系统的类型";
   						}
   						if(size.equalsIgnoreCase("wait_timeout"))
   						{
   						 size="服务器关闭非交互连接之前等待活动的秒数";
   						}
						tmpLabel = new Label(0, row, String.valueOf(i+1), p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(1, row, size, p_labelFormat);
						sheet.addCell(tmpLabel);
						tmpLabel = new Label(2, row, free, p_labelFormat);
						sheet.addCell(tmpLabel);
						row++;	
                     }
   				 }      	
				
				//事 件 汇 报 
				row = row+2;
				tmpLabel = new Label(0, row, "事 件 汇 报  ", labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, "发生连通率事件（次）", b_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, "库空间超过阀值事件（次） ", b_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
				tmpLabel = new Label(0, row, (String)reportHash.get("downnum"),
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(1, row, reportHash.get("count")+"",
						p_labelFormat);
				sheet.addCell(tmpLabel);
				
//				增加事件列表
				addEventListToExcel(sheet, row);
				
	
				if (impReport.getChart() != null) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					try {
						ChartUtilities.writeChartAsPNG(baos, impReport.getChart()
								.getChart(), impReport.getChart().getWidth(),
								impReport.getChart().getHeight());
					} catch (IOException ioe) {
					}
					WritableImage wi = new WritableImage(2, 10000 + 5, 8, 12, baos.toByteArray());
					sheet.addImage(wi);
				}
				wb.write();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (wb != null)
						wb.close();
				} catch (Exception e) {
				}
			}
		}

		/**
		 * 增加事件列表到Excel
		 * @param sheet
		 * @param row
		 * @return
		 * @throws WriteException
		 * @throws RowsExceededException
		 */
		private void addEventListToExcel(WritableSheet sheet, int row) throws WriteException, RowsExceededException {
			WritableCellFormat p_labelFormat = new WritableCellFormat();
			p_labelFormat.setBackground(jxl.format.Colour.ICE_BLUE);
			WritableFont labelFont = new WritableFont(WritableFont
					.createFont("宋体"), 12, WritableFont.BOLD, false);
			WritableCellFormat b_labelFormat = new WritableCellFormat();
			b_labelFormat.setBackground(jxl.format.Colour.GRAY_50);
			WritableCellFormat labelFormat = new WritableCellFormat(labelFont);

			WritableCellFormat red_labelFormat = new WritableCellFormat();
			WritableCellFormat orange_labelFormat = new WritableCellFormat();
			WritableCellFormat yellow_labelFormat = new WritableCellFormat();
			
			
			red_labelFormat.setBackground(jxl.format.Colour.RED);
			orange_labelFormat.setBackground(jxl.format.Colour.ORANGE);
			yellow_labelFormat.setBackground(jxl.format.Colour.YELLOW);
			
			Label tmpLabel;
			row = row+2;
			tmpLabel = new Label(0, row, "事件列表", labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			tmpLabel = new Label(0, row, "编号 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(1, row, "事件等级", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(2, row, "事件描述 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(3, row, "登记日期 ", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(4, row, "登记人", b_labelFormat);
			sheet.addCell(tmpLabel);
			tmpLabel = new Label(5, row, "处理状态", b_labelFormat);
			sheet.addCell(tmpLabel);
			row++;
			int index = 0;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
		  	List list = (ArrayList)reportHash.get("list");
		  	if(list != null && list.size()>0){
			  	for(int i=0;i<list.size();i++){
			 	index++;
			  	EventList eventlist = (EventList)list.get(i);
			  	Date cc = eventlist.getRecordtime().getTime();
			  	Integer eventid = eventlist.getId();
			  	String eventlocation = eventlist.getEventlocation();
			  	String content = eventlist.getContent();
			  	String level = String.valueOf(eventlist.getLevel1());
			  	String status = String.valueOf(eventlist.getManagesign());
			  	String s = status;
				String showlevel = null;
			  	String act="处理报告";
			  	if("1".equals(level)){
			  		showlevel="普通事件";
			  	}
			  	if("2".equals(level)){
			  		showlevel="严重事件";
			  	}else{
				    showlevel="紧急告警";
				}
			   	  	if("0".equals(status)){
			  		status = "未处理";
			  	}
			  	if("1".equals(status)){
			  		status = "处理中";  	
			  	}
			  	if("2".equals(status)){
			  	  	status = "处理完成";
			  	}
			  	String rptman = eventlist.getReportman();
			  	String rtime1 = _sdf.format(cc);


			  	tmpLabel = new Label(0, row, String.valueOf(index),
						p_labelFormat);
				sheet.addCell(tmpLabel);
			  	if("3".equals(level)){
					tmpLabel = new Label(1, row, showlevel,
							red_labelFormat);
					sheet.addCell(tmpLabel);
			  	}else if("2".equals(level)){
			  		tmpLabel = new Label(1, row, showlevel,
			  				orange_labelFormat);
					sheet.addCell(tmpLabel);
			  	}else {
			  		tmpLabel = new Label(1, row, showlevel,
			  				yellow_labelFormat);
					sheet.addCell(tmpLabel);
			  	}
			  	tmpLabel = new Label(2, row, content,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(3, row, rtime1,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(4, row, rptman,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				tmpLabel = new Label(5, row, status,
						p_labelFormat);
				sheet.addCell(tmpLabel);
				row++;
			  	}
		  	}
		}
		
		/**
		 * 增加事件列表到PDF
		 * @param document
		 * @throws DocumentException
		 * @throws IOException 
		 */
		private void addEventLisToPdf(Document document) throws DocumentException, IOException {
			// 设置中文字体
			BaseFont bfChinese = BaseFont.createFont("STSong-Light",
					"UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			// 标题字体风格
			Font titleFont = new Font(bfChinese, 12, Font.BOLD);
			// 正文字体风格
			Font contextFont = new Font(bfChinese, 12, Font.NORMAL);
			
			PdfPCell cell;
			PdfPTable eventListTable = new PdfPTable(6);
			float[] eventListWidths = { 220f, 220f, 220f, 220f, 220f, 220f};
			eventListTable.setWidths(eventListWidths);
			eventListTable.setWidthPercentage(100);
			cell = new PdfPCell(new Phrase("事件列表",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("编号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("事件等级 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("事件描述 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("登记日期", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("登记人 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			cell = new PdfPCell(new Phrase("处理状态 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventListTable.addCell(cell);
			int index = 0;
			java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
			List list = (ArrayList)reportHash.get("list");
			if(list != null && list.size()>0){
			  	for(int i=0;i<list.size();i++){
				 	index++;
				  	EventList eventlist = (EventList)list.get(i);
				  	Date cc = eventlist.getRecordtime().getTime();
				  	Integer eventid = eventlist.getId();
				  	String eventlocation = eventlist.getEventlocation();
				  	String content = eventlist.getContent();
				  	String level = String.valueOf(eventlist.getLevel1());
				  	String status = String.valueOf(eventlist.getManagesign());
				  	String s = status;
					String showlevel = null;
				  	String act="处理报告";
				  	if("1".equals(level)){
				  		showlevel="普通事件";
				  	}
				  	if("2".equals(level)){
				  		showlevel="严重事件";
				  	}else{
					    showlevel="紧急告警";
					}
				   	  	if("0".equals(status)){
				  		status = "未处理";
				  	}
				  	if("1".equals(status)){
				  		status = "处理中";  	
				  	}
				  	if("2".equals(status)){
				  	  	status = "处理完成";
				  	}
				  	String rptman = eventlist.getReportman();
				  	String rtime1 = _sdf.format(cc);
					cell = new PdfPCell(new Phrase(String.valueOf(index),contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventListTable.addCell(cell);
				  	if("3".equals(level)){
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.red);
						eventListTable.addCell(cell);
				  	}else if("2".equals(level)){
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.orange);
						eventListTable.addCell(cell);
				  	}else {
				  		cell = new PdfPCell(new Phrase(showlevel,contextFont));
						cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
						cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
						cell.setBackgroundColor(Color.yellow);
						eventListTable.addCell(cell);
				  	}
					cell = new PdfPCell(new Phrase(content,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventListTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rtime1,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventListTable.addCell(cell);
					cell = new PdfPCell(new Phrase(rptman,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventListTable.addCell(cell);
					cell = new PdfPCell(new Phrase(status,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					eventListTable.addCell(cell);
			  	}
			}
			
			document.add(eventListTable);
		}
		
		/**
		 * 增加事件列表到DOC
		 * @param document
		 * @param titleFont
		 * @param contextFont
		 * @throws BadElementException
		 * @throws DocumentException
		 */
		private void addEventListToDoc(Document document, Font titleFont, Font contextFont) throws BadElementException, DocumentException {
			Cell cell;
//				事件表
			Table eventTable = new Table(6);
			float[] eventWidths = { 220f, 220f, 220f, 220f, 220f , 220f};
			eventTable.setWidths(eventWidths);
			eventTable.setWidth(100); // 占页面宽度 90%
			eventTable.setAlignment(Element.ALIGN_CENTER);// 居中显示
			eventTable.setAutoFillEmptyCells(true); // 自动填满
			eventTable.setBorderWidth(1); // 边框宽度
			eventTable.setBorderColor(new Color(0, 125, 255)); // 边框颜色
			eventTable.setPadding(2);// 衬距，看效果就知道什么意思了
			eventTable.setSpacing(0);// 即单元格之间的间距
			eventTable.setBorder(2);// 边框
			eventTable.endHeaders();
			cell = new Cell(new Phrase("事件列表",
					titleFont));
			cell.setColspan(6);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("序号", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("事件等级 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("事件描述 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("登记日期 ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("登记人  ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			cell = new Cell(new Phrase("处理状态   ", titleFont));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
			eventTable.addCell(cell);
			
			int index = 0;
		  	java.text.SimpleDateFormat _sdf = new java.text.SimpleDateFormat("MM-dd HH:mm");
		  	List list = (ArrayList)reportHash.get("list");
		  	if(list != null && list.size()>0){
			  	for(int i=0;i<list.size();i++){
			 	index++;
			  	EventList eventlist = (EventList)list.get(i);
			  	Date cc = eventlist.getRecordtime().getTime();
			  	Integer eventid = eventlist.getId();
			  	String eventlocation = eventlist.getEventlocation();
			  	String content = eventlist.getContent();
			  	String level = String.valueOf(eventlist.getLevel1());
			  	String status = String.valueOf(eventlist.getManagesign());
			  	String s = status;
				String showlevel = null;
			  	String act="处理报告";
			  	if("1".equals(level)){
			  		showlevel="普通事件";
			  	}
			  	if("2".equals(level)){
			  		showlevel="严重事件";
			  	}else{
				    showlevel="紧急告警";
				}
			   	  	if("0".equals(status)){
			  		status = "未处理";
			  	}
			  	if("1".equals(status)){
			  		status = "处理中";  	
			  	}
			  	if("2".equals(status)){
			  	  	status = "处理完成";
			  	}
			  	String rptman = eventlist.getReportman();
			  	String rtime1 = _sdf.format(cc);
			  	
				cell = new Cell(new Phrase(String.valueOf(index),contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				if("3".equals(level)){
					cell = new Cell(new Phrase(showlevel,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					cell.setBackgroundColor(Color.red);
					eventTable.addCell(cell);
				}else if("2".equals(level)){
					cell = new Cell(new Phrase(showlevel,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					cell.setBackgroundColor(Color.orange);
					eventTable.addCell(cell);
				}else{
					cell = new Cell(new Phrase(showlevel,contextFont));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
					cell.setBackgroundColor(Color.yellow);
					eventTable.addCell(cell);
				}
				cell = new Cell(new Phrase(content,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new Cell(new Phrase(rtime1,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new Cell(new Phrase(rptman,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
				cell = new Cell(new Phrase(status,contextFont));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER); // 水平居中
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE); // 垂直居中
				eventTable.addCell(cell);
			  }
		  	}
			document.add(eventTable);
		}
}
